{
  "openapi": "3.0.0",
  "servers": [{ "url": "https://api.botpress.cloud" }],
  "info": { "title": "Botpress API", "description": "API for Botpress Cloud", "version": "1.1.0" },
  "paths": {
    "/v1/tables": {
      "get": {
        "operationId": "listTables",
        "description": "Retrieves a list of all tables associated with your bot.",
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "description": "Optional filters to narrow down the list by tags associated with tables.",
            "schema": { "type": "object", "additionalProperties": { "type": "string" } }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/listTablesResponse" },
          "default": { "$ref": "#/components/responses/listTablesResponse" }
        }
      },
      "post": {
        "operationId": "createTable",
        "description": "Initiates the creation of a new table based on the provided schema, excluding system-managed fields like IDs and timestamps.",
        "parameters": [],
        "responses": {
          "200": { "$ref": "#/components/responses/createTableResponse" },
          "default": { "$ref": "#/components/responses/createTableResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/createTableBody" }
      }
    },
    "/v1/tables/{table}": {
      "get": {
        "operationId": "getTable",
        "description": "Retrieves detailed information about a specific table, identified by its name or unique identifier.",
        "parameters": [
          {
            "name": "table",
            "in": "path",
            "description": "The table's name or unique identifier for targeting specific table operations.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/getTableResponse" },
          "default": { "$ref": "#/components/responses/getTableResponse" }
        }
      },
      "post": {
        "operationId": "getOrCreateTable",
        "description": "Retrieves information about a specific table if it exists; otherwise, creates a new table based on the provided schema.",
        "parameters": [
          {
            "name": "table",
            "in": "path",
            "description": "The table's name or unique identifier for targeting specific table operations.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/getOrCreateTableResponse" },
          "default": { "$ref": "#/components/responses/getOrCreateTableResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/getOrCreateTableBody" }
      },
      "put": {
        "operationId": "updateTable",
        "description": "Updates the schema or the name of an existing table.",
        "parameters": [
          {
            "name": "table",
            "in": "path",
            "description": "The table's name or unique identifier for targeting specific table operations.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/updateTableResponse" },
          "default": { "$ref": "#/components/responses/updateTableResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/updateTableBody" }
      },
      "delete": {
        "operationId": "deleteTable",
        "description": "Permanently deletes a table and all its associated data from the system. Use with caution, as this action cannot be undone.",
        "parameters": [
          {
            "name": "table",
            "in": "path",
            "description": "The table's name or unique identifier for targeting specific table operations.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/deleteTableResponse" },
          "default": { "$ref": "#/components/responses/deleteTableResponse" }
        }
      }
    },
    "/v1/tables/{sourceTableId}/duplicate": {
      "post": {
        "operationId": "duplicateTable",
        "description": "Duplicates the table schema & content",
        "parameters": [
          {
            "name": "sourceTableId",
            "in": "path",
            "description": "The table's unique identifier",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/duplicateTableResponse" },
          "default": { "$ref": "#/components/responses/duplicateTableResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/duplicateTableBody" }
      }
    },
    "/v1/tables/{table}/export": {
      "get": {
        "operationId": "exportTable",
        "description": "Starts an export job for the table",
        "parameters": [
          {
            "name": "table",
            "in": "path",
            "description": "The table's unique identifier",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "format",
            "in": "query",
            "description": "The format of the exported file. CSV includes only the data while JSON includes the schema.",
            "schema": { "type": "string", "enum": ["csv", "json"] }
          },
          {
            "name": "compress",
            "in": "query",
            "description": "Whether or not the export is compressed (gzipped).",
            "schema": { "default": true, "type": "boolean" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/exportTableResponse" },
          "default": { "$ref": "#/components/responses/exportTableResponse" }
        }
      }
    },
    "/v1/tables/{table}/jobs": {
      "get": {
        "operationId": "getTableJobs",
        "description": "Returns a list of recent jobs for the table (export/import operations)",
        "parameters": [
          {
            "name": "table",
            "in": "path",
            "description": "The table's unique identifier",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/getTableJobsResponse" },
          "default": { "$ref": "#/components/responses/getTableJobsResponse" }
        }
      }
    },
    "/v1/tables/{table}/import": {
      "post": {
        "operationId": "importTable",
        "description": "Import the content of a file into a table. The table must already have been created with the correct schema. Data already in the table will be kept.",
        "parameters": [
          {
            "name": "table",
            "in": "path",
            "description": "The table's name or unique identifier for targeting specific table operations.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/importTableResponse" },
          "default": { "$ref": "#/components/responses/importTableResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/importTableBody" }
      }
    },
    "/v1/tables/{table}/column": {
      "put": {
        "operationId": "renameTableColumn",
        "description": "Renames an existing column within a table to better reflect its content or usage. The operation targets a specific table and requires the current and new column names.",
        "parameters": [
          {
            "name": "table",
            "in": "path",
            "description": "The table's name or unique identifier for targeting specific table operations.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/renameTableColumnResponse" },
          "default": { "$ref": "#/components/responses/renameTableColumnResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/renameTableColumnBody" }
      }
    },
    "/v1/tables/{table}/row": {
      "get": {
        "operationId": "getTableRow",
        "description": "Fetches a specific row from a table using the row's unique identifier.",
        "parameters": [
          {
            "name": "table",
            "in": "path",
            "description": "The table's name or unique identifier for targeting specific table operations.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Identifier of the row within the table.",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/getTableRowResponse" },
          "default": { "$ref": "#/components/responses/getTableRowResponse" }
        }
      }
    },
    "/v1/tables/{table}/rows/find": {
      "post": {
        "operationId": "findTableRows",
        "description": "Enables the search and filtering of rows within a table based on specific criteria. This operation supports complex queries for advanced data manipulation and retrieval.",
        "parameters": [
          {
            "name": "table",
            "in": "path",
            "description": "The table's name or unique identifier for targeting specific table operations.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/findTableRowsResponse" },
          "default": { "$ref": "#/components/responses/findTableRowsResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/findTableRowsBody" }
      }
    },
    "/v1/tables/{table}/rows": {
      "post": {
        "operationId": "createTableRows",
        "description": "Inserts one or multiple new rows into the specified table.",
        "parameters": [
          {
            "name": "table",
            "in": "path",
            "description": "The table's name or unique identifier for targeting specific table operations.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/createTableRowsResponse" },
          "default": { "$ref": "#/components/responses/createTableRowsResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/createTableRowsBody" }
      },
      "put": {
        "operationId": "updateTableRows",
        "description": "Updates specified rows in a table, allowing partial success with detailed feedback on errors.",
        "parameters": [
          {
            "name": "table",
            "in": "path",
            "description": "The table's name or unique identifier for targeting specific table operations.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/updateTableRowsResponse" },
          "default": { "$ref": "#/components/responses/updateTableRowsResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/updateTableRowsBody" }
      }
    },
    "/v1/tables/{table}/rows/delete": {
      "post": {
        "operationId": "deleteTableRows",
        "description": "Allows selective deletion of rows or complete clearance of a table.",
        "parameters": [
          {
            "name": "table",
            "in": "path",
            "description": "The table's name or unique identifier for targeting specific table operations.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/deleteTableRowsResponse" },
          "default": { "$ref": "#/components/responses/deleteTableRowsResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/deleteTableRowsBody" }
      }
    },
    "/v1/tables/{table}/rows/upsert": {
      "post": {
        "operationId": "upsertTableRows",
        "description": "Inserts or updates rows based on a key. If a row exists, it is updated; otherwise, a new row is created.",
        "parameters": [
          {
            "name": "table",
            "in": "path",
            "description": "The table's name or unique identifier for targeting specific table operations.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/upsertTableRowsResponse" },
          "default": { "$ref": "#/components/responses/upsertTableRowsResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/upsertTableRowsBody" }
      }
    }
  },
  "components": {
    "schemas": {
      "Bot": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "minLength": 28, "maxLength": 36, "description": "Id of the [Bot](#schema_bot)" },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date of the [Bot](#schema_bot) in ISO 8601 format"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Updating date of the [Bot](#schema_bot) in ISO 8601 format"
          },
          "signingSecret": {
            "type": "string",
            "maxLength": 2000,
            "description": "Signing secret of the [Bot](#schema_bot)"
          },
          "integrations": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "enabled": { "type": "boolean" },
                "name": {
                  "type": "string",
                  "maxLength": 200,
                  "description": "Name of the [Integration](#schema_integration)"
                },
                "version": {
                  "type": "string",
                  "maxLength": 200,
                  "description": "Version of the [Integration](#schema_integration)"
                },
                "webhookUrl": { "type": "string", "maxLength": 2000 },
                "webhookId": { "type": "string", "maxLength": 200 },
                "identifier": { "type": "string", "maxLength": 2000 },
                "configurationType": { "type": "string", "maxLength": 200, "nullable": true },
                "configuration": { "type": "object", "additionalProperties": true },
                "status": {
                  "type": "string",
                  "enum": [
                    "registration_pending",
                    "registered",
                    "registration_failed",
                    "unregistration_pending",
                    "unregistered",
                    "unregistration_failed"
                  ]
                },
                "statusReason": { "type": "string", "maxLength": 2000, "nullable": true },
                "id": {
                  "type": "string",
                  "minLength": 28,
                  "maxLength": 36,
                  "description": "ID of the [Integration](#schema_integration)"
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Creation date of the [Integration](#schema_integration) in ISO 8601 format"
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Updating date of the [Integration](#schema_integration) in ISO 8601 format"
                },
                "title": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 64,
                  "description": "Title of the integration. This is the name that will be displayed in the UI"
                },
                "description": {
                  "type": "string",
                  "maxLength": 256,
                  "description": "Description of the integration. This is the description that will be displayed in the UI"
                },
                "iconUrl": {
                  "type": "string",
                  "description": "URL of the icon of the integration. This is the icon that will be displayed in the UI"
                },
                "public": {
                  "type": "boolean",
                  "description": "Idicates if the integration is public. Public integrations are available to all and cannot be updated without creating a new version."
                },
                "verificationStatus": {
                  "type": "string",
                  "enum": ["unapproved", "pending", "approved", "rejected"],
                  "description": "Status of the integration version verification"
                }
              },
              "required": [
                "enabled",
                "name",
                "version",
                "webhookUrl",
                "webhookId",
                "configurationType",
                "configuration",
                "status",
                "statusReason",
                "id",
                "createdAt",
                "updatedAt",
                "title",
                "description",
                "iconUrl",
                "public",
                "verificationStatus"
              ],
              "additionalProperties": false
            },
            "description": "A mapping of integrations to their configuration"
          },
          "user": {
            "type": "object",
            "properties": {
              "tags": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                    "description": { "type": "string", "maxLength": 256, "description": "Description of the tag" }
                  },
                  "description": "Definition of a tag that can be provided on the object",
                  "additionalProperties": false
                }
              }
            },
            "required": ["tags"],
            "description": "User object configuration",
            "additionalProperties": false
          },
          "conversation": {
            "type": "object",
            "properties": {
              "tags": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                    "description": { "type": "string", "maxLength": 256, "description": "Description of the tag" }
                  },
                  "description": "Definition of a tag that can be provided on the object",
                  "additionalProperties": false
                }
              }
            },
            "required": ["tags"],
            "description": "Conversation object configuration",
            "additionalProperties": false
          },
          "message": {
            "type": "object",
            "properties": {
              "tags": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                    "description": { "type": "string", "maxLength": 256, "description": "Description of the tag" }
                  },
                  "description": "Definition of a tag that can be provided on the object",
                  "additionalProperties": false
                }
              }
            },
            "required": ["tags"],
            "description": "Message object configuration",
            "additionalProperties": false
          },
          "states": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["conversation", "user", "bot", "task"],
                  "description": "Type of the [State](#schema_state) (`conversation`, `user`, `bot` or `task`)"
                },
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "description": "Schema of the [State](#schema_state) in the `JSON schema` format. This `JSON schema` is going to be used for validating the state data."
                },
                "expiry": {
                  "type": "number",
                  "minimum": 1,
                  "description": "Expiry of the [State](#schema_state) in milliseconds. The state will expire if it is idle for the configured value. By default, a state doesn't expire."
                }
              },
              "required": ["type", "schema"],
              "additionalProperties": false
            },
            "description": "A mapping of states to their definition"
          },
          "configuration": {
            "type": "object",
            "properties": {
              "data": { "type": "object", "additionalProperties": true, "description": "Configuration data" },
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "description": "Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`."
              }
            },
            "required": ["data", "schema"],
            "description": "Configuration of the bot",
            "additionalProperties": false
          },
          "events": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "title": { "type": "string", "maxLength": 64, "description": "Title of the event" },
                "description": { "type": "string", "maxLength": 256, "description": "Description of the event" },
                "schema": { "type": "object", "additionalProperties": true }
              },
              "required": ["schema"],
              "description": "Event Definition",
              "additionalProperties": false
            },
            "description": "Events definition"
          },
          "recurringEvents": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "schedule": {
                  "type": "object",
                  "properties": { "cron": { "type": "string", "maxLength": 200 } },
                  "required": ["cron"],
                  "additionalProperties": false
                },
                "type": { "type": "string", "maxLength": 200 },
                "payload": { "type": "object", "additionalProperties": true },
                "failedAttempts": {
                  "type": "number",
                  "description": "The number of times the recurring event failed to run. This counter resets once the recurring event runs successfully."
                },
                "lastFailureReason": {
                  "type": "string",
                  "maxLength": 2000,
                  "description": "The reason why the recurring event failed to run in the last attempt.",
                  "nullable": true
                }
              },
              "required": ["schedule", "type", "payload", "failedAttempts", "lastFailureReason"],
              "additionalProperties": false
            },
            "description": "Recurring events"
          },
          "subscriptions": {
            "type": "object",
            "properties": {
              "events": {
                "type": "object",
                "additionalProperties": { "type": "object", "additionalProperties": false },
                "nullable": true,
                "description": "Events that the bot is currently subscribed on (ex: \"slack:reactionAdded\"). If null, the bot is subscribed to all events."
              }
            },
            "required": ["events"],
            "description": "Subscriptions of the bot",
            "additionalProperties": false
          },
          "actions": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "title": { "type": "string", "maxLength": 64, "description": "Title of the action" },
                "description": { "type": "string", "maxLength": 256, "description": "Description of the action" },
                "billable": { "type": "boolean" },
                "cacheable": { "type": "boolean" },
                "input": {
                  "type": "object",
                  "properties": { "schema": { "type": "object", "additionalProperties": true } },
                  "required": ["schema"],
                  "additionalProperties": false
                },
                "output": {
                  "type": "object",
                  "properties": { "schema": { "type": "object", "additionalProperties": true } },
                  "required": ["schema"],
                  "additionalProperties": false
                }
              },
              "required": ["input", "output"],
              "description": "Action definition",
              "additionalProperties": false
            },
            "description": "Actions definition"
          },
          "tags": {
            "type": "object",
            "additionalProperties": { "type": "string" },
            "description": "Tags of [Bot](#schema_bot)"
          },
          "name": { "type": "string", "description": "Name of the [Bot](#schema_bot)" },
          "deployedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last deployment date of the [Bot](#schema_bot) in the ISO 8601 format"
          },
          "dev": {
            "type": "boolean",
            "description": "Indicates if the [Bot](#schema_bot) is a development bot; Development bots run locally and can install dev integrations"
          },
          "createdBy": { "type": "string", "description": "Id of the user that created the bot" },
          "alwaysAlive": {
            "type": "boolean",
            "description": "Indicates if the [Bot](#schema_bot) should be in always alive mode"
          },
          "status": { "type": "string", "enum": ["active", "deploying"], "description": "Status of the bot" },
          "medias": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "url": { "type": "string", "description": "URL of the media file" },
                "name": { "type": "string", "description": "Name of the media file" }
              },
              "required": ["url", "name"]
            },
            "description": "Media files associated with the [Bot](#schema_bot)"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "signingSecret",
          "integrations",
          "user",
          "conversation",
          "message",
          "states",
          "configuration",
          "events",
          "recurringEvents",
          "subscriptions",
          "actions",
          "tags",
          "name",
          "dev",
          "alwaysAlive",
          "status",
          "medias"
        ],
        "additionalProperties": false
      },
      "Integration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "ID of the [Integration](#schema_integration)"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date of the [Integration](#schema_integration) in ISO 8601 format"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Updating date of the [Integration](#schema_integration) in ISO 8601 format"
          },
          "identifier": {
            "type": "object",
            "properties": {
              "fallbackHandlerScript": {
                "type": "string",
                "maxLength": 2000,
                "description": "VRL Script of the [Integration](#schema_integration) to handle incoming requests for a request that doesn't have an identifier"
              },
              "extractScript": {
                "type": "string",
                "maxLength": 2000,
                "description": "VRL Script of the [Integration](#schema_integration) to extract the identifier from an incoming webhook often use for OAuth"
              }
            },
            "description": "Global identifier configuration of the [Integration](#schema_integration)",
            "additionalProperties": false
          },
          "sandbox": {
            "type": "object",
            "properties": {
              "identifierExtractScript": {
                "type": "string",
                "maxLength": 2000,
                "description": "VRL Script of the [Integration](#schema_integration) to extract the identifier from an incoming webhook used specifically for the sandbox"
              },
              "messageExtractScript": {
                "type": "string",
                "maxLength": 2000,
                "description": "VRL Script of the [Integration](#schema_integration) to extract the message from an incoming webhook used specifically for the sandbox"
              }
            },
            "additionalProperties": false
          },
          "url": {
            "type": "string",
            "maxLength": 2000,
            "description": "URL of the [Integration](#schema_integration)"
          },
          "name": {
            "type": "string",
            "maxLength": 200,
            "description": "Name of the [Integration](#schema_integration)"
          },
          "version": {
            "type": "string",
            "maxLength": 200,
            "description": "Version of the [Integration](#schema_integration)"
          },
          "interfaces": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "id": { "type": "string", "minLength": 28, "maxLength": 36, "description": "ID of the interface" },
                "name": { "type": "string", "maxLength": 200, "description": "Name of the interface" },
                "version": { "type": "string", "maxLength": 200, "description": "Version of the interface" },
                "entities": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": { "name": { "type": "string", "maxLength": 200 } },
                    "required": ["name"],
                    "additionalProperties": false
                  }
                },
                "actions": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": { "name": { "type": "string", "maxLength": 200 } },
                    "required": ["name"],
                    "additionalProperties": false
                  }
                },
                "events": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": { "name": { "type": "string", "maxLength": 200 } },
                    "required": ["name"],
                    "additionalProperties": false
                  }
                },
                "channels": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": { "name": { "type": "string", "maxLength": 200 } },
                    "required": ["name"],
                    "additionalProperties": false
                  }
                }
              },
              "required": ["id", "name", "version", "entities", "actions", "events", "channels"],
              "additionalProperties": false
            }
          },
          "configuration": {
            "type": "object",
            "properties": {
              "title": { "type": "string", "maxLength": 64, "description": "Title of the configuration" },
              "description": { "type": "string", "maxLength": 256, "description": "Description of the configuration" },
              "identifier": {
                "type": "object",
                "properties": {
                  "linkTemplateScript": { "type": "string", "maxLength": 2000 },
                  "required": { "type": "boolean" }
                },
                "required": ["required"],
                "description": "Identifier configuration of the [Integration](#schema_integration)",
                "additionalProperties": false
              },
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "description": "Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`."
              }
            },
            "required": ["identifier", "schema"],
            "description": "Configuration definition",
            "additionalProperties": false
          },
          "configurations": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "title": { "type": "string", "maxLength": 64, "description": "Title of the configuration" },
                "description": {
                  "type": "string",
                  "maxLength": 256,
                  "description": "Description of the configuration"
                },
                "identifier": {
                  "type": "object",
                  "properties": {
                    "linkTemplateScript": { "type": "string", "maxLength": 2000 },
                    "required": { "type": "boolean" }
                  },
                  "required": ["required"],
                  "description": "Identifier configuration of the [Integration](#schema_integration)",
                  "additionalProperties": false
                },
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "description": "Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`."
                }
              },
              "required": ["identifier", "schema"],
              "description": "Configuration definition",
              "additionalProperties": false
            }
          },
          "channels": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "title": { "type": "string", "maxLength": 64, "description": "Title of the channel" },
                "description": { "type": "string", "maxLength": 256, "description": "Description of the channel" },
                "messages": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": { "schema": { "type": "object", "additionalProperties": true } },
                    "required": ["schema"],
                    "description": "Message definition",
                    "additionalProperties": false
                  }
                },
                "conversation": {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                          "description": { "type": "string", "maxLength": 256, "description": "Description of the tag" }
                        },
                        "description": "Definition of a tag that can be provided on the object",
                        "additionalProperties": false
                      }
                    },
                    "creation": {
                      "type": "object",
                      "properties": {
                        "enabled": { "type": "boolean", "description": "Enable conversation creation" },
                        "requiredTags": {
                          "type": "array",
                          "items": { "type": "string" },
                          "description": "The list of tags that are required to be specified when calling the API directly to create a conversation."
                        }
                      },
                      "required": ["enabled", "requiredTags"],
                      "description": "The conversation creation setting determines how to create a conversation through the API directly. The integration will have to implement the `createConversation` functionality to support this setting.",
                      "additionalProperties": false
                    }
                  },
                  "required": ["tags", "creation"],
                  "description": "Conversation object configuration",
                  "additionalProperties": false
                },
                "message": {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                          "description": { "type": "string", "maxLength": 256, "description": "Description of the tag" }
                        },
                        "description": "Definition of a tag that can be provided on the object",
                        "additionalProperties": false
                      }
                    }
                  },
                  "required": ["tags"],
                  "description": "Message object configuration",
                  "additionalProperties": false
                }
              },
              "required": ["messages", "conversation", "message"],
              "description": "Channel definition",
              "additionalProperties": false
            }
          },
          "states": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["conversation", "user", "integration"],
                  "description": "Type of the [State](#schema_state) (`conversation`, `user` or `integration`)"
                },
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "description": "Schema of the [State](#schema_state) in the `JSON schema` format. This `JSON schema` is going to be used for validating the state data."
                }
              },
              "required": ["type", "schema"],
              "description": "State definition",
              "additionalProperties": false
            }
          },
          "events": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "title": { "type": "string", "maxLength": 64, "description": "Title of the event" },
                "description": { "type": "string", "maxLength": 256, "description": "Description of the event" },
                "schema": { "type": "object", "additionalProperties": true }
              },
              "required": ["schema"],
              "description": "Event Definition",
              "additionalProperties": false
            }
          },
          "actions": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "title": { "type": "string", "maxLength": 64, "description": "Title of the action" },
                "description": { "type": "string", "maxLength": 256, "description": "Description of the action" },
                "billable": { "type": "boolean" },
                "cacheable": { "type": "boolean" },
                "input": {
                  "type": "object",
                  "properties": { "schema": { "type": "object", "additionalProperties": true } },
                  "required": ["schema"],
                  "additionalProperties": false
                },
                "output": {
                  "type": "object",
                  "properties": { "schema": { "type": "object", "additionalProperties": true } },
                  "required": ["schema"],
                  "additionalProperties": false
                }
              },
              "required": ["input", "output"],
              "description": "Action definition",
              "additionalProperties": false
            }
          },
          "user": {
            "type": "object",
            "properties": {
              "tags": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                    "description": { "type": "string", "maxLength": 256, "description": "Description of the tag" }
                  },
                  "description": "Definition of a tag that can be provided on the object",
                  "additionalProperties": false
                }
              },
              "creation": {
                "type": "object",
                "properties": {
                  "enabled": { "type": "boolean", "description": "Enable user creation" },
                  "requiredTags": {
                    "type": "array",
                    "items": { "type": "string" },
                    "description": "The list of tags that are required to be specified when calling the API directly to create a user."
                  }
                },
                "required": ["enabled", "requiredTags"],
                "description": "The user creation setting determines how to create a user through the API directly. The integration will have to implement the `createUser` functionality to support this setting.",
                "additionalProperties": false
              }
            },
            "required": ["tags", "creation"],
            "description": "User object configuration",
            "additionalProperties": false
          },
          "entities": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "title": { "type": "string", "maxLength": 64, "description": "Title of the entity" },
                "description": { "type": "string", "maxLength": 256, "description": "Description of the entity" },
                "schema": { "type": "object", "additionalProperties": true }
              },
              "required": ["schema"],
              "description": "Entity definition",
              "additionalProperties": false
            }
          },
          "dev": {
            "type": "boolean",
            "description": "Indicates if the integration is a development integration; Dev integrations run locally"
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "description": "Title of the integration. This is the name that will be displayed in the UI"
          },
          "description": {
            "type": "string",
            "maxLength": 256,
            "description": "Description of the integration. This is the description that will be displayed in the UI"
          },
          "iconUrl": {
            "type": "string",
            "description": "URL of the icon of the integration. This is the icon that will be displayed in the UI"
          },
          "readmeUrl": {
            "type": "string",
            "description": "URL of the readme of the integration. This is the readme that will be displayed in the UI"
          },
          "public": {
            "type": "boolean",
            "description": "Idicates if the integration is public. Public integrations are available to all and cannot be updated without creating a new version."
          },
          "verificationStatus": {
            "type": "string",
            "enum": ["unapproved", "pending", "approved", "rejected"],
            "description": "Status of the integration version verification"
          },
          "secrets": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Secrets are integration-wide values available in the code via environment variables formatted with a SECRET_ prefix followed by your secret name. A secret name must respect SCREAMING_SNAKE casing."
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "identifier",
          "url",
          "name",
          "version",
          "interfaces",
          "configuration",
          "configurations",
          "channels",
          "states",
          "events",
          "actions",
          "user",
          "entities",
          "dev",
          "title",
          "description",
          "iconUrl",
          "readmeUrl",
          "public",
          "verificationStatus",
          "secrets"
        ],
        "additionalProperties": false
      },
      "Interface": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "ID of the [Interface](#schema_interface)"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date of the [Interface](#schema_interface) in ISO 8601 format"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Updating date of the [Interface](#schema_interface) in ISO 8601 format"
          },
          "name": { "type": "string", "maxLength": 200, "description": "Name of the [Interface](#schema_interface)" },
          "version": {
            "type": "string",
            "maxLength": 200,
            "description": "Version of the [Interface](#schema_interface)"
          },
          "entities": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "title": { "type": "string", "maxLength": 64, "description": "Title of the entity" },
                "description": { "type": "string", "maxLength": 256, "description": "Description of the entity" },
                "schema": { "type": "object", "additionalProperties": true }
              },
              "required": ["schema"],
              "description": "Entity definition",
              "additionalProperties": false
            }
          },
          "events": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "title": { "type": "string", "maxLength": 64, "description": "Title of the event" },
                "description": { "type": "string", "maxLength": 256, "description": "Description of the event" },
                "schema": { "type": "object", "additionalProperties": true }
              },
              "required": ["schema"],
              "description": "Event Definition",
              "additionalProperties": false
            }
          },
          "actions": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "title": { "type": "string", "maxLength": 64, "description": "Title of the action" },
                "description": { "type": "string", "maxLength": 256, "description": "Description of the action" },
                "billable": { "type": "boolean" },
                "cacheable": { "type": "boolean" },
                "input": {
                  "type": "object",
                  "properties": { "schema": { "type": "object", "additionalProperties": true } },
                  "required": ["schema"],
                  "additionalProperties": false
                },
                "output": {
                  "type": "object",
                  "properties": { "schema": { "type": "object", "additionalProperties": true } },
                  "required": ["schema"],
                  "additionalProperties": false
                }
              },
              "required": ["input", "output"],
              "description": "Action definition",
              "additionalProperties": false
            }
          },
          "channels": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "title": { "type": "string", "maxLength": 64, "description": "Title of the channel" },
                "description": { "type": "string", "maxLength": 256, "description": "Description of the channel" },
                "messages": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": { "schema": { "type": "object", "additionalProperties": true } },
                    "required": ["schema"],
                    "description": "Message definition",
                    "additionalProperties": false
                  }
                }
              },
              "required": ["messages"],
              "additionalProperties": false
            }
          },
          "nameTemplate": {
            "type": "object",
            "properties": {
              "script": { "type": "string", "maxLength": 2000 },
              "language": { "type": "string", "maxLength": 200 }
            },
            "required": ["script", "language"],
            "description": "Template string optionaly used at build time by integrations implementing this interface to pick a name for actions and events.",
            "additionalProperties": false
          }
        },
        "required": ["id", "createdAt", "updatedAt", "name", "version", "entities", "events", "actions", "channels"],
        "additionalProperties": false
      },
      "Plugin": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "ID of the [Plugin](#schema_plugin)"
          },
          "name": { "type": "string", "maxLength": 200, "description": "Name of the [Plugin](#schema_plugin)" },
          "version": { "type": "string", "maxLength": 200, "description": "Version of the [Plugin](#schema_plugin)" },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date of the [Plugin](#schema_plugin) in ISO 8601 format"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Updating date of the [Plugin](#schema_plugin) in ISO 8601 format"
          },
          "configuration": {
            "type": "object",
            "properties": {
              "title": { "type": "string", "maxLength": 64, "description": "Title of the configuration" },
              "description": { "type": "string", "maxLength": 256, "description": "Description of the configuration" },
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "description": "Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`."
              }
            },
            "required": ["schema"],
            "description": "Configuration definition",
            "additionalProperties": false
          },
          "states": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["conversation", "user", "bot", "task"],
                  "description": "Type of the [State](#schema_state) (`conversation`, `user`, `bot` or `task`)"
                },
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "description": "Schema of the [State](#schema_state) in the `JSON schema` format. This `JSON schema` is going to be used for validating the state data."
                },
                "expiry": {
                  "type": "number",
                  "minimum": 1,
                  "description": "Expiry of the [State](#schema_state) in milliseconds. The state will expire if it is idle for the configured value. By default, a state doesn't expire."
                }
              },
              "required": ["type", "schema"],
              "additionalProperties": false
            }
          },
          "events": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "title": { "type": "string", "maxLength": 64, "description": "Title of the event" },
                "description": { "type": "string", "maxLength": 256, "description": "Description of the event" },
                "schema": { "type": "object", "additionalProperties": true }
              },
              "required": ["schema"],
              "description": "Event Definition",
              "additionalProperties": false
            }
          },
          "actions": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "title": { "type": "string", "maxLength": 64, "description": "Title of the action" },
                "description": { "type": "string", "maxLength": 256, "description": "Description of the action" },
                "billable": { "type": "boolean" },
                "cacheable": { "type": "boolean" },
                "input": {
                  "type": "object",
                  "properties": { "schema": { "type": "object", "additionalProperties": true } },
                  "required": ["schema"],
                  "additionalProperties": false
                },
                "output": {
                  "type": "object",
                  "properties": { "schema": { "type": "object", "additionalProperties": true } },
                  "required": ["schema"],
                  "additionalProperties": false
                }
              },
              "required": ["input", "output"],
              "description": "Action definition",
              "additionalProperties": false
            }
          },
          "dependencies": {
            "type": "object",
            "properties": {
              "interfaces": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "string", "minLength": 28, "maxLength": 36 },
                    "name": { "type": "string", "maxLength": 200 },
                    "version": { "type": "string", "maxLength": 200 }
                  },
                  "required": ["id", "name", "version"],
                  "additionalProperties": false
                }
              },
              "integrations": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "string", "minLength": 28, "maxLength": 36 },
                    "name": { "type": "string", "maxLength": 200 },
                    "version": { "type": "string", "maxLength": 200 }
                  },
                  "required": ["id", "name", "version"],
                  "additionalProperties": false
                }
              }
            },
            "required": ["interfaces", "integrations"],
            "additionalProperties": false
          },
          "user": {
            "type": "object",
            "properties": {
              "tags": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                    "description": { "type": "string", "maxLength": 256, "description": "Description of the tag" }
                  },
                  "description": "Definition of a tag that can be provided on the object",
                  "additionalProperties": false
                }
              }
            },
            "required": ["tags"],
            "description": "User object configuration",
            "additionalProperties": false
          },
          "conversation": {
            "type": "object",
            "properties": {
              "tags": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                    "description": { "type": "string", "maxLength": 256, "description": "Description of the tag" }
                  },
                  "description": "Definition of a tag that can be provided on the object",
                  "additionalProperties": false
                }
              }
            },
            "required": ["tags"],
            "description": "Conversation object configuration",
            "additionalProperties": false
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "description": "Title of the plugin. This is the name that will be displayed in the UI"
          },
          "description": {
            "type": "string",
            "maxLength": 256,
            "description": "Description of the plugin. This is the description that will be displayed in the UI"
          },
          "iconUrl": {
            "type": "string",
            "description": "URL of the icon of the plugin. This is the icon that will be displayed in the UI"
          },
          "readmeUrl": {
            "type": "string",
            "description": "URL of the readme of the plugin. This is the readme that will be displayed in the UI"
          }
        },
        "required": [
          "id",
          "name",
          "version",
          "createdAt",
          "updatedAt",
          "configuration",
          "states",
          "events",
          "actions",
          "dependencies",
          "user",
          "conversation",
          "title",
          "description",
          "iconUrl",
          "readmeUrl"
        ],
        "additionalProperties": false
      },
      "Workspace": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "ownerId": { "type": "string" },
          "createdAt": { "type": "string" },
          "updatedAt": { "type": "string" },
          "botCount": { "type": "number" },
          "billingVersion": { "type": "string", "enum": ["v1", "v2", "v3"] },
          "plan": { "type": "string", "enum": ["community", "team", "enterprise", "plus"] },
          "blocked": { "type": "boolean" },
          "spendingLimit": { "type": "number" },
          "about": { "default": "", "type": "string" },
          "profilePicture": { "default": "", "type": "string" },
          "contactEmail": { "default": "", "type": "string" },
          "website": { "default": "", "type": "string" },
          "socialAccounts": { "default": [], "type": "array", "items": { "type": "string" } },
          "isPublic": { "type": "boolean" },
          "handle": { "default": "", "type": "string" }
        },
        "required": [
          "id",
          "name",
          "ownerId",
          "createdAt",
          "updatedAt",
          "botCount",
          "billingVersion",
          "plan",
          "blocked",
          "spendingLimit"
        ],
        "title": "updateWorkspaceResponse",
        "additionalProperties": false
      },
      "WorkspaceMember": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "userId": { "type": "string", "format": "uuid" },
          "email": { "type": "string" },
          "createdAt": { "type": "string" },
          "role": { "type": "string", "enum": ["viewer", "billing", "developer", "manager", "administrator", "owner"] },
          "profilePicture": { "type": "string" },
          "displayName": { "type": "string", "maxLength": 100 }
        },
        "required": ["id", "email", "createdAt", "role"],
        "title": "updateWorkspaceMemberResponse",
        "additionalProperties": false
      },
      "Account": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "email": { "type": "string" },
          "displayName": { "type": "string", "maxLength": 100 },
          "emailVerified": { "type": "boolean" },
          "profilePicture": { "type": "string" },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date of the [Account](#schema_account) in ISO 8601 format"
          }
        },
        "required": ["id", "email", "emailVerified", "createdAt"],
        "additionalProperties": false
      },
      "Usage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the usage that it is linked to. It can either be a workspace id or a bot id"
          },
          "period": { "type": "string", "description": "Period of the quota that it is applied to" },
          "value": { "type": "number", "description": "Value of the current usage" },
          "quota": { "type": "number", "description": "Quota of the current usage" },
          "type": {
            "type": "string",
            "enum": [
              "invocation_timeout",
              "invocation_calls",
              "storage_count",
              "bot_count",
              "knowledgebase_vector_storage",
              "workspace_ratelimit",
              "table_row_count",
              "workspace_member_count",
              "integrations_owned_count",
              "ai_spend",
              "openai_spend",
              "bing_search_spend",
              "always_alive"
            ],
            "description": "Usage type that can be used"
          }
        },
        "required": ["id", "period", "value", "quota", "type"],
        "additionalProperties": false
      },
      "Issue": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "code": { "type": "string" },
          "createdAt": { "type": "string", "format": "date-time" },
          "lastSeenAt": { "type": "string", "format": "date-time" },
          "title": { "type": "string" },
          "description": { "type": "string" },
          "groupedData": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": { "raw": { "type": "string" }, "pretty": { "type": "string" } },
              "required": ["raw"],
              "additionalProperties": false
            }
          },
          "eventsCount": { "type": "number" },
          "category": { "type": "string", "enum": ["user_code", "limits", "configuration", "other"] },
          "resolutionLink": { "type": "string", "nullable": true }
        },
        "required": [
          "id",
          "code",
          "createdAt",
          "lastSeenAt",
          "title",
          "description",
          "groupedData",
          "eventsCount",
          "category",
          "resolutionLink"
        ],
        "additionalProperties": false
      },
      "IssueEvent": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "createdAt": { "type": "string", "format": "date-time" },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": { "raw": { "type": "string" }, "pretty": { "type": "string" } },
              "required": ["raw"],
              "additionalProperties": false
            }
          }
        },
        "required": ["id", "createdAt", "data"],
        "additionalProperties": false
      },
      "Activity": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "description": { "type": "string" },
          "taskId": { "type": "string" },
          "category": {
            "type": "string",
            "enum": [
              "unknown",
              "capture",
              "bot_message",
              "user_message",
              "agent_message",
              "event",
              "action",
              "task_status",
              "subtask_status",
              "exception"
            ]
          },
          "data": { "type": "object", "additionalProperties": true },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date of the activity in ISO 8601 format"
          }
        },
        "required": ["id", "description", "taskId", "category", "data", "createdAt"],
        "additionalProperties": false
      },
      "Version": {
        "type": "object",
        "properties": { "id": { "type": "string" }, "name": { "type": "string" }, "description": { "type": "string" } },
        "required": ["id", "name"],
        "additionalProperties": false
      },
      "User": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "minLength": 28, "maxLength": 36, "description": "Id of the [User](#schema_user)" },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date of the [User](#schema_user) in ISO 8601 format"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Updating date of the [User](#schema_user) in ISO 8601 format"
          },
          "tags": {
            "type": "object",
            "additionalProperties": { "type": "string" },
            "description": "Set of [Tags](/docs/developers/concepts/tags) that you can attach to a [User](#schema_user). The set of [Tags](/docs/developers/concepts/tags) available on a [User](#schema_user) is restricted by the list of [Tags](/docs/developers/concepts/tags) defined previously by the [Bot](#schema_bot). Individual keys can be unset by posting an empty value to them."
          },
          "name": { "type": "string", "maxLength": 200, "description": "Name of the [User](#schema_user)" },
          "pictureUrl": {
            "type": "string",
            "maxLength": 40000,
            "description": "Picture URL of the [User](#schema_user)"
          }
        },
        "required": ["id", "createdAt", "updatedAt", "tags"],
        "description": "The user object represents someone interacting with the bot within a specific integration. The same person interacting with a bot in slack and messenger will be represented with two different users.",
        "additionalProperties": false
      },
      "Conversation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "Id of the [Conversation](#schema_conversation)"
          },
          "currentTaskId": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "Id of the current [Task](#schema_task)"
          },
          "currentWorkflowId": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "Id of the current [Workflow](#schema_workflow)"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date of the [Conversation](#schema_conversation) in ISO 8601 format"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Updating date of the [Conversation](#schema_conversation) in ISO 8601 format"
          },
          "channel": {
            "type": "string",
            "description": "Name of the channel where the [Conversation](#schema_conversation) is happening"
          },
          "integration": {
            "type": "string",
            "description": "Name of the integration that created the [Conversation](#schema_conversation)"
          },
          "tags": {
            "type": "object",
            "additionalProperties": { "type": "string" },
            "description": "Set of [Tags](/docs/developers/concepts/tags) that you can attach to a [Conversation](#schema_conversation). The set of [Tags](/docs/developers/concepts/tags) available on a [Conversation](#schema_conversation) is restricted by the list of [Tags](/docs/developers/concepts/tags) defined previously by the [Bot](#schema_bot). Individual keys can be unset by posting an empty value to them."
          }
        },
        "required": ["id", "createdAt", "updatedAt", "channel", "integration", "tags"],
        "description": "The [Conversation](#schema_conversation) object represents an exchange of messages between one or more users. A [Conversation](#schema_conversation) is always linked to an integration's channels. For example, a Slack channel represents a conversation.",
        "additionalProperties": false
      },
      "Event": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "Id of the [Event](#schema_event)"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date of the [Event](#schema_event) in ISO 8601 format"
          },
          "type": { "type": "string", "maxLength": 200, "description": "Type of the [Event](#schema_event)." },
          "payload": {
            "type": "object",
            "additionalProperties": true,
            "description": "Payload is the content of the event defined by the integration installed on your bot or one of the default events created by our api."
          },
          "conversationId": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "ID of the [Conversation](#schema_conversation) to link the event to."
          },
          "userId": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "ID of the [User](#schema_user) to link the event to."
          },
          "messageId": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "ID of the [Message](#schema_message) to link the event to."
          },
          "status": { "type": "string", "enum": ["pending", "processed", "ignored", "failed", "scheduled"] },
          "failureReason": {
            "type": "string",
            "maxLength": 2000,
            "nullable": true,
            "description": "Reason why the event failed to be processed"
          }
        },
        "required": ["id", "createdAt", "type", "payload", "status", "failureReason"],
        "description": "The event object represents an action or an occurrence.",
        "additionalProperties": false
      },
      "Message": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "Id of the [Message](#schema_message)"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date of the [Message](#schema_message) in ISO 8601 format"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Update date of the [Message](#schema_message) in ISO 8601 format"
          },
          "type": {
            "type": "string",
            "maxLength": 200,
            "description": "Type of the [Message](#schema_message) represents the resource type that the message is related to"
          },
          "payload": {
            "type": "object",
            "additionalProperties": true,
            "description": "Payload is the content type of the message. Accepted payload options: Text, Image, Choice, Dropdown, Card, Carousel, File, Audio, Video, Location"
          },
          "direction": {
            "type": "string",
            "enum": ["incoming", "outgoing"],
            "description": "Direction of the message (`incoming` or `outgoing`)."
          },
          "userId": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "ID of the [User](#schema_user)"
          },
          "conversationId": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "ID of the [Conversation](#schema_conversation)"
          },
          "tags": {
            "type": "object",
            "additionalProperties": { "type": "string" },
            "description": "Set of [Tags](/docs/developers/concepts/tags) that you can attach to a [Conversation](#schema_conversation). The set of [Tags](/docs/developers/concepts/tags) available on a [Conversation](#schema_conversation) is restricted by the list of [Tags](/docs/developers/concepts/tags) defined previously by the [Bot](#schema_bot). Individual keys can be unset by posting an empty value to them."
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "type",
          "payload",
          "direction",
          "userId",
          "conversationId",
          "tags"
        ],
        "description": "The Message object represents a message in a [Conversation](#schema_conversation) for a specific [User](#schema_user).",
        "additionalProperties": false
      },
      "State": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "Id of the [State](#schema_state)"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date of the [State](#schema_state) in ISO 8601 format"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Updating date of the [State](#schema_state) in ISO 8601 format"
          },
          "botId": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "Id of the [Bot](#schema_bot)"
          },
          "conversationId": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "Id of the [Conversation](#schema_conversation)"
          },
          "userId": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "Id of the [User](#schema_user)"
          },
          "name": {
            "type": "string",
            "maxLength": 200,
            "description": "Name of the [State](#schema_state) which is declared inside the bot definition"
          },
          "type": {
            "type": "string",
            "enum": ["conversation", "user", "bot", "task", "integration", "workflow"],
            "description": "Type of the [State](#schema_state) represents the resource type (`conversation`, `user`, `bot`, `task`, `integration` or `workflow`) that the state is related to"
          },
          "payload": {
            "type": "object",
            "additionalProperties": true,
            "description": "Payload is the content of the state defined by your bot."
          }
        },
        "required": ["id", "createdAt", "updatedAt", "botId", "name", "type", "payload"],
        "description": "The state object represents the current payload. A state is always linked to either a bot, a conversation or a user.",
        "additionalProperties": false
      },
      "Task": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "minLength": 28, "maxLength": 36, "description": "Id of the [Task](#schema_task)" },
          "title": { "type": "string", "maxLength": 64, "description": "Title describing the task" },
          "description": {
            "type": "string",
            "maxLength": 256,
            "description": "All the notes related to the execution of the current task"
          },
          "type": { "type": "string", "description": "Type of the task" },
          "data": { "type": "object", "additionalProperties": true, "description": "Content related to the task" },
          "status": {
            "type": "string",
            "enum": ["pending", "in_progress", "failed", "completed", "blocked", "paused", "timeout", "cancelled"],
            "description": "Status of the task"
          },
          "parentTaskId": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "Parent task id is the parent task that created this task"
          },
          "conversationId": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "Conversation id related to this task"
          },
          "userId": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "Specific user related to this task"
          },
          "timeoutAt": {
            "type": "string",
            "format": "date-time",
            "description": "The timeout date where the task should be failed in the ISO 8601 format"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date of the task in ISO 8601 format"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Updating date of the task in ISO 8601 format"
          },
          "failureReason": {
            "type": "string",
            "maxLength": 2000,
            "description": "If the task fails this is the reason behind it"
          },
          "tags": {
            "type": "object",
            "additionalProperties": { "type": "string" },
            "description": "Set of [Tags](/docs/developers/concepts/tags) that you can attach to a [Task](#schema_task). Individual keys can be unset by posting an empty value to them."
          }
        },
        "required": [
          "id",
          "title",
          "description",
          "type",
          "data",
          "status",
          "timeoutAt",
          "createdAt",
          "updatedAt",
          "tags"
        ],
        "description": "Task definition",
        "additionalProperties": false
      },
      "Workflow": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "Id of the [Workflow](#schema_workflow)"
          },
          "name": { "type": "string", "maxLength": 200, "description": "Name of the workflow" },
          "status": {
            "type": "string",
            "enum": ["pending", "in_progress", "failed", "completed", "listening", "paused", "timedout", "cancelled"],
            "description": "Status of the [Workflow](#schema_workflow)"
          },
          "input": {
            "type": "object",
            "additionalProperties": true,
            "description": "Input provided to the [Workflow](#schema_workflow)"
          },
          "output": {
            "type": "object",
            "additionalProperties": true,
            "description": "Data returned by the [Workflow](#schema_workflow) output"
          },
          "parentWorkflowId": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "Parent [Workflow](#schema_workflow) id is the parent [Workflow](#schema_workflow) that created this [Workflow](#schema_workflow)"
          },
          "conversationId": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "Conversation id related to this [Workflow](#schema_workflow)"
          },
          "userId": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "User id related to this [Workflow](#schema_workflow)"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date of the [Workflow](#schema_workflow) in ISO 8601 format"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Updating date of the [Workflow](#schema_workflow) in ISO 8601 format"
          },
          "completedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date when the [Workflow](#schema_workflow) completed in ISO 8601 format"
          },
          "failureReason": {
            "type": "string",
            "maxLength": 2000,
            "description": "If the [Workflow](#schema_workflow) fails this is the reason behind it"
          },
          "timeoutAt": {
            "type": "string",
            "format": "date-time",
            "description": "The timeout date when the [Workflow](#schema_workflow) will fail in the ISO 8601 format"
          },
          "tags": {
            "type": "object",
            "additionalProperties": { "type": "string" },
            "description": "Set of [Tags](/docs/developers/concepts/tags) that you can attach to a [Workflow](#schema_workflow). Individual keys can be unset by posting an empty value to them."
          }
        },
        "required": ["id", "name", "status", "input", "output", "createdAt", "updatedAt", "timeoutAt", "tags"],
        "description": "Workflow definition",
        "additionalProperties": false
      },
      "Table": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Unique identifier for the table" },
          "name": {
            "description": "Required. This name is used to identify your table.",
            "type": "string",
            "minLength": 1
          },
          "factor": {
            "default": 1,
            "type": "number",
            "minimum": 1,
            "maximum": 30,
            "description": "The 'factor' multiplies the row's data storage limit by 4KB and its quota count, but can only be set at table creation and not modified later. For instance, a factor of 2 increases storage to 8KB but counts as 2 rows in your quota. The default factor is 1."
          },
          "frozen": {
            "type": "boolean",
            "description": "A table designated as \"frozen\" is immutable in terms of its name and schema structure; modifications to its schema or a renaming operation are not permitted. The only action that can be taken on such a table is deletion. The schema established at the time of creation is locked in as the final structure. To implement any changes, the table must be duplicated with the desired alterations."
          },
          "schema": {
            "type": "object",
            "properties": {
              "$schema": { "type": "string" },
              "properties": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "type": { "type": "string", "enum": ["string", "number", "boolean", "object", "array", "null"] },
                    "format": { "type": "string", "enum": ["date-time"] },
                    "description": { "type": "string" },
                    "pattern": { "type": "string", "description": "String properties must match this pattern" },
                    "enum": {
                      "type": "array",
                      "items": { "type": "string" },
                      "description": "String properties must be one of these values"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": { "type": "string", "enum": ["string", "number", "boolean", "object", "array", "null"] }
                      },
                      "required": ["type"],
                      "additionalProperties": true,
                      "description": "Defines the shape of items in an array"
                    },
                    "nullable": { "default": true, "type": "boolean" },
                    "properties": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": ["string", "number", "boolean", "object", "array", "null"]
                          }
                        },
                        "required": ["type"],
                        "additionalProperties": true
                      }
                    },
                    "x-zui": {
                      "type": "object",
                      "properties": {
                        "index": { "type": "integer" },
                        "id": { "type": "string", "description": "[deprecated] ID of the column." },
                        "searchable": {
                          "type": "boolean",
                          "description": "Indicates if the column is vectorized and searchable."
                        },
                        "hidden": { "type": "boolean", "description": "Indicates if the field is hidden in the UI" },
                        "order": { "type": "number", "description": "Order of the column in the UI" },
                        "width": { "type": "number", "description": "Width of the column in the UI" },
                        "schemaId": { "type": "string", "description": "ID of the schema" },
                        "computed": {
                          "type": "object",
                          "properties": {
                            "action": { "type": "string", "enum": ["ai", "code", "workflow"] },
                            "dependencies": { "default": [], "type": "array", "items": { "type": "string" } },
                            "prompt": { "type": "string", "description": "Prompt when action is \"ai\"" },
                            "code": { "type": "string", "description": "Code to execute when action is \"code\"" },
                            "model": {
                              "default": "gpt-4o",
                              "type": "string",
                              "maxLength": 80,
                              "description": "Model to use when action is \"ai\""
                            },
                            "workflowId": {
                              "type": "string",
                              "maxLength": 20,
                              "description": "ID of Workflow to execute when action is \"workflow\""
                            },
                            "enabled": { "type": "boolean" }
                          },
                          "required": ["action"],
                          "additionalProperties": false
                        },
                        "typings": {
                          "type": "string",
                          "description": "TypeScript typings for the column. Recommended if the type is \"object\", ex: \"\\{ foo: string; bar: number \\}\""
                        }
                      },
                      "required": ["index"],
                      "additionalProperties": false
                    }
                  },
                  "required": ["type", "x-zui"],
                  "additionalProperties": false
                },
                "description": "List of keys/columns in the table."
              },
              "additionalProperties": {
                "type": "boolean",
                "enum": [true],
                "description": "Additional properties can be provided, but they will be ignored if no column matches."
              },
              "required": {
                "type": "array",
                "items": { "type": "string" },
                "description": "Array of required properties."
              },
              "type": { "type": "string", "enum": ["object"] }
            },
            "required": ["properties", "additionalProperties", "type"],
            "additionalProperties": false
          },
          "tags": {
            "type": "object",
            "additionalProperties": { "type": "string" },
            "description": "Optional tags to help organize your tables. These should be passed here as an object representing key/value pairs."
          },
          "isComputeEnabled": {
            "type": "boolean",
            "description": "Indicates if the table is enabled for computation."
          },
          "createdAt": { "type": "string", "format": "date-time", "description": "Timestamp of table creation." },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Timestamp of the last table update." }
        },
        "required": ["id", "name", "schema"],
        "additionalProperties": false
      },
      "Column": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Unique identifier for the column." },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 30,
            "description": "Name of the column, must be within length limits."
          },
          "description": { "type": "string", "description": "Optional descriptive text about the column." },
          "searchable": { "type": "boolean", "description": "Indicates if the column is vectorized and searchable." },
          "type": {
            "type": "string",
            "enum": ["string", "number", "boolean", "date", "object"],
            "description": "Specifies the data type of the column. Use \"object\" for complex data structures."
          },
          "typings": {
            "type": "string",
            "description": "TypeScript typings for the column. Recommended if the type is \"object\", ex: \"\\{ foo: string; bar: number \\}\""
          },
          "computed": {
            "type": "object",
            "properties": {
              "action": { "type": "string", "enum": ["ai", "code", "workflow"] },
              "dependencies": { "default": [], "type": "array", "items": { "type": "string" } },
              "prompt": { "type": "string", "description": "Prompt when action is \"ai\"" },
              "code": { "type": "string", "description": "Code to execute when action is \"code\"" },
              "model": {
                "default": "gpt-4o",
                "type": "string",
                "maxLength": 80,
                "description": "Model to use when action is \"ai\""
              },
              "workflowId": {
                "type": "string",
                "maxLength": 20,
                "description": "ID of Workflow to execute when action is \"workflow\""
              },
              "enabled": { "type": "boolean" }
            },
            "required": ["action"],
            "additionalProperties": false
          },
          "schema": { "type": "object", "additionalProperties": true }
        },
        "required": ["name", "type"],
        "additionalProperties": false
      },
      "Row": {
        "type": "object",
        "properties": {
          "id": { "type": "number", "description": "Unique identifier for the row." },
          "createdAt": { "type": "string", "format": "date-time", "description": "Timestamp of row creation." },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Timestamp of the last row update." },
          "computed": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "status": { "type": "string" },
                "error": { "type": "string" },
                "updatedBy": { "type": "string" },
                "updatedAt": { "type": "string" }
              },
              "required": ["status"],
              "additionalProperties": false
            }
          },
          "stale": {
            "type": "array",
            "items": { "type": "string" },
            "description": "[Read-only] List of stale values that are waiting to be recomputed."
          },
          "similarity": {
            "type": "number",
            "description": "Optional numeric value indicating similarity, when using findTableRows."
          }
        },
        "required": ["id", "computed"],
        "additionalProperties": true
      },
      "File": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "File ID" },
          "botId": { "type": "string", "description": "The ID of the bot the file belongs to" },
          "key": {
            "type": "string",
            "description": "Unique key for the file. Must be unique across the bot (and the integration, when applicable)."
          },
          "url": {
            "type": "string",
            "description": "URL to retrieve the file content. This URL will be ready to use once the file is uploaded.\n\nIf the file has a `public_content` policy, this will contain the permanent public URL to retrieve the file, otherwise this will contain a temporary pre-signed URL to download the file which should be used shortly after retrieving and should not be stored long-term as the URL will expire after a short timeframe."
          },
          "size": {
            "type": "number",
            "description": "File size in bytes. Non-null if file upload status is \"COMPLETE\".",
            "nullable": true
          },
          "contentType": { "type": "string", "description": "MIME type of the file's content" },
          "tags": {
            "type": "object",
            "additionalProperties": { "type": "string", "maxLength": 1000 },
            "description": "The tags of the file as an object of key/value pairs"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": { "nullable": true },
            "description": "Metadata of the file as an object of key/value pairs. The values can be of any type."
          },
          "createdAt": { "type": "string", "description": "File creation timestamp in ISO 8601 format" },
          "updatedAt": { "type": "string", "description": "File last update timestamp in ISO 8601 format" },
          "accessPolicies": {
            "type": "array",
            "items": { "type": "string", "enum": ["integrations", "public_content"] },
            "description": "Access policies configured for the file."
          },
          "index": {
            "type": "boolean",
            "description": "Whether the file was requested to be indexed for search or not."
          },
          "status": {
            "type": "string",
            "enum": [
              "upload_pending",
              "upload_failed",
              "upload_completed",
              "indexing_pending",
              "indexing_failed",
              "indexing_completed"
            ],
            "description": "Status of the file. If the status is `upload_pending`, the file content has not been uploaded yet. The status will be set to `upload_completed` once the file content has been uploaded successfully.\n\nIf the upload failed for any reason (e.g. exceeding the storage quota or the maximum file size limit) the status will be set to `upload_failed` and the reason for the failure will be available in the `failedStatusReason` field of the file.\n\nHowever, if the file has been uploaded and the `index` attribute was set to `true` on the file, the status will immediately transition to the `indexing_pending` status (the `upload_completed` status step will be skipped).\n\nOnce the indexing is completed and the file is ready to be used for searching its status will be set to `indexing_completed`. If the indexing failed the status will be set to `indexing_failed` and the reason for the failure will be available in the `failedStatusReason` field."
          },
          "failedStatusReason": {
            "type": "string",
            "description": "If the file status is `upload_failed` or `indexing_failed` this will contain the reason of the failure."
          },
          "expiresAt": { "type": "string", "description": "File expiry timestamp in ISO 8601 format" }
        },
        "required": [
          "id",
          "botId",
          "key",
          "url",
          "size",
          "contentType",
          "tags",
          "metadata",
          "createdAt",
          "updatedAt",
          "accessPolicies",
          "index",
          "status"
        ],
        "additionalProperties": false
      }
    },
    "responses": {
      "listTablesResponse": {
        "description": "Returns a list of tables.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "tables": { "type": "array", "items": { "$ref": "#/components/schemas/Table" } } },
              "required": ["tables"],
              "title": "listTablesResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "getTableResponse": {
        "description": "Details of the requested table, including row count and indexing status.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "table": { "$ref": "#/components/schemas/Table" },
                "rows": { "type": "number", "description": "The total number of rows present in the table." },
                "stale": {
                  "type": "number",
                  "description": "The number of stale rows that are waiting to be processed"
                },
                "indexing": {
                  "type": "number",
                  "description": "The number of rows that are waiting to be indexed (for search)"
                }
              },
              "required": ["table", "rows", "stale", "indexing"],
              "title": "getTableResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "getOrCreateTableResponse": {
        "description": "The retrieved or created table object.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "table": { "$ref": "#/components/schemas/Table" },
                "created": { "type": "boolean", "description": "Flag indicating if the table was newly created." },
                "rows": { "type": "number", "description": "The total number of rows present in the table." },
                "stale": {
                  "type": "number",
                  "description": "The number of stale rows that are waiting to be processed"
                },
                "indexing": {
                  "type": "number",
                  "description": "The number of rows that are waiting to be indexed (for search)"
                }
              },
              "required": ["table", "created", "rows", "stale", "indexing"],
              "title": "getOrCreateTableResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "createTableResponse": {
        "description": "The created table object.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "table": { "$ref": "#/components/schemas/Table" } },
              "required": ["table"],
              "title": "createTableResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "duplicateTableResponse": {
        "description": "The created table object.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "table": { "$ref": "#/components/schemas/Table" },
                "rows": { "type": "number", "description": "The total number of rows present in the table." }
              },
              "required": ["table", "rows"],
              "title": "duplicateTableResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "exportTableResponse": {
        "description": "The export job",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "job": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "string" },
                    "botId": { "type": "string" },
                    "tableId": { "type": "string" },
                    "type": { "type": "string", "enum": ["export", "import"] },
                    "status": {
                      "type": "string",
                      "enum": ["pending", "in_progress", "finalizing", "completed", "failed"]
                    },
                    "progress": { "default": 0, "type": "number" },
                    "inputFileId": { "type": "string", "nullable": true },
                    "outputFileId": { "type": "string", "nullable": true },
                    "createdAt": { "type": "string", "format": "date-time" },
                    "updatedAt": { "type": "string", "format": "date-time" }
                  },
                  "required": [
                    "id",
                    "botId",
                    "tableId",
                    "type",
                    "status",
                    "inputFileId",
                    "outputFileId",
                    "createdAt",
                    "updatedAt"
                  ],
                  "additionalProperties": false
                }
              },
              "required": ["job"],
              "title": "exportTableResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "getTableJobsResponse": {
        "description": "The most recent jobs",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "jobs": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string" },
                      "botId": { "type": "string" },
                      "tableId": { "type": "string" },
                      "type": { "type": "string", "enum": ["export", "import"] },
                      "status": {
                        "type": "string",
                        "enum": ["pending", "in_progress", "finalizing", "completed", "failed"]
                      },
                      "progress": { "default": 0, "type": "number" },
                      "inputFileId": { "type": "string", "nullable": true },
                      "outputFileId": { "type": "string", "nullable": true },
                      "createdAt": { "type": "string", "format": "date-time" },
                      "updatedAt": { "type": "string", "format": "date-time" }
                    },
                    "required": [
                      "id",
                      "botId",
                      "tableId",
                      "type",
                      "status",
                      "inputFileId",
                      "outputFileId",
                      "createdAt",
                      "updatedAt"
                    ]
                  }
                }
              },
              "required": ["jobs"],
              "title": "getTableJobsResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "importTableResponse": {
        "description": "The import job",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "job": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "string" },
                    "botId": { "type": "string" },
                    "tableId": { "type": "string" },
                    "type": { "type": "string", "enum": ["export", "import"] },
                    "status": {
                      "type": "string",
                      "enum": ["pending", "in_progress", "finalizing", "completed", "failed"]
                    },
                    "progress": { "default": 0, "type": "number" },
                    "inputFileId": { "type": "string", "nullable": true },
                    "outputFileId": { "type": "string", "nullable": true },
                    "createdAt": { "type": "string", "format": "date-time" },
                    "updatedAt": { "type": "string", "format": "date-time" }
                  },
                  "required": [
                    "id",
                    "botId",
                    "tableId",
                    "type",
                    "status",
                    "inputFileId",
                    "outputFileId",
                    "createdAt",
                    "updatedAt"
                  ],
                  "additionalProperties": false
                }
              },
              "required": ["job"],
              "title": "importTableResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "updateTableResponse": {
        "description": "The updated table",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "table": { "$ref": "#/components/schemas/Table" },
                "staleColumns": {
                  "type": "array",
                  "items": { "type": "string" },
                  "description": "List of columns that have become stale following the modification."
                }
              },
              "required": ["table"],
              "title": "updateTableResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "renameTableColumnResponse": {
        "description": "Confirmation of the column rename operation, including the updated table schema.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "table": { "$ref": "#/components/schemas/Table" } },
              "required": ["table"],
              "title": "renameTableColumnResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "deleteTableResponse": {
        "description": "Confirmation that the table has been deleted.",
        "content": {
          "application/json": {
            "schema": { "type": "object", "title": "deleteTableResponse", "additionalProperties": false }
          }
        }
      },
      "getTableRowResponse": {
        "description": "The requested row object.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "row": { "$ref": "#/components/schemas/Row" } },
              "required": ["row"],
              "title": "getTableRowResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "findTableRowsResponse": {
        "description": "A collection of rows that match the search criteria, along with metadata such as total count and pagination details.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "rows": { "type": "array", "items": { "$ref": "#/components/schemas/Row" } },
                "hasMore": { "type": "boolean", "description": "Flag indicating if there are more rows to fetch." },
                "offset": { "type": "integer" },
                "limit": { "type": "integer" },
                "warnings": {
                  "type": "array",
                  "items": { "type": "string" },
                  "description": "Alerts for minor issues that don't block the operation but suggest possible improvements."
                }
              },
              "required": ["rows", "hasMore", "offset", "limit"],
              "title": "findTableRowsResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "createTableRowsResponse": {
        "description": "A summary of the insertion operation, including any warnings or errors encountered, and the inserted row data.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "rows": { "type": "array", "items": { "$ref": "#/components/schemas/Row" } },
                "warnings": {
                  "type": "array",
                  "items": { "type": "string" },
                  "description": "Alerts for minor issues that don't block the operation but suggest possible improvements."
                },
                "errors": {
                  "type": "array",
                  "items": { "type": "string" },
                  "description": "Critical issues in specific elements that prevent their successful processing, allowing partial operation success."
                }
              },
              "required": ["rows"],
              "title": "createTableRowsResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "deleteTableRowsResponse": {
        "description": "Confirms the number of rows successfully deleted.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "deletedRows": { "type": "number" } },
              "required": ["deletedRows"],
              "title": "deleteTableRowsResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "updateTableRowsResponse": {
        "description": "Returns updated rows, including warnings for minor issues and errors for failed updates.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "rows": { "type": "array", "items": { "$ref": "#/components/schemas/Row" } },
                "warnings": {
                  "type": "array",
                  "items": { "type": "string" },
                  "description": "Alerts for minor issues that don't block the operation but suggest possible improvements."
                },
                "errors": {
                  "type": "array",
                  "items": { "type": "string" },
                  "description": "Critical issues in specific elements that prevent their successful processing, allowing partial operation success."
                }
              },
              "required": ["rows"],
              "title": "updateTableRowsResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "upsertTableRowsResponse": {
        "description": "Summary of insertions and updates, including any warnings or errors.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "inserted": { "type": "array", "items": { "$ref": "#/components/schemas/Row" } },
                "updated": { "type": "array", "items": { "$ref": "#/components/schemas/Row" } },
                "warnings": {
                  "type": "array",
                  "items": { "type": "string" },
                  "description": "Alerts for minor issues that don't block the operation but suggest possible improvements."
                },
                "errors": {
                  "type": "array",
                  "items": { "type": "string" },
                  "description": "Critical issues in specific elements that prevent their successful processing, allowing partial operation success."
                }
              },
              "required": ["inserted", "updated"],
              "title": "upsertTableRowsResponse",
              "additionalProperties": false
            }
          }
        }
      }
    },
    "requestBodies": {
      "getOrCreateTableBody": {
        "description": "Schema defining the structure of the table",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "factor": {
                  "default": 1,
                  "type": "number",
                  "minimum": 1,
                  "maximum": 30,
                  "description": "The 'factor' multiplies the row's data storage limit by 4KB and its quota count, but can only be set at table creation and not modified later. For instance, a factor of 2 increases storage to 8KB but counts as 2 rows in your quota. The default factor is 1."
                },
                "frozen": {
                  "type": "boolean",
                  "description": "A table designated as \"frozen\" is immutable in terms of its name and schema structure; modifications to its schema or a renaming operation are not permitted. The only action that can be taken on such a table is deletion. The schema established at the time of creation is locked in as the final structure. To implement any changes, the table must be duplicated with the desired alterations."
                },
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "description": "Provide an object or a JSON schema to define the columns of the table. A maximum of 20 keys in the object/schema is allowed."
                },
                "tags": {
                  "type": "object",
                  "additionalProperties": { "type": "string" },
                  "description": "Optional tags to help organize your tables. These should be passed here as an object representing key/value pairs."
                },
                "isComputeEnabled": {
                  "type": "boolean",
                  "description": "Indicates if the table is enabled for computation."
                }
              },
              "required": ["schema"],
              "title": "getOrCreateTableBody",
              "additionalProperties": false
            }
          }
        }
      },
      "createTableBody": {
        "description": "Schema defining the structure of the new table",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "description": "Required. This name is used to identify your table.",
                  "type": "string",
                  "minLength": 1
                },
                "factor": {
                  "default": 1,
                  "type": "number",
                  "minimum": 1,
                  "maximum": 30,
                  "description": "The 'factor' multiplies the row's data storage limit by 4KB and its quota count, but can only be set at table creation and not modified later. For instance, a factor of 2 increases storage to 8KB but counts as 2 rows in your quota. The default factor is 1."
                },
                "frozen": {
                  "type": "boolean",
                  "description": "A table designated as \"frozen\" is immutable in terms of its name and schema structure; modifications to its schema or a renaming operation are not permitted. The only action that can be taken on such a table is deletion. The schema established at the time of creation is locked in as the final structure. To implement any changes, the table must be duplicated with the desired alterations."
                },
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "description": "Provide an object or a JSON schema to define the columns of the table. A maximum of 20 keys in the object/schema is allowed."
                },
                "tags": {
                  "type": "object",
                  "additionalProperties": { "type": "string" },
                  "description": "Optional tags to help organize your tables. These should be passed here as an object representing key/value pairs."
                },
                "isComputeEnabled": {
                  "type": "boolean",
                  "description": "Indicates if the table is enabled for computation."
                }
              },
              "required": ["name", "schema"],
              "title": "createTableBody",
              "additionalProperties": false
            }
          }
        }
      },
      "duplicateTableBody": {
        "description": "Parameters for the duplication operation.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "tableName": { "type": "string" },
                "schemaOnly": { "type": "boolean", "description": "Only duplicate the schema, not the content" },
                "factor": {
                  "type": "number",
                  "description": "Use a different factor for the table. Leave empty to use the same as the duplicated table."
                }
              },
              "title": "duplicateTableBody",
              "additionalProperties": false
            }
          }
        }
      },
      "importTableBody": {
        "description": "Content to import",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "fileId": {
                  "type": "string",
                  "description": "The file ID to import. It must have been uploaded to the Files API before. Supported formats: CSV, JSON (gzipped or not)"
                }
              },
              "required": ["fileId"],
              "title": "importTableBody",
              "additionalProperties": false
            }
          }
        }
      },
      "updateTableBody": {
        "description": "The updated schema/name of the table.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "description": "Required. This name is used to identify your table.",
                  "type": "string",
                  "minLength": 1
                },
                "frozen": {
                  "type": "boolean",
                  "description": "A table designated as \"frozen\" is immutable in terms of its name and schema structure; modifications to its schema or a renaming operation are not permitted. The only action that can be taken on such a table is deletion. The schema established at the time of creation is locked in as the final structure. To implement any changes, the table must be duplicated with the desired alterations."
                },
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "description": "Provide an object or a JSON schema to define the columns of the table. A maximum of 20 keys in the object/schema is allowed."
                },
                "tags": {
                  "type": "object",
                  "additionalProperties": { "type": "string" },
                  "description": "Optional tags to help organize your tables. These should be passed here as an object representing key/value pairs."
                },
                "isComputeEnabled": {
                  "type": "boolean",
                  "description": "Indicates if the table is enabled for computation."
                }
              },
              "title": "updateTableBody",
              "additionalProperties": false
            }
          }
        }
      },
      "renameTableColumnBody": {
        "description": "Details of the column to be renamed, including its current name and the desired new name.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "name": { "type": "string", "description": "The existing name of the column." },
                "newName": {
                  "description": "The new name to assign to the column.",
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 30
                }
              },
              "required": ["name", "newName"],
              "title": "renameTableColumnBody",
              "additionalProperties": false
            }
          }
        }
      },
      "findTableRowsBody": {
        "description": "The search criteria and filters to apply when searching for rows. This includes conditions, search terms, and pagination options.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "limit": {
                  "default": 100,
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "description": "Limit for pagination, specifying the maximum number of rows to return."
                },
                "offset": {
                  "default": 0,
                  "type": "integer",
                  "minimum": 0,
                  "description": "Offset for pagination, specifying where to start returning rows from."
                },
                "filter": {
                  "type": "object",
                  "additionalProperties": true,
                  "description": "Provide a mongodb-like filter to apply to the query. Example: \\{ \"name\": \\{ \"$eq\": \"John\" \\} \\}"
                },
                "group": {
                  "type": "object",
                  "additionalProperties": true,
                  "description": "Group the rows by a specific column and apply aggregations to them. Allowed values: key, avg, max, min, sum, count. Example: \\{ \"someId\": \"key\", \"orders\": [\"sum\", \"avg\"] \\}"
                },
                "search": {
                  "type": "string",
                  "maxLength": 1024,
                  "description": "Search term to apply to the row search. When using this parameter, some rows which doesn't match the search term will be returned, use the similarity field to know how much the row matches the search term. "
                },
                "orderBy": {
                  "default": "id",
                  "type": "string",
                  "description": "Specifies the column by which to order the results. By default it is ordered by id. Build-in columns: id, createdAt, updatedAt"
                },
                "orderDirection": {
                  "default": "asc",
                  "type": "string",
                  "enum": ["asc", "desc"],
                  "description": "Specifies the direction of sorting, either ascending or descending."
                }
              },
              "title": "findTableRowsBody",
              "additionalProperties": false
            }
          }
        }
      },
      "createTableRowsBody": {
        "description": "A batch of new rows to insert into the table. Each row must adhere to the table’s schema. A maximum of 1000 rows can be inserted in a single request.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "rows": {
                  "type": "array",
                  "items": { "type": "object", "properties": {}, "additionalProperties": true },
                  "minItems": 1,
                  "maxItems": 1000
                },
                "waitComputed": {
                  "type": "boolean",
                  "description": "Ensure computed columns are fully processed before returning the result. This is applicable only when the number of rows involved is fewer than 1."
                }
              },
              "required": ["rows"],
              "title": "createTableRowsBody",
              "additionalProperties": false
            }
          }
        }
      },
      "deleteTableRowsBody": {
        "description": "Identifiers of the rows to be deleted.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "ids": { "type": "array", "items": { "type": "number" }, "maxItems": 1000 },
                "filter": {
                  "type": "object",
                  "additionalProperties": true,
                  "description": "Filter to apply when deleting rows. Example: \\{ \"name\": \\{ \"$eq\": \"John\" \\} \\}"
                },
                "deleteAllRows": {
                  "type": "boolean",
                  "description": "Flag to delete all rows. Use with caution as this action is irreversible."
                }
              },
              "title": "deleteTableRowsBody",
              "additionalProperties": false
            }
          }
        }
      },
      "updateTableRowsBody": {
        "description": "Data for rows to update, including IDs. Errors affect only specific rows, not the entire batch.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "rows": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": { "id": { "type": "number" } },
                    "required": ["id"],
                    "additionalProperties": true
                  },
                  "minItems": 1,
                  "maxItems": 1000,
                  "description": "Rows with updated data, identified by ID."
                },
                "waitComputed": {
                  "type": "boolean",
                  "description": "Ensure computed columns are fully processed before returning the result. This is applicable only when the number of rows involved is fewer than 1."
                }
              },
              "required": ["rows"],
              "title": "updateTableRowsBody",
              "additionalProperties": false
            }
          }
        }
      },
      "upsertTableRowsBody": {
        "description": "Rows for insertion or update, with a key column to determine action. Supports partial successes.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "rows": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": { "id": { "type": "number" } },
                    "additionalProperties": true
                  },
                  "minItems": 1,
                  "maxItems": 1000
                },
                "keyColumn": {
                  "default": "id",
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 30,
                  "description": "Determines if a row is inserted or updated. Defaults to \"id\"."
                },
                "waitComputed": {
                  "type": "boolean",
                  "description": "Ensure computed columns are fully processed before returning the result. This is applicable only when the number of rows involved is fewer than 1."
                }
              },
              "required": ["rows"],
              "title": "upsertTableRowsBody",
              "additionalProperties": false
            }
          }
        }
      }
    },
    "parameters": {}
  }
}
