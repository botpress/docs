{
  "openapi": "3.0.3",
  "info": {
    "title": "Webhook API",
    "description": "API specification for webhook endpoints that receive event notifications",
    "version": "1.0.0",
    "contact": {
      "name": "API Support",
      "email": "support@example.com"
    }
  },
  "servers": [
    {
      "url": "https://api.example.com/webhooks",
      "description": "Production webhook server"
    },
    {
      "url": "https://staging-api.example.com/webhooks",
      "description": "Staging webhook server"
    }
  ],
  "paths": {
    "/user": {
      "post": {
        "summary": "User Event Webhook",
        "description": "Receives notifications for user-related events such as creation, updates, and deletions",
        "operationId": "userWebhook",
        "tags": ["User Events"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserEvent"
              },
              "examples": {
                "user_created": {
                  "summary": "User Created Event",
                  "value": {
                    "event": "user.created",
                    "timestamp": "2023-12-01T10:30:00Z",
                    "data": {
                      "user": {
                        "id": "user_123456",
                        "email": "john.doe@example.com",
                        "name": "John Doe",
                        "created_at": "2023-12-01T10:30:00Z"
                      }
                    }
                  }
                },
                "user_updated": {
                  "summary": "User Updated Event",
                  "value": {
                    "event": "user.updated",
                    "timestamp": "2023-12-01T11:45:00Z",
                    "data": {
                      "user": {
                        "id": "user_123456",
                        "email": "john.doe@example.com",
                        "name": "John Smith",
                        "updated_at": "2023-12-01T11:45:00Z"
                      },
                      "changes": ["name"]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook received and processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid signature or authentication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "webhookSignature": []
          }
        ]
      }
    },
    "/conversation": {
      "post": {
        "summary": "Conversation Event Webhook",
        "description": "Receives notifications for conversation-related events such as messages, status changes, and participant updates",
        "operationId": "conversationWebhook",
        "tags": ["Conversation Events"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConversationEvent"
              },
              "examples": {
                "message_sent": {
                  "summary": "Message Sent Event",
                  "value": {
                    "event": "conversation.message.sent",
                    "timestamp": "2023-12-01T12:00:00Z",
                    "data": {
                      "conversation": {
                        "id": "conv_789012",
                        "status": "active"
                      },
                      "message": {
                        "id": "msg_345678",
                        "content": "Hello, how can I help you?",
                        "sender": {
                          "id": "user_123456",
                          "type": "user"
                        },
                        "timestamp": "2023-12-01T12:00:00Z"
                      }
                    }
                  }
                },
                "conversation_ended": {
                  "summary": "Conversation Ended Event",
                  "value": {
                    "event": "conversation.ended",
                    "timestamp": "2023-12-01T13:30:00Z",
                    "data": {
                      "conversation": {
                        "id": "conv_789012",
                        "status": "ended",
                        "ended_at": "2023-12-01T13:30:00Z",
                        "duration": 5400
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook received and processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid signature or authentication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "webhookSignature": []
          }
        ]
      }
    },
    "/payment": {
      "post": {
        "summary": "Payment Event Webhook",
        "description": "Receives notifications for payment-related events such as successful payments, failures, and refunds",
        "operationId": "paymentWebhook",
        "tags": ["Payment Events"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentEvent"
              },
              "examples": {
                "payment_succeeded": {
                  "summary": "Payment Succeeded Event",
                  "value": {
                    "event": "payment.succeeded",
                    "timestamp": "2023-12-01T14:15:00Z",
                    "data": {
                      "payment": {
                        "id": "pay_901234",
                        "amount": 2999,
                        "currency": "USD",
                        "status": "succeeded",
                        "customer_id": "user_123456",
                        "created_at": "2023-12-01T14:15:00Z"
                      }
                    }
                  }
                },
                "payment_failed": {
                  "summary": "Payment Failed Event",
                  "value": {
                    "event": "payment.failed",
                    "timestamp": "2023-12-01T14:20:00Z",
                    "data": {
                      "payment": {
                        "id": "pay_901235",
                        "amount": 1500,
                        "currency": "USD",
                        "status": "failed",
                        "customer_id": "user_654321",
                        "failure_reason": "insufficient_funds",
                        "created_at": "2023-12-01T14:20:00Z"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook received and processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid signature or authentication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "webhookSignature": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "BaseEvent": {
        "type": "object",
        "required": ["event", "timestamp"],
        "properties": {
          "event": {
            "type": "string",
            "description": "The type of event that occurred"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 timestamp when the event occurred"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier for this webhook event"
          }
        }
      },
      "UserEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseEvent"
          },
          {
            "type": "object",
            "required": ["data"],
            "properties": {
              "event": {
                "enum": ["user.created", "user.updated", "user.deleted"]
              },
              "data": {
                "type": "object",
                "properties": {
                  "user": {
                    "$ref": "#/components/schemas/User"
                  },
                  "changes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of fields that were changed (for update events)"
                  }
                }
              }
            }
          }
        ]
      },
      "ConversationEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseEvent"
          },
          {
            "type": "object",
            "required": ["data"],
            "properties": {
              "event": {
                "enum": [
                  "conversation.started",
                  "conversation.ended",
                  "conversation.message.sent",
                  "conversation.message.received",
                  "conversation.participant.joined",
                  "conversation.participant.left"
                ]
              },
              "data": {
                "type": "object",
                "properties": {
                  "conversation": {
                    "$ref": "#/components/schemas/Conversation"
                  },
                  "message": {
                    "$ref": "#/components/schemas/Message"
                  },
                  "participant": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        ]
      },
      "PaymentEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseEvent"
          },
          {
            "type": "object",
            "required": ["data"],
            "properties": {
              "event": {
                "enum": [
                  "payment.succeeded",
                  "payment.failed",
                  "payment.refunded",
                  "payment.disputed"
                ]
              },
              "data": {
                "type": "object",
                "properties": {
                  "payment": {
                    "$ref": "#/components/schemas/Payment"
                  }
                }
              }
            }
          }
        ]
      },
      "User": {
        "type": "object",
        "required": ["id", "email"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the user"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "name": {
            "type": "string",
            "description": "User's full name"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the user was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the user was last updated"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true,
            "description": "Additional user metadata"
          }
        }
      },
      "Conversation": {
        "type": "object",
        "required": ["id", "status"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the conversation"
          },
          "status": {
            "type": "string",
            "enum": ["active", "ended", "paused"],
            "description": "Current status of the conversation"
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the conversation started"
          },
          "ended_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the conversation ended"
          },
          "duration": {
            "type": "integer",
            "description": "Duration of the conversation in seconds"
          },
          "participant_count": {
            "type": "integer",
            "description": "Number of participants in the conversation"
          }
        }
      },
      "Message": {
        "type": "object",
        "required": ["id", "content", "sender", "timestamp"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the message"
          },
          "content": {
            "type": "string",
            "description": "Content of the message"
          },
          "sender": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "ID of the message sender"
              },
              "type": {
                "type": "string",
                "enum": ["user", "bot", "agent"],
                "description": "Type of the message sender"
              }
            }
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "When the message was sent"
          },
          "message_type": {
            "type": "string",
            "enum": ["text", "image", "file", "quick_reply"],
            "description": "Type of the message"
          }
        }
      },
      "Payment": {
        "type": "object",
        "required": ["id", "amount", "currency", "status"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the payment"
          },
          "amount": {
            "type": "integer",
            "description": "Payment amount in the smallest currency unit (e.g., cents)"
          },
          "currency": {
            "type": "string",
            "description": "Three-letter ISO currency code"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "succeeded", "failed", "refunded", "disputed"],
            "description": "Current status of the payment"
          },
          "customer_id": {
            "type": "string",
            "description": "ID of the customer who made the payment"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the payment was created"
          },
          "failure_reason": {
            "type": "string",
            "description": "Reason for payment failure (if applicable)"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true,
            "description": "Additional payment metadata"
          }
        }
      },
      "WebhookResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the webhook was processed successfully"
          },
          "message": {
            "type": "string",
            "description": "Response message"
          },
          "processed_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the webhook was processed"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "required": ["error", "message"],
        "properties": {
          "error": {
            "type": "string",
            "description": "Error code"
          },
          "message": {
            "type": "string",
            "description": "Human-readable error message"
          },
          "details": {
            "type": "object",
            "additionalProperties": true,
            "description": "Additional error details"
          }
        }
      }
    },
    "securitySchemes": {
      "webhookSignature": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Webhook-Signature",
        "description": "HMAC-SHA256 signature of the request body using your webhook secret"
      }
    }
  },
  "tags": [
    {
      "name": "User Events",
      "description": "Webhooks related to user lifecycle events"
    },
    {
      "name": "Conversation Events",
      "description": "Webhooks related to conversation and messaging events"
    },
    {
      "name": "Payment Events",
      "description": "Webhooks related to payment processing events"
    }
  ]
}
