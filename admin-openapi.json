{
  "openapi": "3.0.0",
  "servers": [{ "url": "https://api.botpress.cloud" }],
  "info": { "title": "Botpress API", "description": "API for Botpress Cloud", "version": "1.1.0" },
  "paths": {
    "/v1/admin/helper/vrl": {
      "post": {
        "operationId": "runVrl",
        "description": "Run a VRL script",
        "parameters": [],
        "responses": {
          "200": { "$ref": "#/components/responses/runVrlResponse" },
          "default": { "$ref": "#/components/responses/runVrlResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/runVrlBody" }
      }
    },
    "/v1/admin/account/me": {
      "get": {
        "operationId": "getAccount",
        "description": "Get details of the account authenticating with this endpoint.",
        "parameters": [],
        "responses": {
          "200": { "$ref": "#/components/responses/getAccountResponse" },
          "default": { "$ref": "#/components/responses/getAccountResponse" }
        }
      },
      "put": {
        "operationId": "updateAccount",
        "description": "Update details of the account associated with authenticated user",
        "parameters": [],
        "responses": {
          "200": { "$ref": "#/components/responses/updateAccountResponse" },
          "default": { "$ref": "#/components/responses/updateAccountResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/updateAccountBody" }
      }
    },
    "/v1/admin/account/pats": {
      "get": {
        "operationId": "listPersonalAccessTokens",
        "description": "List PATs (Personal Access Tokens) of account.",
        "parameters": [],
        "responses": {
          "200": { "$ref": "#/components/responses/listPersonalAccessTokensResponse" },
          "default": { "$ref": "#/components/responses/listPersonalAccessTokensResponse" }
        }
      },
      "post": {
        "operationId": "createPersonalAccessToken",
        "description": "Create a PAT",
        "parameters": [],
        "responses": {
          "200": { "$ref": "#/components/responses/createPersonalAccessTokenResponse" },
          "default": { "$ref": "#/components/responses/createPersonalAccessTokenResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/createPersonalAccessTokenBody" }
      }
    },
    "/v1/admin/account/pats/{id}": {
      "delete": {
        "operationId": "deletePersonalAccessToken",
        "description": "Delete a PAT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of Personal Access Token",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/deletePersonalAccessTokenResponse" },
          "default": { "$ref": "#/components/responses/deletePersonalAccessTokenResponse" }
        }
      }
    },
    "/v1/admin/account/preferences/{key}": {
      "post": {
        "operationId": "setAccountPreference",
        "description": "Set a preference for the account",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Preference key",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/setAccountPreferenceResponse" },
          "default": { "$ref": "#/components/responses/setAccountPreferenceResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/setAccountPreferenceBody" }
      },
      "get": {
        "operationId": "getAccountPreference",
        "description": "Get a preference of the account",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Preference key",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/getAccountPreferenceResponse" },
          "default": { "$ref": "#/components/responses/getAccountPreferenceResponse" }
        }
      }
    },
    "/v1/admin/hub/integrations": {
      "get": {
        "operationId": "listPublicIntegrations",
        "description": "List public integration",
        "parameters": [
          {
            "name": "nextToken",
            "in": "query",
            "description": "Provide the `meta.nextToken` value provided in the last API response to retrieve the next page of results",
            "schema": { "type": "string" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results to return per page",
            "required": false,
            "schema": { "type": "number" }
          },
          { "name": "name", "in": "query", "description": "Integration Name", "schema": { "type": "string" } },
          {
            "name": "version",
            "in": "query",
            "description": "Integration version. Either a semver version or tag \"latest\"",
            "schema": { "type": "string" }
          },
          {
            "name": "interfaceId",
            "in": "query",
            "description": "Filter integrations by implemented interface ID",
            "schema": { "type": "string" }
          },
          {
            "name": "interfaceName",
            "in": "query",
            "description": "Filter integrations by implemented interface name (strict match)",
            "schema": { "type": "string" }
          },
          {
            "name": "installedByBotId",
            "in": "query",
            "description": "Bot ID. Required when filtering for installed integrations",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "verificationStatus",
            "in": "query",
            "description": "Filter integrations by verification status",
            "schema": { "type": "string", "enum": ["unapproved", "pending", "approved", "rejected"] }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search integrations by name, description, actions, and interfaces. Responses include a matchedOn field indicating which fields matched the search.",
            "schema": { "type": "string" }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sort integrations by field",
            "schema": { "type": "string", "enum": ["popularity", "name", "createdAt", "updatedAt", "installCount"] }
          },
          {
            "name": "direction",
            "in": "query",
            "description": "Sort direction (asc or desc)",
            "schema": { "type": "string", "enum": ["asc", "desc"] }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/listPublicIntegrationsResponse" },
          "default": { "$ref": "#/components/responses/listPublicIntegrationsResponse" }
        }
      }
    },
    "/v1/admin/hub/integrations/{id}": {
      "get": {
        "operationId": "getPublicIntegrationById",
        "description": "Get public integration by Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Integration Version ID",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/getPublicIntegrationByIdResponse" },
          "default": { "$ref": "#/components/responses/getPublicIntegrationByIdResponse" }
        }
      }
    },
    "/v1/admin/hub/integrations/{name}/{version}": {
      "get": {
        "operationId": "getPublicIntegration",
        "description": "Get public integration by name and version",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Integration Name",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "version",
            "in": "path",
            "description": "Integration version. Either a semver version or tag \"latest\"",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/getPublicIntegrationResponse" },
          "default": { "$ref": "#/components/responses/getPublicIntegrationResponse" }
        }
      }
    },
    "/v1/admin/bots": {
      "post": {
        "operationId": "createBot",
        "description": "Create bot",
        "parameters": [],
        "responses": {
          "200": { "$ref": "#/components/responses/createBotResponse" },
          "default": { "$ref": "#/components/responses/createBotResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/createBotBody" }
      },
      "get": {
        "operationId": "listBots",
        "description": "List bots",
        "parameters": [
          {
            "name": "dev",
            "in": "query",
            "description": "If true, only dev bots are returned. Otherwise, only production bots are returned.",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Filter by tags",
            "schema": { "type": "object", "additionalProperties": { "type": "string" } }
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "Provide the `meta.nextToken` value provided in the last API response to retrieve the next page of results",
            "schema": { "type": "string" }
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "Sort results by this field",
            "schema": { "type": "string", "enum": ["createdAt", "updatedAt"] }
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "Sort results in this direction",
            "schema": { "type": "string", "enum": ["asc", "desc"] }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/listBotsResponse" },
          "default": { "$ref": "#/components/responses/listBotsResponse" }
        }
      }
    },
    "/v1/admin/bots/{id}": {
      "put": {
        "operationId": "updateBot",
        "description": "Update bot",
        "parameters": [
          { "name": "id", "in": "path", "description": "Bot ID", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/updateBotResponse" },
          "default": { "$ref": "#/components/responses/updateBotResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/updateBotBody" }
      },
      "get": {
        "operationId": "getBot",
        "description": "Get bot details",
        "parameters": [
          { "name": "id", "in": "path", "description": "Bot ID", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/getBotResponse" },
          "default": { "$ref": "#/components/responses/getBotResponse" }
        }
      },
      "delete": {
        "operationId": "deleteBot",
        "description": "Delete bot",
        "parameters": [
          { "name": "id", "in": "path", "description": "Bot ID", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/deleteBotResponse" },
          "default": { "$ref": "#/components/responses/deleteBotResponse" }
        }
      }
    },
    "/v1/admin/bots/{id}/transfer": {
      "post": {
        "operationId": "transferBot",
        "description": "Transfer bot to another workspace. You need to be a Manager member of the workspace the bot currently belongs to and have permission to create bots in the target workspace.",
        "parameters": [
          { "name": "id", "in": "path", "description": "Bot ID", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/transferBotResponse" },
          "default": { "$ref": "#/components/responses/transferBotResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/transferBotBody" }
      }
    },
    "/v1/admin/bots/{id}/logs": {
      "get": {
        "operationId": "getBotLogs",
        "description": "Get bot logs",
        "parameters": [
          { "name": "id", "in": "path", "description": "Bot ID", "required": true, "schema": { "type": "string" } },
          {
            "name": "timeStart",
            "in": "query",
            "description": "Beginning of the time range to get logs from",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "timeEnd",
            "in": "query",
            "description": "End of the time range to get logs from",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "level",
            "in": "query",
            "description": "Filter by log level",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Filter by user ID",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "workflowId",
            "in": "query",
            "description": "Filter by workflow ID",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "conversationId",
            "in": "query",
            "description": "Filter by conversation ID",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "Token to get the next page of logs",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/getBotLogsResponse" },
          "default": { "$ref": "#/components/responses/getBotLogsResponse" }
        }
      }
    },
    "/v1/admin/bots/{id}/webchat": {
      "get": {
        "operationId": "getBotWebchat",
        "description": "Get the webchat code/URL for a bot",
        "parameters": [
          { "name": "id", "in": "path", "description": "Bot ID", "required": true, "schema": { "type": "string" } },
          {
            "name": "type",
            "in": "query",
            "description": "type of script to get",
            "required": true,
            "schema": { "type": "string", "enum": ["preconfigured", "configurable", "fullscreen", "sharableUrl"] }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/getBotWebchatResponse" },
          "default": { "$ref": "#/components/responses/getBotWebchatResponse" }
        }
      }
    },
    "/v1/admin/bots/{id}/analytics": {
      "get": {
        "operationId": "getBotAnalytics",
        "description": "Get bot analytics",
        "parameters": [
          { "name": "id", "in": "path", "description": "Bot ID", "required": true, "schema": { "type": "string" } },
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date/time (inclusive)",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date/time (exclusive)",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/getBotAnalyticsResponse" },
          "default": { "$ref": "#/components/responses/getBotAnalyticsResponse" }
        }
      }
    },
    "/v1/admin/bots/{id}/issues/{issueId}": {
      "get": {
        "operationId": "getBotIssue",
        "description": "Get Bot Issue",
        "parameters": [
          { "name": "id", "in": "path", "description": "Bot ID", "required": true, "schema": { "type": "string" } },
          {
            "name": "issueId",
            "in": "path",
            "description": "Issue ID",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/getBotIssueResponse" },
          "default": { "$ref": "#/components/responses/getBotIssueResponse" }
        }
      },
      "delete": {
        "operationId": "deleteBotIssue",
        "description": "Delete Bot Issue",
        "parameters": [
          { "name": "id", "in": "path", "description": "Bot ID", "required": true, "schema": { "type": "string" } },
          {
            "name": "issueId",
            "in": "path",
            "description": "Issue ID",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/deleteBotIssueResponse" },
          "default": { "$ref": "#/components/responses/deleteBotIssueResponse" }
        }
      }
    },
    "/v1/admin/bots/{id}/issues": {
      "get": {
        "operationId": "listBotIssues",
        "description": "List Bot Issues",
        "parameters": [
          { "name": "id", "in": "path", "description": "Bot ID", "required": true, "schema": { "type": "string" } },
          {
            "name": "nextToken",
            "in": "query",
            "description": "Provide the `meta.nextToken` value provided in the last API response to retrieve the next page of results",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/listBotIssuesResponse" },
          "default": { "$ref": "#/components/responses/listBotIssuesResponse" }
        }
      }
    },
    "/v1/admin/bots/{id}/issues/{issueId}/events": {
      "get": {
        "operationId": "listBotIssueEvents",
        "description": "List Events for a Bot Issue",
        "parameters": [
          { "name": "id", "in": "path", "description": "Bot ID", "required": true, "schema": { "type": "string" } },
          {
            "name": "issueId",
            "in": "path",
            "description": "Issue ID",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/listBotIssueEventsResponse" },
          "default": { "$ref": "#/components/responses/listBotIssueEventsResponse" }
        }
      }
    },
    "/v1/admin/bots/{id}/versions": {
      "get": {
        "operationId": "listBotVersions",
        "description": "List Versions for a Bot",
        "parameters": [
          { "name": "id", "in": "path", "description": "Bot ID", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/listBotVersionsResponse" },
          "default": { "$ref": "#/components/responses/listBotVersionsResponse" }
        }
      },
      "post": {
        "operationId": "createBotVersion",
        "description": "Create a new version for a bot",
        "parameters": [
          { "name": "id", "in": "path", "description": "Bot ID", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/createBotVersionResponse" },
          "default": { "$ref": "#/components/responses/createBotVersionResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/createBotVersionBody" }
      }
    },
    "/v1/admin/bots/{id}/versions/{versionId}": {
      "get": {
        "operationId": "getBotVersion",
        "description": "Get a specific version of a bot",
        "parameters": [
          { "name": "id", "in": "path", "description": "Bot ID", "required": true, "schema": { "type": "string" } },
          {
            "name": "versionId",
            "in": "path",
            "description": "Version ID",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/getBotVersionResponse" },
          "default": { "$ref": "#/components/responses/getBotVersionResponse" }
        }
      }
    },
    "/v1/admin/bots/{id}/versions/deploy": {
      "post": {
        "operationId": "deployBotVersion",
        "description": "Deploys a version for a bot",
        "parameters": [
          { "name": "id", "in": "path", "description": "Bot ID", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/deployBotVersionResponse" },
          "default": { "$ref": "#/components/responses/deployBotVersionResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/deployBotVersionBody" }
      }
    },
    "/v1/admin/bots/{botId}/integrations/{integrationId}/shareable-id": {
      "post": {
        "operationId": "createIntegrationShareableId",
        "description": "(Experimental) Generate a shareable ID for an integration installed in a bot. This ID is meant to identify the crossover of a bot and an integration version, just like the webhook ID, but in a human-readable format. It is used for the integrations channel sandbox feature.",
        "parameters": [
          { "name": "botId", "in": "path", "description": "Bot ID", "required": true, "schema": { "type": "string" } },
          {
            "name": "integrationId",
            "in": "path",
            "description": "Integration Version ID",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/createIntegrationShareableIdResponse" },
          "default": { "$ref": "#/components/responses/createIntegrationShareableIdResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/createIntegrationShareableIdBody" }
      },
      "delete": {
        "operationId": "deleteIntegrationShareableId",
        "description": "(Experimental) Delete a shareable ID for an integration installed in a bot. This ID is meant to identify the crossover of a bot and an integration version, just like the webhook ID, but in a human-readable format. It is used for the integrations channel sandbox feature.",
        "parameters": [
          { "name": "botId", "in": "path", "description": "Bot ID", "required": true, "schema": { "type": "string" } },
          {
            "name": "integrationId",
            "in": "path",
            "description": "Integration Version ID",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/deleteIntegrationShareableIdResponse" },
          "default": { "$ref": "#/components/responses/deleteIntegrationShareableIdResponse" }
        }
      },
      "get": {
        "operationId": "getIntegrationShareableId",
        "description": "(Experimental) Get an existing shareable ID for an integration installed in a bot. This ID is meant to identify the crossover of a bot and an integration version, just like the webhook ID, but in a human-readable format. It is used for the integrations channel sandbox feature.",
        "parameters": [
          { "name": "botId", "in": "path", "description": "Bot ID", "required": true, "schema": { "type": "string" } },
          {
            "name": "integrationId",
            "in": "path",
            "description": "Integration Version ID",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/getIntegrationShareableIdResponse" },
          "default": { "$ref": "#/components/responses/getIntegrationShareableIdResponse" }
        }
      }
    },
    "/v1/admin/workspaces/{id}/billing/invoices": {
      "get": {
        "operationId": "listWorkspaceInvoices",
        "description": "List invoices billed to workspace",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Workspace ID",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/listWorkspaceInvoicesResponse" },
          "default": { "$ref": "#/components/responses/listWorkspaceInvoicesResponse" }
        }
      }
    },
    "/v1/admin/workspaces/{id}/billing/upcoming-invoice": {
      "get": {
        "operationId": "getUpcomingInvoice",
        "description": "Get upcoming invoice for workspace",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Workspace ID",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/getUpcomingInvoiceResponse" },
          "default": { "$ref": "#/components/responses/getUpcomingInvoiceResponse" }
        }
      }
    },
    "/v1/admin/workspaces/{id}/billing/invoices/charge-unpaid": {
      "post": {
        "operationId": "chargeWorkspaceUnpaidInvoices",
        "description": "Charge unpaid invoices of a workspace.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Workspace ID",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/chargeWorkspaceUnpaidInvoicesResponse" },
          "default": { "$ref": "#/components/responses/chargeWorkspaceUnpaidInvoicesResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/chargeWorkspaceUnpaidInvoicesBody" }
      }
    },
    "/v1/admin/workspaces": {
      "post": {
        "operationId": "createWorkspace",
        "description": "Create workspace",
        "parameters": [],
        "responses": {
          "200": { "$ref": "#/components/responses/createWorkspaceResponse" },
          "default": { "$ref": "#/components/responses/createWorkspaceResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/createWorkspaceBody" }
      },
      "get": {
        "operationId": "listWorkspaces",
        "description": "List workspaces the user has access to",
        "parameters": [
          {
            "name": "nextToken",
            "in": "query",
            "description": "Provide the `meta.nextToken` value provided in the last API response to retrieve the next page of results",
            "schema": { "type": "string" }
          },
          {
            "name": "handle",
            "in": "query",
            "description": "Workspace handle",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/listWorkspacesResponse" },
          "default": { "$ref": "#/components/responses/listWorkspacesResponse" }
        }
      }
    },
    "/v1/admin/workspaces/{id}/public": {
      "get": {
        "operationId": "getPublicWorkspace",
        "description": "Get workspace public details",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Workspace ID",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/getPublicWorkspaceResponse" },
          "default": { "$ref": "#/components/responses/getPublicWorkspaceResponse" }
        }
      }
    },
    "/v1/admin/workspaces/{id}": {
      "get": {
        "operationId": "getWorkspace",
        "description": "Get workspace details",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Workspace ID",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/getWorkspaceResponse" },
          "default": { "$ref": "#/components/responses/getWorkspaceResponse" }
        }
      },
      "put": {
        "operationId": "updateWorkspace",
        "description": "Update workspace",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Workspace ID",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/updateWorkspaceResponse" },
          "default": { "$ref": "#/components/responses/updateWorkspaceResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/updateWorkspaceBody" }
      },
      "delete": {
        "operationId": "deleteWorkspace",
        "description": "Delete workspace",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Workspace ID",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/deleteWorkspaceResponse" },
          "default": { "$ref": "#/components/responses/deleteWorkspaceResponse" }
        }
      }
    },
    "/v1/admin/workspaces/{id}/usages": {
      "get": {
        "operationId": "listWorkspaceUsages",
        "description": "List workspace usages",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Workspace ID",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Usage type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "invocation_timeout",
                "invocation_calls",
                "storage_count",
                "bot_count",
                "knowledgebase_vector_storage",
                "workspace_ratelimit",
                "table_row_count",
                "workspace_member_count",
                "integrations_owned_count",
                "ai_spend",
                "openai_spend",
                "bing_search_spend",
                "always_alive"
              ]
            }
          },
          {
            "name": "period",
            "in": "query",
            "description": "Period to get",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/listWorkspaceUsagesResponse" },
          "default": { "$ref": "#/components/responses/listWorkspaceUsagesResponse" }
        }
      }
    },
    "/v1/admin/workspaces/{id}/usages/by-bot": {
      "get": {
        "operationId": "breakDownWorkspaceUsageByBot",
        "description": "Break down workspace usage by bot",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Workspace ID",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Usage type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "invocation_timeout",
                "invocation_calls",
                "storage_count",
                "bot_count",
                "knowledgebase_vector_storage",
                "workspace_ratelimit",
                "table_row_count",
                "workspace_member_count",
                "integrations_owned_count",
                "ai_spend",
                "openai_spend",
                "bing_search_spend",
                "always_alive"
              ]
            }
          },
          {
            "name": "period",
            "in": "query",
            "description": "Period to get",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/breakDownWorkspaceUsageByBotResponse" },
          "default": { "$ref": "#/components/responses/breakDownWorkspaceUsageByBotResponse" }
        }
      }
    },
    "/v1/admin/workspaces/usages/quota-completion": {
      "get": {
        "operationId": "getAllWorkspaceQuotaCompletion",
        "description": "For a user, gets a map of workspace IDs to their highest quota completion rate",
        "parameters": [],
        "responses": {
          "200": { "$ref": "#/components/responses/getAllWorkspaceQuotaCompletionResponse" },
          "default": { "$ref": "#/components/responses/getAllWorkspaceQuotaCompletionResponse" }
        }
      }
    },
    "/v1/admin/workspaces/{id}/quota": {
      "get": {
        "operationId": "getWorkspaceQuota",
        "description": "Get workspace quota",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Workspace ID",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Usage type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "invocation_timeout",
                "invocation_calls",
                "storage_count",
                "bot_count",
                "knowledgebase_vector_storage",
                "workspace_ratelimit",
                "table_row_count",
                "workspace_member_count",
                "integrations_owned_count",
                "ai_spend",
                "openai_spend",
                "bing_search_spend",
                "always_alive"
              ]
            }
          },
          {
            "name": "period",
            "in": "query",
            "description": "Period to get",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/getWorkspaceQuotaResponse" },
          "default": { "$ref": "#/components/responses/getWorkspaceQuotaResponse" }
        }
      }
    },
    "/v1/admin/workspaces/{id}/quotas": {
      "get": {
        "operationId": "listWorkspaceQuotas",
        "description": "List workspace quotas",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Workspace ID",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "period",
            "in": "query",
            "description": "Period to get",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/listWorkspaceQuotasResponse" },
          "default": { "$ref": "#/components/responses/listWorkspaceQuotasResponse" }
        }
      }
    },
    "/v1/admin/workspaces/handle-availability": {
      "put": {
        "operationId": "checkHandleAvailability",
        "description": "Check if a workspace handle is available",
        "parameters": [],
        "responses": {
          "200": { "$ref": "#/components/responses/checkHandleAvailabilityResponse" },
          "default": { "$ref": "#/components/responses/checkHandleAvailabilityResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/checkHandleAvailabilityBody" }
      }
    },
    "/v1/admin/workspaces/public": {
      "get": {
        "operationId": "listPublicWorkspaces",
        "description": "List public workspaces",
        "parameters": [
          {
            "name": "nextToken",
            "in": "query",
            "description": "Provide the `meta.nextToken` value provided in the last API response to retrieve the next page of results",
            "schema": { "type": "string" }
          },
          {
            "name": "workspaceIds",
            "in": "query",
            "description": "Ids of the workspaces to list",
            "required": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search query",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/listPublicWorkspacesResponse" },
          "default": { "$ref": "#/components/responses/listPublicWorkspacesResponse" }
        }
      }
    },
    "/v1/admin/workspaces/{id}/audit-records": {
      "get": {
        "operationId": "getAuditRecords",
        "description": "Get the audit records of a workspace, sorted from most recent to oldest.",
        "parameters": [
          {
            "name": "nextToken",
            "in": "query",
            "description": "Provide the `meta.nextToken` value provided in the last API response to retrieve the next page of results",
            "schema": { "type": "string" }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Workspace ID",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/getAuditRecordsResponse" },
          "default": { "$ref": "#/components/responses/getAuditRecordsResponse" }
        }
      }
    },
    "/v1/admin/workspace-members": {
      "get": {
        "operationId": "listWorkspaceMembers",
        "description": "Lists all the members in a workspace",
        "parameters": [
          {
            "name": "nextToken",
            "in": "query",
            "description": "Provide the `meta.nextToken` value provided in the last API response to retrieve the next page of results",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/listWorkspaceMembersResponse" },
          "default": { "$ref": "#/components/responses/listWorkspaceMembersResponse" }
        }
      },
      "post": {
        "operationId": "createWorkspaceMember",
        "description": "Add a member to the workspace",
        "parameters": [],
        "responses": {
          "200": { "$ref": "#/components/responses/createWorkspaceMemberResponse" },
          "default": { "$ref": "#/components/responses/createWorkspaceMemberResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/createWorkspaceMemberBody" }
      }
    },
    "/v1/admin/workspace-members/me": {
      "get": {
        "operationId": "getWorkspaceMember",
        "description": "Get details of the account authenticating with this endpoint.",
        "parameters": [],
        "responses": {
          "200": { "$ref": "#/components/responses/getWorkspaceMemberResponse" },
          "default": { "$ref": "#/components/responses/getWorkspaceMemberResponse" }
        }
      }
    },
    "/v1/admin/workspace-members/{id}": {
      "delete": {
        "operationId": "deleteWorkspaceMember",
        "description": "Remove a member of a workspace",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Workspace member ID",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/deleteWorkspaceMemberResponse" },
          "default": { "$ref": "#/components/responses/deleteWorkspaceMemberResponse" }
        }
      },
      "put": {
        "operationId": "updateWorkspaceMember",
        "description": "Update the member of a workspace",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Workspace member ID",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/updateWorkspaceMemberResponse" },
          "default": { "$ref": "#/components/responses/updateWorkspaceMemberResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/updateWorkspaceMemberBody" }
      }
    },
    "/v1/admin/integrations/iaks": {
      "get": {
        "operationId": "listIntegrationApiKeys",
        "description": "List IAKs (Integration Api Keys) of an integration",
        "parameters": [
          {
            "name": "integrationId",
            "in": "query",
            "description": "ID of the integration",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/listIntegrationApiKeysResponse" },
          "default": { "$ref": "#/components/responses/listIntegrationApiKeysResponse" }
        }
      },
      "post": {
        "operationId": "createIntegrationApiKey",
        "description": "Create an IAK",
        "parameters": [],
        "responses": {
          "200": { "$ref": "#/components/responses/createIntegrationApiKeyResponse" },
          "default": { "$ref": "#/components/responses/createIntegrationApiKeyResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/createIntegrationApiKeyBody" }
      }
    },
    "/v1/admin/integrations/iaks/{id}": {
      "delete": {
        "operationId": "deleteIntegrationApiKey",
        "description": "Delete an IAK",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of Integration Api Key",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/deleteIntegrationApiKeyResponse" },
          "default": { "$ref": "#/components/responses/deleteIntegrationApiKeyResponse" }
        }
      }
    },
    "/v1/admin/integrations": {
      "post": {
        "operationId": "createIntegration",
        "description": "Create integration",
        "parameters": [],
        "responses": {
          "200": { "$ref": "#/components/responses/createIntegrationResponse" },
          "default": { "$ref": "#/components/responses/createIntegrationResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/createIntegrationBody" }
      },
      "get": {
        "operationId": "listIntegrations",
        "description": "List integrations, supports filtering and sorting capabilities",
        "parameters": [
          {
            "name": "nextToken",
            "in": "query",
            "description": "Provide the `meta.nextToken` value provided in the last API response to retrieve the next page of results",
            "schema": { "type": "string" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results to return per page",
            "required": false,
            "schema": { "type": "number" }
          },
          { "name": "name", "in": "query", "description": "Integration Name", "schema": { "type": "string" } },
          {
            "name": "version",
            "in": "query",
            "description": "Integration version. Either a semver version or tag \"latest\"",
            "schema": { "type": "string" }
          },
          {
            "name": "interfaceId",
            "in": "query",
            "description": "Filter integrations by implemented interface ID",
            "schema": { "type": "string" }
          },
          {
            "name": "interfaceName",
            "in": "query",
            "description": "Filter integrations by implemented interface name (strict match)",
            "schema": { "type": "string" }
          },
          {
            "name": "installedByBotId",
            "in": "query",
            "description": "Bot ID. Required when filtering for installed integrations",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "verificationStatus",
            "in": "query",
            "description": "Filter integrations by verification status",
            "schema": { "type": "string", "enum": ["unapproved", "pending", "approved", "rejected"] }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search integrations by name, description, actions, and interfaces. Responses include a matchedOn field indicating which fields matched the search.",
            "schema": { "type": "string" }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sort integrations by field",
            "schema": { "type": "string", "enum": ["popularity", "name", "createdAt", "updatedAt", "installCount"] }
          },
          {
            "name": "direction",
            "in": "query",
            "description": "Sort direction (asc or desc)",
            "schema": { "type": "string", "enum": ["asc", "desc"] }
          },
          {
            "name": "visibility",
            "in": "query",
            "description": "Filter integrations by visibility (public, private)",
            "schema": { "type": "string", "enum": ["public", "private"] }
          },
          {
            "name": "dev",
            "in": "query",
            "description": "If true, only dev integrations are returned. Otherwise, only production integrations are returned.",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/listIntegrationsResponse" },
          "default": { "$ref": "#/components/responses/listIntegrationsResponse" }
        }
      }
    },
    "/v1/admin/integrations/validate": {
      "post": {
        "operationId": "validateIntegrationCreation",
        "description": "Perform a validation of an integration creation request",
        "parameters": [],
        "responses": {
          "200": { "$ref": "#/components/responses/validateIntegrationCreationResponse" },
          "default": { "$ref": "#/components/responses/validateIntegrationCreationResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/validateIntegrationCreationBody" }
      }
    },
    "/v1/admin/integrations/{id}": {
      "put": {
        "operationId": "updateIntegration",
        "description": "Update integration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Integration Version ID",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/updateIntegrationResponse" },
          "default": { "$ref": "#/components/responses/updateIntegrationResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/updateIntegrationBody" }
      },
      "get": {
        "operationId": "getIntegration",
        "description": "Get integration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Integration Version ID",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/getIntegrationResponse" },
          "default": { "$ref": "#/components/responses/getIntegrationResponse" }
        }
      },
      "delete": {
        "operationId": "deleteIntegration",
        "description": "Delete integration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Integration Version ID",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/deleteIntegrationResponse" },
          "default": { "$ref": "#/components/responses/deleteIntegrationResponse" }
        }
      }
    },
    "/v1/admin/integrations/{id}/validate": {
      "put": {
        "operationId": "validateIntegrationUpdate",
        "description": "Perform a validation of an integration update request",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Integration Version ID",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/validateIntegrationUpdateResponse" },
          "default": { "$ref": "#/components/responses/validateIntegrationUpdateResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/validateIntegrationUpdateBody" }
      }
    },
    "/v1/admin/integrations/{id}/logs": {
      "get": {
        "operationId": "getIntegrationLogs",
        "description": "Get integration logs",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Integration Version ID",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "timeStart",
            "in": "query",
            "description": "Beginning of the time range to get logs from",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "timeEnd",
            "in": "query",
            "description": "End of the time range to get logs from",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "level",
            "in": "query",
            "description": "Filter by log level",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Filter by user ID",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "conversationId",
            "in": "query",
            "description": "Filter by conversation ID",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "Token to get the next page of logs",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/getIntegrationLogsResponse" },
          "default": { "$ref": "#/components/responses/getIntegrationLogsResponse" }
        }
      }
    },
    "/v1/admin/integrations/{name}/{version}": {
      "get": {
        "operationId": "getIntegrationByName",
        "description": "Get integration",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Integration Name",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "version",
            "in": "path",
            "description": "Integration version. Either a semver version or tag \"latest\"",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/getIntegrationByNameResponse" },
          "default": { "$ref": "#/components/responses/getIntegrationByNameResponse" }
        }
      }
    },
    "/v1/admin/integrations/request-verification": {
      "post": {
        "operationId": "requestIntegrationVerification",
        "description": "Request Integration Verification",
        "parameters": [],
        "responses": {
          "200": { "$ref": "#/components/responses/requestIntegrationVerificationResponse" },
          "default": { "$ref": "#/components/responses/requestIntegrationVerificationResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/requestIntegrationVerificationBody" }
      }
    },
    "/v1/admin/interfaces": {
      "post": {
        "operationId": "createInterface",
        "description": "Create Interface",
        "parameters": [],
        "responses": {
          "200": { "$ref": "#/components/responses/createInterfaceResponse" },
          "default": { "$ref": "#/components/responses/createInterfaceResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/createInterfaceBody" }
      },
      "get": {
        "operationId": "listInterfaces",
        "description": "List Interfaces",
        "parameters": [
          {
            "name": "nextToken",
            "in": "query",
            "description": "Provide the `meta.nextToken` value provided in the last API response to retrieve the next page of results",
            "schema": { "type": "string" }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter all versions of an interface by name",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/listInterfacesResponse" },
          "default": { "$ref": "#/components/responses/listInterfacesResponse" }
        }
      }
    },
    "/v1/admin/interfaces/{id}": {
      "get": {
        "operationId": "getInterface",
        "description": "Get Interface",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Interface id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/getInterfaceResponse" },
          "default": { "$ref": "#/components/responses/getInterfaceResponse" }
        }
      },
      "put": {
        "operationId": "updateInterface",
        "description": "Update Interface",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Interface id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/updateInterfaceResponse" },
          "default": { "$ref": "#/components/responses/updateInterfaceResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/updateInterfaceBody" }
      },
      "delete": {
        "operationId": "deleteInterface",
        "description": "Delete Interface",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Interface id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/deleteInterfaceResponse" },
          "default": { "$ref": "#/components/responses/deleteInterfaceResponse" }
        }
      }
    },
    "/v1/admin/interfaces/{name}/{version}": {
      "get": {
        "operationId": "getInterfaceByName",
        "description": "Get Interface by name and version",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Interface name",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "version",
            "in": "path",
            "description": "Interface version",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/getInterfaceByNameResponse" },
          "default": { "$ref": "#/components/responses/getInterfaceByNameResponse" }
        }
      }
    },
    "/v1/admin/plugins": {
      "post": {
        "operationId": "createPlugin",
        "description": "Create Plugin",
        "parameters": [],
        "responses": {
          "200": { "$ref": "#/components/responses/createPluginResponse" },
          "default": { "$ref": "#/components/responses/createPluginResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/createPluginBody" }
      },
      "get": {
        "operationId": "listPlugins",
        "description": "List Plugins",
        "parameters": [
          {
            "name": "nextToken",
            "in": "query",
            "description": "Provide the `meta.nextToken` value provided in the last API response to retrieve the next page of results",
            "schema": { "type": "string" }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter all versions of a plugin by name",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/listPluginsResponse" },
          "default": { "$ref": "#/components/responses/listPluginsResponse" }
        }
      }
    },
    "/v1/admin/plugins/{id}": {
      "get": {
        "operationId": "getPlugin",
        "description": "Get Plugin",
        "parameters": [
          { "name": "id", "in": "path", "description": "Plugin id", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/getPluginResponse" },
          "default": { "$ref": "#/components/responses/getPluginResponse" }
        }
      },
      "put": {
        "operationId": "updatePlugin",
        "description": "Update Plugin",
        "parameters": [
          { "name": "id", "in": "path", "description": "Plugin id", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/updatePluginResponse" },
          "default": { "$ref": "#/components/responses/updatePluginResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/updatePluginBody" }
      },
      "delete": {
        "operationId": "deletePlugin",
        "description": "Delete Plugin",
        "parameters": [
          { "name": "id", "in": "path", "description": "Plugin id", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/deletePluginResponse" },
          "default": { "$ref": "#/components/responses/deletePluginResponse" }
        }
      }
    },
    "/v1/admin/plugins/{name}/{version}": {
      "get": {
        "operationId": "getPluginByName",
        "description": "Get Plugin by name and version",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Plugin name",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "version",
            "in": "path",
            "description": "Plugin version",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/getPluginByNameResponse" },
          "default": { "$ref": "#/components/responses/getPluginByNameResponse" }
        }
      }
    },
    "/v1/admin/plugins/{id}/code/{platform}": {
      "get": {
        "operationId": "getPluginCode",
        "description": "Get Plugin Code",
        "parameters": [
          { "name": "id", "in": "path", "description": "Bot ID", "required": true, "schema": { "type": "string" } },
          {
            "name": "platform",
            "in": "path",
            "description": "Platform",
            "required": true,
            "schema": { "type": "string", "enum": ["node", "browser"] }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/getPluginCodeResponse" },
          "default": { "$ref": "#/components/responses/getPluginCodeResponse" }
        }
      }
    },
    "/v1/admin/usages/{id}": {
      "get": {
        "operationId": "getUsage",
        "description": "Get usage",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Usage type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "invocation_timeout",
                "invocation_calls",
                "storage_count",
                "bot_count",
                "knowledgebase_vector_storage",
                "workspace_ratelimit",
                "table_row_count",
                "workspace_member_count",
                "integrations_owned_count",
                "ai_spend",
                "openai_spend",
                "bing_search_spend",
                "always_alive"
              ]
            }
          },
          {
            "name": "period",
            "in": "query",
            "description": "Period to get",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of a bot or a workspace, depending on the \"type\" parameter",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/getUsageResponse" },
          "default": { "$ref": "#/components/responses/getUsageResponse" }
        }
      }
    },
    "/v1/admin/usages/multiple": {
      "get": {
        "operationId": "getMultipleUsages",
        "description": "Get multiple usages",
        "parameters": [
          {
            "name": "types",
            "in": "query",
            "description": "Usage types to retrieve. All types have to belong to the same type of entity (e.g. workspace or bot).",
            "required": true,
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "IDs of either workspaces or bots to retrieve usages for.",
            "required": true,
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "period",
            "in": "query",
            "description": "Period to get",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/getMultipleUsagesResponse" },
          "default": { "$ref": "#/components/responses/getMultipleUsagesResponse" }
        }
      }
    },
    "/v1/admin/usages/{id}/history": {
      "get": {
        "operationId": "listUsageHistory",
        "description": "Get usage history",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Usage type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "invocation_timeout",
                "invocation_calls",
                "storage_count",
                "bot_count",
                "knowledgebase_vector_storage",
                "workspace_ratelimit",
                "table_row_count",
                "workspace_member_count",
                "integrations_owned_count",
                "ai_spend",
                "openai_spend",
                "bing_search_spend",
                "always_alive"
              ]
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of a bot or a workspace, depending on the \"type\" parameter",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/listUsageHistoryResponse" },
          "default": { "$ref": "#/components/responses/listUsageHistoryResponse" }
        }
      }
    },
    "/v1/admin/usages/{id}/activity": {
      "get": {
        "operationId": "listUsageActivity",
        "description": "List the usage activity for a given usage type and ID. The most recent activity is listed first.",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Usage type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "invocation_timeout",
                "invocation_calls",
                "storage_count",
                "bot_count",
                "knowledgebase_vector_storage",
                "workspace_ratelimit",
                "table_row_count",
                "workspace_member_count",
                "integrations_owned_count",
                "ai_spend",
                "openai_spend",
                "bing_search_spend",
                "always_alive"
              ]
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of a bot or a workspace, depending on the \"type\" parameter",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "timestampFrom",
            "in": "query",
            "description": "Timestamp from (inclusive)",
            "schema": { "type": "string" }
          },
          {
            "name": "timestampUntil",
            "in": "query",
            "description": "Timestamp until (exclusive)",
            "schema": { "type": "string" }
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "Provide the `meta.nextToken` value provided in the last API response to retrieve the next page of results",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/listUsageActivityResponse" },
          "default": { "$ref": "#/components/responses/listUsageActivityResponse" }
        }
      }
    },
    "/v1/admin/usages/{id}/daily-activity": {
      "get": {
        "operationId": "listUsageActivityDaily",
        "description": "List the aggregate daily usage activity (aggregate) for a given usage type and ID. The most recent activity is listed first.",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Usage type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "invocation_timeout",
                "invocation_calls",
                "storage_count",
                "bot_count",
                "knowledgebase_vector_storage",
                "workspace_ratelimit",
                "table_row_count",
                "workspace_member_count",
                "integrations_owned_count",
                "ai_spend",
                "openai_spend",
                "bing_search_spend",
                "always_alive"
              ]
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of a bot or a workspace, depending on the \"type\" parameter",
            "required": true,
            "schema": { "type": "string" }
          },
          { "name": "dateFrom", "in": "query", "description": "Date from (inclusive)", "schema": { "type": "string" } },
          {
            "name": "dateUntil",
            "in": "query",
            "description": "Date until (exclusive)",
            "schema": { "type": "string" }
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "Provide the `meta.nextToken` value provided in the last API response to retrieve the next page of results",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/listUsageActivityDailyResponse" },
          "default": { "$ref": "#/components/responses/listUsageActivityDailyResponse" }
        }
      }
    },
    "/v1/admin/quotas/ai-spend": {
      "put": {
        "operationId": "changeAISpendQuota",
        "description": "Change AI Spend quota",
        "parameters": [],
        "responses": {
          "200": { "$ref": "#/components/responses/changeAISpendQuotaResponse" },
          "default": { "$ref": "#/components/responses/changeAISpendQuotaResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/changeAISpendQuotaBody" }
      }
    },
    "/v1/admin/activities": {
      "get": {
        "operationId": "listActivities",
        "description": "List activities of a task",
        "parameters": [
          {
            "name": "nextToken",
            "in": "query",
            "description": "Provide the `meta.nextToken` value provided in the last API response to retrieve the next page of results",
            "schema": { "type": "string" }
          },
          {
            "name": "taskId",
            "in": "query",
            "description": "ID of the task to list activities for",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "botId",
            "in": "query",
            "description": "ID of the bot to list activities for",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/listActivitiesResponse" },
          "default": { "$ref": "#/components/responses/listActivitiesResponse" }
        }
      }
    },
    "/v1/admin/introspect": {
      "post": {
        "operationId": "introspect",
        "description": "Introspect the API",
        "parameters": [],
        "responses": {
          "200": { "$ref": "#/components/responses/introspectResponse" },
          "default": { "$ref": "#/components/responses/introspectResponse" }
        },
        "requestBody": { "$ref": "#/components/requestBodies/introspectBody" }
      }
    }
  },
  "components": {
    "schemas": {
      "Bot": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "minLength": 28, "maxLength": 36, "description": "Id of the [Bot](#schema_bot)" },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date of the [Bot](#schema_bot) in ISO 8601 format"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Updating date of the [Bot](#schema_bot) in ISO 8601 format"
          },
          "signingSecret": {
            "type": "string",
            "maxLength": 2000,
            "description": "Signing secret of the [Bot](#schema_bot)"
          },
          "integrations": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "enabled": { "type": "boolean" },
                "name": {
                  "type": "string",
                  "maxLength": 200,
                  "description": "Name of the [Integration](#schema_integration)"
                },
                "version": {
                  "type": "string",
                  "maxLength": 200,
                  "description": "Version of the [Integration](#schema_integration)"
                },
                "webhookUrl": { "type": "string", "maxLength": 2000 },
                "webhookId": { "type": "string", "maxLength": 200 },
                "identifier": { "type": "string", "maxLength": 2000 },
                "configurationType": { "type": "string", "maxLength": 200, "nullable": true },
                "configuration": { "type": "object", "additionalProperties": true },
                "status": {
                  "type": "string",
                  "enum": [
                    "registration_pending",
                    "registered",
                    "registration_failed",
                    "unregistration_pending",
                    "unregistered",
                    "unregistration_failed"
                  ]
                },
                "statusReason": { "type": "string", "maxLength": 2000, "nullable": true },
                "id": {
                  "type": "string",
                  "minLength": 28,
                  "maxLength": 36,
                  "description": "ID of the [Integration](#schema_integration)"
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Creation date of the [Integration](#schema_integration) in ISO 8601 format"
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Updating date of the [Integration](#schema_integration) in ISO 8601 format"
                },
                "title": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 64,
                  "description": "Title of the integration. This is the name that will be displayed in the UI"
                },
                "description": {
                  "type": "string",
                  "maxLength": 256,
                  "description": "Description of the integration. This is the description that will be displayed in the UI"
                },
                "iconUrl": {
                  "type": "string",
                  "description": "URL of the icon of the integration. This is the icon that will be displayed in the UI"
                },
                "public": {
                  "type": "boolean",
                  "description": "Idicates if the integration is public. Public integrations are available to all and cannot be updated without creating a new version."
                },
                "verificationStatus": {
                  "type": "string",
                  "enum": ["unapproved", "pending", "approved", "rejected"],
                  "description": "Status of the integration version verification"
                }
              },
              "required": [
                "enabled",
                "name",
                "version",
                "webhookUrl",
                "webhookId",
                "configurationType",
                "configuration",
                "status",
                "statusReason",
                "id",
                "createdAt",
                "updatedAt",
                "title",
                "description",
                "iconUrl",
                "public",
                "verificationStatus"
              ],
              "additionalProperties": false
            },
            "description": "A mapping of integrations to their configuration"
          },
          "user": {
            "type": "object",
            "properties": {
              "tags": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                    "description": { "type": "string", "maxLength": 256, "description": "Description of the tag" }
                  },
                  "description": "Definition of a tag that can be provided on the object",
                  "additionalProperties": false
                }
              }
            },
            "required": ["tags"],
            "description": "User object configuration",
            "additionalProperties": false
          },
          "conversation": {
            "type": "object",
            "properties": {
              "tags": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                    "description": { "type": "string", "maxLength": 256, "description": "Description of the tag" }
                  },
                  "description": "Definition of a tag that can be provided on the object",
                  "additionalProperties": false
                }
              }
            },
            "required": ["tags"],
            "description": "Conversation object configuration",
            "additionalProperties": false
          },
          "message": {
            "type": "object",
            "properties": {
              "tags": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                    "description": { "type": "string", "maxLength": 256, "description": "Description of the tag" }
                  },
                  "description": "Definition of a tag that can be provided on the object",
                  "additionalProperties": false
                }
              }
            },
            "required": ["tags"],
            "description": "Message object configuration",
            "additionalProperties": false
          },
          "states": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["conversation", "user", "bot", "task"],
                  "description": "Type of the [State](#schema_state) (`conversation`, `user`, `bot` or `task`)"
                },
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "description": "Schema of the [State](#schema_state) in the `JSON schema` format. This `JSON schema` is going to be used for validating the state data."
                },
                "expiry": {
                  "type": "number",
                  "minimum": 1,
                  "description": "Expiry of the [State](#schema_state) in milliseconds. The state will expire if it is idle for the configured value. By default, a state doesn't expire."
                }
              },
              "required": ["type", "schema"],
              "additionalProperties": false
            },
            "description": "A mapping of states to their definition"
          },
          "configuration": {
            "type": "object",
            "properties": {
              "data": { "type": "object", "additionalProperties": true, "description": "Configuration data" },
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "description": "Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`."
              }
            },
            "required": ["data", "schema"],
            "description": "Configuration of the bot",
            "additionalProperties": false
          },
          "events": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "title": { "type": "string", "maxLength": 64, "description": "Title of the event" },
                "description": { "type": "string", "maxLength": 256, "description": "Description of the event" },
                "schema": { "type": "object", "additionalProperties": true }
              },
              "required": ["schema"],
              "description": "Event Definition",
              "additionalProperties": false
            },
            "description": "Events definition"
          },
          "recurringEvents": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "schedule": {
                  "type": "object",
                  "properties": { "cron": { "type": "string", "maxLength": 200 } },
                  "required": ["cron"],
                  "additionalProperties": false
                },
                "type": { "type": "string", "maxLength": 200 },
                "payload": { "type": "object", "additionalProperties": true },
                "failedAttempts": {
                  "type": "number",
                  "description": "The number of times the recurring event failed to run. This counter resets once the recurring event runs successfully."
                },
                "lastFailureReason": {
                  "type": "string",
                  "maxLength": 2000,
                  "description": "The reason why the recurring event failed to run in the last attempt.",
                  "nullable": true
                }
              },
              "required": ["schedule", "type", "payload", "failedAttempts", "lastFailureReason"],
              "additionalProperties": false
            },
            "description": "Recurring events"
          },
          "subscriptions": {
            "type": "object",
            "properties": {
              "events": {
                "type": "object",
                "additionalProperties": { "type": "object", "additionalProperties": false },
                "nullable": true,
                "description": "Events that the bot is currently subscribed on (ex: \"slack:reactionAdded\"). If null, the bot is subscribed to all events."
              }
            },
            "required": ["events"],
            "description": "Subscriptions of the bot",
            "additionalProperties": false
          },
          "actions": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "title": { "type": "string", "maxLength": 64, "description": "Title of the action" },
                "description": { "type": "string", "maxLength": 256, "description": "Description of the action" },
                "billable": { "type": "boolean" },
                "cacheable": { "type": "boolean" },
                "input": {
                  "type": "object",
                  "properties": { "schema": { "type": "object", "additionalProperties": true } },
                  "required": ["schema"],
                  "additionalProperties": false
                },
                "output": {
                  "type": "object",
                  "properties": { "schema": { "type": "object", "additionalProperties": true } },
                  "required": ["schema"],
                  "additionalProperties": false
                }
              },
              "required": ["input", "output"],
              "description": "Action definition",
              "additionalProperties": false
            },
            "description": "Actions definition"
          },
          "tags": {
            "type": "object",
            "additionalProperties": { "type": "string" },
            "description": "Tags of [Bot](#schema_bot)"
          },
          "name": { "type": "string", "description": "Name of the [Bot](#schema_bot)" },
          "deployedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last deployment date of the [Bot](#schema_bot) in the ISO 8601 format"
          },
          "dev": {
            "type": "boolean",
            "description": "Indicates if the [Bot](#schema_bot) is a development bot; Development bots run locally and can install dev integrations"
          },
          "createdBy": { "type": "string", "description": "Id of the user that created the bot" },
          "alwaysAlive": {
            "type": "boolean",
            "description": "Indicates if the [Bot](#schema_bot) should be in always alive mode"
          },
          "status": { "type": "string", "enum": ["active", "deploying"], "description": "Status of the bot" },
          "medias": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "url": { "type": "string", "description": "URL of the media file" },
                "name": { "type": "string", "description": "Name of the media file" }
              },
              "required": ["url", "name"]
            },
            "description": "Media files associated with the [Bot](#schema_bot)"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "signingSecret",
          "integrations",
          "user",
          "conversation",
          "message",
          "states",
          "configuration",
          "events",
          "recurringEvents",
          "subscriptions",
          "actions",
          "tags",
          "name",
          "dev",
          "alwaysAlive",
          "status",
          "medias"
        ],
        "additionalProperties": false
      },
      "Integration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "ID of the [Integration](#schema_integration)"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date of the [Integration](#schema_integration) in ISO 8601 format"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Updating date of the [Integration](#schema_integration) in ISO 8601 format"
          },
          "identifier": {
            "type": "object",
            "properties": {
              "fallbackHandlerScript": {
                "type": "string",
                "maxLength": 2000,
                "description": "VRL Script of the [Integration](#schema_integration) to handle incoming requests for a request that doesn't have an identifier"
              },
              "extractScript": {
                "type": "string",
                "maxLength": 2000,
                "description": "VRL Script of the [Integration](#schema_integration) to extract the identifier from an incoming webhook often use for OAuth"
              }
            },
            "description": "Global identifier configuration of the [Integration](#schema_integration)",
            "additionalProperties": false
          },
          "sandbox": {
            "type": "object",
            "properties": {
              "identifierExtractScript": {
                "type": "string",
                "maxLength": 2000,
                "description": "VRL Script of the [Integration](#schema_integration) to extract the identifier from an incoming webhook used specifically for the sandbox"
              },
              "messageExtractScript": {
                "type": "string",
                "maxLength": 2000,
                "description": "VRL Script of the [Integration](#schema_integration) to extract the message from an incoming webhook used specifically for the sandbox"
              }
            },
            "additionalProperties": false
          },
          "url": {
            "type": "string",
            "maxLength": 2000,
            "description": "URL of the [Integration](#schema_integration)"
          },
          "name": {
            "type": "string",
            "maxLength": 200,
            "description": "Name of the [Integration](#schema_integration)"
          },
          "version": {
            "type": "string",
            "maxLength": 200,
            "description": "Version of the [Integration](#schema_integration)"
          },
          "interfaces": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "id": { "type": "string", "minLength": 28, "maxLength": 36, "description": "ID of the interface" },
                "name": { "type": "string", "maxLength": 200, "description": "Name of the interface" },
                "version": { "type": "string", "maxLength": 200, "description": "Version of the interface" },
                "entities": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": { "name": { "type": "string", "maxLength": 200 } },
                    "required": ["name"],
                    "additionalProperties": false
                  }
                },
                "actions": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": { "name": { "type": "string", "maxLength": 200 } },
                    "required": ["name"],
                    "additionalProperties": false
                  }
                },
                "events": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": { "name": { "type": "string", "maxLength": 200 } },
                    "required": ["name"],
                    "additionalProperties": false
                  }
                },
                "channels": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": { "name": { "type": "string", "maxLength": 200 } },
                    "required": ["name"],
                    "additionalProperties": false
                  }
                }
              },
              "required": ["id", "name", "version", "entities", "actions", "events", "channels"],
              "additionalProperties": false
            }
          },
          "configuration": {
            "type": "object",
            "properties": {
              "title": { "type": "string", "maxLength": 64, "description": "Title of the configuration" },
              "description": { "type": "string", "maxLength": 256, "description": "Description of the configuration" },
              "identifier": {
                "type": "object",
                "properties": {
                  "linkTemplateScript": { "type": "string", "maxLength": 2000 },
                  "required": { "type": "boolean" }
                },
                "required": ["required"],
                "description": "Identifier configuration of the [Integration](#schema_integration)",
                "additionalProperties": false
              },
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "description": "Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`."
              }
            },
            "required": ["identifier", "schema"],
            "description": "Configuration definition",
            "additionalProperties": false
          },
          "configurations": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "title": { "type": "string", "maxLength": 64, "description": "Title of the configuration" },
                "description": {
                  "type": "string",
                  "maxLength": 256,
                  "description": "Description of the configuration"
                },
                "identifier": {
                  "type": "object",
                  "properties": {
                    "linkTemplateScript": { "type": "string", "maxLength": 2000 },
                    "required": { "type": "boolean" }
                  },
                  "required": ["required"],
                  "description": "Identifier configuration of the [Integration](#schema_integration)",
                  "additionalProperties": false
                },
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "description": "Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`."
                }
              },
              "required": ["identifier", "schema"],
              "description": "Configuration definition",
              "additionalProperties": false
            }
          },
          "channels": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "title": { "type": "string", "maxLength": 64, "description": "Title of the channel" },
                "description": { "type": "string", "maxLength": 256, "description": "Description of the channel" },
                "messages": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": { "schema": { "type": "object", "additionalProperties": true } },
                    "required": ["schema"],
                    "description": "Message definition",
                    "additionalProperties": false
                  }
                },
                "conversation": {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                          "description": { "type": "string", "maxLength": 256, "description": "Description of the tag" }
                        },
                        "description": "Definition of a tag that can be provided on the object",
                        "additionalProperties": false
                      }
                    },
                    "creation": {
                      "type": "object",
                      "properties": {
                        "enabled": { "type": "boolean", "description": "Enable conversation creation" },
                        "requiredTags": {
                          "type": "array",
                          "items": { "type": "string" },
                          "description": "The list of tags that are required to be specified when calling the API directly to create a conversation."
                        }
                      },
                      "required": ["enabled", "requiredTags"],
                      "description": "The conversation creation setting determines how to create a conversation through the API directly. The integration will have to implement the `createConversation` functionality to support this setting.",
                      "additionalProperties": false
                    }
                  },
                  "required": ["tags", "creation"],
                  "description": "Conversation object configuration",
                  "additionalProperties": false
                },
                "message": {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                          "description": { "type": "string", "maxLength": 256, "description": "Description of the tag" }
                        },
                        "description": "Definition of a tag that can be provided on the object",
                        "additionalProperties": false
                      }
                    }
                  },
                  "required": ["tags"],
                  "description": "Message object configuration",
                  "additionalProperties": false
                }
              },
              "required": ["messages", "conversation", "message"],
              "description": "Channel definition",
              "additionalProperties": false
            }
          },
          "states": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["conversation", "user", "integration"],
                  "description": "Type of the [State](#schema_state) (`conversation`, `user` or `integration`)"
                },
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "description": "Schema of the [State](#schema_state) in the `JSON schema` format. This `JSON schema` is going to be used for validating the state data."
                }
              },
              "required": ["type", "schema"],
              "description": "State definition",
              "additionalProperties": false
            }
          },
          "events": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "title": { "type": "string", "maxLength": 64, "description": "Title of the event" },
                "description": { "type": "string", "maxLength": 256, "description": "Description of the event" },
                "schema": { "type": "object", "additionalProperties": true }
              },
              "required": ["schema"],
              "description": "Event Definition",
              "additionalProperties": false
            }
          },
          "actions": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "title": { "type": "string", "maxLength": 64, "description": "Title of the action" },
                "description": { "type": "string", "maxLength": 256, "description": "Description of the action" },
                "billable": { "type": "boolean" },
                "cacheable": { "type": "boolean" },
                "input": {
                  "type": "object",
                  "properties": { "schema": { "type": "object", "additionalProperties": true } },
                  "required": ["schema"],
                  "additionalProperties": false
                },
                "output": {
                  "type": "object",
                  "properties": { "schema": { "type": "object", "additionalProperties": true } },
                  "required": ["schema"],
                  "additionalProperties": false
                }
              },
              "required": ["input", "output"],
              "description": "Action definition",
              "additionalProperties": false
            }
          },
          "user": {
            "type": "object",
            "properties": {
              "tags": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                    "description": { "type": "string", "maxLength": 256, "description": "Description of the tag" }
                  },
                  "description": "Definition of a tag that can be provided on the object",
                  "additionalProperties": false
                }
              },
              "creation": {
                "type": "object",
                "properties": {
                  "enabled": { "type": "boolean", "description": "Enable user creation" },
                  "requiredTags": {
                    "type": "array",
                    "items": { "type": "string" },
                    "description": "The list of tags that are required to be specified when calling the API directly to create a user."
                  }
                },
                "required": ["enabled", "requiredTags"],
                "description": "The user creation setting determines how to create a user through the API directly. The integration will have to implement the `createUser` functionality to support this setting.",
                "additionalProperties": false
              }
            },
            "required": ["tags", "creation"],
            "description": "User object configuration",
            "additionalProperties": false
          },
          "entities": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "title": { "type": "string", "maxLength": 64, "description": "Title of the entity" },
                "description": { "type": "string", "maxLength": 256, "description": "Description of the entity" },
                "schema": { "type": "object", "additionalProperties": true }
              },
              "required": ["schema"],
              "description": "Entity definition",
              "additionalProperties": false
            }
          },
          "dev": {
            "type": "boolean",
            "description": "Indicates if the integration is a development integration; Dev integrations run locally"
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "description": "Title of the integration. This is the name that will be displayed in the UI"
          },
          "description": {
            "type": "string",
            "maxLength": 256,
            "description": "Description of the integration. This is the description that will be displayed in the UI"
          },
          "iconUrl": {
            "type": "string",
            "description": "URL of the icon of the integration. This is the icon that will be displayed in the UI"
          },
          "readmeUrl": {
            "type": "string",
            "description": "URL of the readme of the integration. This is the readme that will be displayed in the UI"
          },
          "public": {
            "type": "boolean",
            "description": "Idicates if the integration is public. Public integrations are available to all and cannot be updated without creating a new version."
          },
          "verificationStatus": {
            "type": "string",
            "enum": ["unapproved", "pending", "approved", "rejected"],
            "description": "Status of the integration version verification"
          },
          "secrets": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Secrets are integration-wide values available in the code via environment variables formatted with a SECRET_ prefix followed by your secret name. A secret name must respect SCREAMING_SNAKE casing."
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "identifier",
          "url",
          "name",
          "version",
          "interfaces",
          "configuration",
          "configurations",
          "channels",
          "states",
          "events",
          "actions",
          "user",
          "entities",
          "dev",
          "title",
          "description",
          "iconUrl",
          "readmeUrl",
          "public",
          "verificationStatus",
          "secrets"
        ],
        "additionalProperties": false
      },
      "Interface": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "ID of the [Interface](#schema_interface)"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date of the [Interface](#schema_interface) in ISO 8601 format"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Updating date of the [Interface](#schema_interface) in ISO 8601 format"
          },
          "name": { "type": "string", "maxLength": 200, "description": "Name of the [Interface](#schema_interface)" },
          "version": {
            "type": "string",
            "maxLength": 200,
            "description": "Version of the [Interface](#schema_interface)"
          },
          "entities": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "title": { "type": "string", "maxLength": 64, "description": "Title of the entity" },
                "description": { "type": "string", "maxLength": 256, "description": "Description of the entity" },
                "schema": { "type": "object", "additionalProperties": true }
              },
              "required": ["schema"],
              "description": "Entity definition",
              "additionalProperties": false
            }
          },
          "events": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "title": { "type": "string", "maxLength": 64, "description": "Title of the event" },
                "description": { "type": "string", "maxLength": 256, "description": "Description of the event" },
                "schema": { "type": "object", "additionalProperties": true }
              },
              "required": ["schema"],
              "description": "Event Definition",
              "additionalProperties": false
            }
          },
          "actions": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "title": { "type": "string", "maxLength": 64, "description": "Title of the action" },
                "description": { "type": "string", "maxLength": 256, "description": "Description of the action" },
                "billable": { "type": "boolean" },
                "cacheable": { "type": "boolean" },
                "input": {
                  "type": "object",
                  "properties": { "schema": { "type": "object", "additionalProperties": true } },
                  "required": ["schema"],
                  "additionalProperties": false
                },
                "output": {
                  "type": "object",
                  "properties": { "schema": { "type": "object", "additionalProperties": true } },
                  "required": ["schema"],
                  "additionalProperties": false
                }
              },
              "required": ["input", "output"],
              "description": "Action definition",
              "additionalProperties": false
            }
          },
          "channels": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "title": { "type": "string", "maxLength": 64, "description": "Title of the channel" },
                "description": { "type": "string", "maxLength": 256, "description": "Description of the channel" },
                "messages": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": { "schema": { "type": "object", "additionalProperties": true } },
                    "required": ["schema"],
                    "description": "Message definition",
                    "additionalProperties": false
                  }
                }
              },
              "required": ["messages"],
              "additionalProperties": false
            }
          },
          "nameTemplate": {
            "type": "object",
            "properties": {
              "script": { "type": "string", "maxLength": 2000 },
              "language": { "type": "string", "maxLength": 200 }
            },
            "required": ["script", "language"],
            "description": "Template string optionaly used at build time by integrations implementing this interface to pick a name for actions and events.",
            "additionalProperties": false
          }
        },
        "required": ["id", "createdAt", "updatedAt", "name", "version", "entities", "events", "actions", "channels"],
        "additionalProperties": false
      },
      "Plugin": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "ID of the [Plugin](#schema_plugin)"
          },
          "name": { "type": "string", "maxLength": 200, "description": "Name of the [Plugin](#schema_plugin)" },
          "version": { "type": "string", "maxLength": 200, "description": "Version of the [Plugin](#schema_plugin)" },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date of the [Plugin](#schema_plugin) in ISO 8601 format"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Updating date of the [Plugin](#schema_plugin) in ISO 8601 format"
          },
          "configuration": {
            "type": "object",
            "properties": {
              "title": { "type": "string", "maxLength": 64, "description": "Title of the configuration" },
              "description": { "type": "string", "maxLength": 256, "description": "Description of the configuration" },
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "description": "Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`."
              }
            },
            "required": ["schema"],
            "description": "Configuration definition",
            "additionalProperties": false
          },
          "states": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["conversation", "user", "bot", "task"],
                  "description": "Type of the [State](#schema_state) (`conversation`, `user`, `bot` or `task`)"
                },
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "description": "Schema of the [State](#schema_state) in the `JSON schema` format. This `JSON schema` is going to be used for validating the state data."
                },
                "expiry": {
                  "type": "number",
                  "minimum": 1,
                  "description": "Expiry of the [State](#schema_state) in milliseconds. The state will expire if it is idle for the configured value. By default, a state doesn't expire."
                }
              },
              "required": ["type", "schema"],
              "additionalProperties": false
            }
          },
          "events": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "title": { "type": "string", "maxLength": 64, "description": "Title of the event" },
                "description": { "type": "string", "maxLength": 256, "description": "Description of the event" },
                "schema": { "type": "object", "additionalProperties": true }
              },
              "required": ["schema"],
              "description": "Event Definition",
              "additionalProperties": false
            }
          },
          "actions": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "title": { "type": "string", "maxLength": 64, "description": "Title of the action" },
                "description": { "type": "string", "maxLength": 256, "description": "Description of the action" },
                "billable": { "type": "boolean" },
                "cacheable": { "type": "boolean" },
                "input": {
                  "type": "object",
                  "properties": { "schema": { "type": "object", "additionalProperties": true } },
                  "required": ["schema"],
                  "additionalProperties": false
                },
                "output": {
                  "type": "object",
                  "properties": { "schema": { "type": "object", "additionalProperties": true } },
                  "required": ["schema"],
                  "additionalProperties": false
                }
              },
              "required": ["input", "output"],
              "description": "Action definition",
              "additionalProperties": false
            }
          },
          "dependencies": {
            "type": "object",
            "properties": {
              "interfaces": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "string", "minLength": 28, "maxLength": 36 },
                    "name": { "type": "string", "maxLength": 200 },
                    "version": { "type": "string", "maxLength": 200 }
                  },
                  "required": ["id", "name", "version"],
                  "additionalProperties": false
                }
              },
              "integrations": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "string", "minLength": 28, "maxLength": 36 },
                    "name": { "type": "string", "maxLength": 200 },
                    "version": { "type": "string", "maxLength": 200 }
                  },
                  "required": ["id", "name", "version"],
                  "additionalProperties": false
                }
              }
            },
            "required": ["interfaces", "integrations"],
            "additionalProperties": false
          },
          "user": {
            "type": "object",
            "properties": {
              "tags": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                    "description": { "type": "string", "maxLength": 256, "description": "Description of the tag" }
                  },
                  "description": "Definition of a tag that can be provided on the object",
                  "additionalProperties": false
                }
              }
            },
            "required": ["tags"],
            "description": "User object configuration",
            "additionalProperties": false
          },
          "conversation": {
            "type": "object",
            "properties": {
              "tags": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                    "description": { "type": "string", "maxLength": 256, "description": "Description of the tag" }
                  },
                  "description": "Definition of a tag that can be provided on the object",
                  "additionalProperties": false
                }
              }
            },
            "required": ["tags"],
            "description": "Conversation object configuration",
            "additionalProperties": false
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "description": "Title of the plugin. This is the name that will be displayed in the UI"
          },
          "description": {
            "type": "string",
            "maxLength": 256,
            "description": "Description of the plugin. This is the description that will be displayed in the UI"
          },
          "iconUrl": {
            "type": "string",
            "description": "URL of the icon of the plugin. This is the icon that will be displayed in the UI"
          },
          "readmeUrl": {
            "type": "string",
            "description": "URL of the readme of the plugin. This is the readme that will be displayed in the UI"
          }
        },
        "required": [
          "id",
          "name",
          "version",
          "createdAt",
          "updatedAt",
          "configuration",
          "states",
          "events",
          "actions",
          "dependencies",
          "user",
          "conversation",
          "title",
          "description",
          "iconUrl",
          "readmeUrl"
        ],
        "additionalProperties": false
      },
      "Workspace": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "ownerId": { "type": "string" },
          "createdAt": { "type": "string" },
          "updatedAt": { "type": "string" },
          "botCount": { "type": "number" },
          "billingVersion": { "type": "string", "enum": ["v1", "v2", "v3"] },
          "plan": { "type": "string", "enum": ["community", "team", "enterprise", "plus"] },
          "blocked": { "type": "boolean" },
          "spendingLimit": { "type": "number" },
          "about": { "default": "", "type": "string" },
          "profilePicture": { "default": "", "type": "string" },
          "contactEmail": { "default": "", "type": "string" },
          "website": { "default": "", "type": "string" },
          "socialAccounts": { "default": [], "type": "array", "items": { "type": "string" } },
          "isPublic": { "type": "boolean" },
          "handle": { "default": "", "type": "string" }
        },
        "required": [
          "id",
          "name",
          "ownerId",
          "createdAt",
          "updatedAt",
          "botCount",
          "billingVersion",
          "plan",
          "blocked",
          "spendingLimit"
        ],
        "additionalProperties": false
      },
      "WorkspaceMember": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "userId": { "type": "string", "format": "uuid" },
          "email": { "type": "string" },
          "createdAt": { "type": "string" },
          "role": { "type": "string", "enum": ["viewer", "billing", "developer", "manager", "administrator", "owner"] },
          "profilePicture": { "type": "string" },
          "displayName": { "type": "string", "maxLength": 100 }
        },
        "required": ["id", "email", "createdAt", "role"],
        "additionalProperties": false
      },
      "Account": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "email": { "type": "string" },
          "displayName": { "type": "string", "maxLength": 100 },
          "emailVerified": { "type": "boolean" },
          "profilePicture": { "type": "string" },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date of the [Account](#schema_account) in ISO 8601 format"
          }
        },
        "required": ["id", "email", "emailVerified", "createdAt"],
        "additionalProperties": false
      },
      "Usage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the usage that it is linked to. It can either be a workspace id or a bot id"
          },
          "period": { "type": "string", "description": "Period of the quota that it is applied to" },
          "value": { "type": "number", "description": "Value of the current usage" },
          "quota": { "type": "number", "description": "Quota of the current usage" },
          "type": {
            "type": "string",
            "enum": [
              "invocation_timeout",
              "invocation_calls",
              "storage_count",
              "bot_count",
              "knowledgebase_vector_storage",
              "workspace_ratelimit",
              "table_row_count",
              "workspace_member_count",
              "integrations_owned_count",
              "ai_spend",
              "openai_spend",
              "bing_search_spend",
              "always_alive"
            ],
            "description": "Usage type that can be used"
          }
        },
        "required": ["id", "period", "value", "quota", "type"],
        "additionalProperties": false
      },
      "Issue": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "code": { "type": "string" },
          "createdAt": { "type": "string", "format": "date-time" },
          "lastSeenAt": { "type": "string", "format": "date-time" },
          "title": { "type": "string" },
          "description": { "type": "string" },
          "groupedData": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": { "raw": { "type": "string" }, "pretty": { "type": "string" } },
              "required": ["raw"],
              "additionalProperties": false
            }
          },
          "eventsCount": { "type": "number" },
          "category": { "type": "string", "enum": ["user_code", "limits", "configuration", "other"] },
          "resolutionLink": { "type": "string", "nullable": true }
        },
        "required": [
          "id",
          "code",
          "createdAt",
          "lastSeenAt",
          "title",
          "description",
          "groupedData",
          "eventsCount",
          "category",
          "resolutionLink"
        ],
        "additionalProperties": false
      },
      "IssueEvent": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "createdAt": { "type": "string", "format": "date-time" },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": { "raw": { "type": "string" }, "pretty": { "type": "string" } },
              "required": ["raw"],
              "additionalProperties": false
            }
          }
        },
        "required": ["id", "createdAt", "data"],
        "additionalProperties": false
      },
      "Activity": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "description": { "type": "string" },
          "taskId": { "type": "string" },
          "category": {
            "type": "string",
            "enum": [
              "unknown",
              "capture",
              "bot_message",
              "user_message",
              "agent_message",
              "event",
              "action",
              "task_status",
              "subtask_status",
              "exception"
            ]
          },
          "data": { "type": "object", "additionalProperties": true },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date of the activity in ISO 8601 format"
          }
        },
        "required": ["id", "description", "taskId", "category", "data", "createdAt"],
        "additionalProperties": false
      },
      "Version": {
        "type": "object",
        "properties": { "id": { "type": "string" }, "name": { "type": "string" }, "description": { "type": "string" } },
        "required": ["id", "name"],
        "additionalProperties": false
      },
      "User": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "minLength": 28, "maxLength": 36, "description": "Id of the [User](#schema_user)" },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date of the [User](#schema_user) in ISO 8601 format"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Updating date of the [User](#schema_user) in ISO 8601 format"
          },
          "tags": {
            "type": "object",
            "additionalProperties": { "type": "string" },
            "description": "Set of [Tags](/docs/developers/concepts/tags) that you can attach to a [User](#schema_user). The set of [Tags](/docs/developers/concepts/tags) available on a [User](#schema_user) is restricted by the list of [Tags](/docs/developers/concepts/tags) defined previously by the [Bot](#schema_bot). Individual keys can be unset by posting an empty value to them."
          },
          "name": { "type": "string", "maxLength": 200, "description": "Name of the [User](#schema_user)" },
          "pictureUrl": {
            "type": "string",
            "maxLength": 40000,
            "description": "Picture URL of the [User](#schema_user)"
          }
        },
        "required": ["id", "createdAt", "updatedAt", "tags"],
        "description": "The user object represents someone interacting with the bot within a specific integration. The same person interacting with a bot in slack and messenger will be represented with two different users.",
        "additionalProperties": false
      },
      "Conversation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "Id of the [Conversation](#schema_conversation)"
          },
          "currentTaskId": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "Id of the current [Task](#schema_task)"
          },
          "currentWorkflowId": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "Id of the current [Workflow](#schema_workflow)"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date of the [Conversation](#schema_conversation) in ISO 8601 format"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Updating date of the [Conversation](#schema_conversation) in ISO 8601 format"
          },
          "channel": {
            "type": "string",
            "description": "Name of the channel where the [Conversation](#schema_conversation) is happening"
          },
          "integration": {
            "type": "string",
            "description": "Name of the integration that created the [Conversation](#schema_conversation)"
          },
          "tags": {
            "type": "object",
            "additionalProperties": { "type": "string" },
            "description": "Set of [Tags](/docs/developers/concepts/tags) that you can attach to a [Conversation](#schema_conversation). The set of [Tags](/docs/developers/concepts/tags) available on a [Conversation](#schema_conversation) is restricted by the list of [Tags](/docs/developers/concepts/tags) defined previously by the [Bot](#schema_bot). Individual keys can be unset by posting an empty value to them."
          }
        },
        "required": ["id", "createdAt", "updatedAt", "channel", "integration", "tags"],
        "description": "The [Conversation](#schema_conversation) object represents an exchange of messages between one or more users. A [Conversation](#schema_conversation) is always linked to an integration's channels. For example, a Slack channel represents a conversation.",
        "additionalProperties": false
      },
      "Event": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "Id of the [Event](#schema_event)"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date of the [Event](#schema_event) in ISO 8601 format"
          },
          "type": { "type": "string", "maxLength": 200, "description": "Type of the [Event](#schema_event)." },
          "payload": {
            "type": "object",
            "additionalProperties": true,
            "description": "Payload is the content of the event defined by the integration installed on your bot or one of the default events created by our api."
          },
          "conversationId": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "ID of the [Conversation](#schema_conversation) to link the event to."
          },
          "userId": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "ID of the [User](#schema_user) to link the event to."
          },
          "messageId": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "ID of the [Message](#schema_message) to link the event to."
          },
          "status": { "type": "string", "enum": ["pending", "processed", "ignored", "failed", "scheduled"] },
          "failureReason": {
            "type": "string",
            "maxLength": 2000,
            "nullable": true,
            "description": "Reason why the event failed to be processed"
          }
        },
        "required": ["id", "createdAt", "type", "payload", "status", "failureReason"],
        "description": "The event object represents an action or an occurrence.",
        "additionalProperties": false
      },
      "Message": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "Id of the [Message](#schema_message)"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date of the [Message](#schema_message) in ISO 8601 format"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Update date of the [Message](#schema_message) in ISO 8601 format"
          },
          "type": {
            "type": "string",
            "maxLength": 200,
            "description": "Type of the [Message](#schema_message) represents the resource type that the message is related to"
          },
          "payload": {
            "type": "object",
            "additionalProperties": true,
            "description": "Payload is the content type of the message. Accepted payload options: Text, Image, Choice, Dropdown, Card, Carousel, File, Audio, Video, Location"
          },
          "direction": {
            "type": "string",
            "enum": ["incoming", "outgoing"],
            "description": "Direction of the message (`incoming` or `outgoing`)."
          },
          "userId": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "ID of the [User](#schema_user)"
          },
          "conversationId": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "ID of the [Conversation](#schema_conversation)"
          },
          "tags": {
            "type": "object",
            "additionalProperties": { "type": "string" },
            "description": "Set of [Tags](/docs/developers/concepts/tags) that you can attach to a [Conversation](#schema_conversation). The set of [Tags](/docs/developers/concepts/tags) available on a [Conversation](#schema_conversation) is restricted by the list of [Tags](/docs/developers/concepts/tags) defined previously by the [Bot](#schema_bot). Individual keys can be unset by posting an empty value to them."
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "type",
          "payload",
          "direction",
          "userId",
          "conversationId",
          "tags"
        ],
        "description": "The Message object represents a message in a [Conversation](#schema_conversation) for a specific [User](#schema_user).",
        "additionalProperties": false
      },
      "State": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "Id of the [State](#schema_state)"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date of the [State](#schema_state) in ISO 8601 format"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Updating date of the [State](#schema_state) in ISO 8601 format"
          },
          "botId": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "Id of the [Bot](#schema_bot)"
          },
          "conversationId": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "Id of the [Conversation](#schema_conversation)"
          },
          "userId": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "Id of the [User](#schema_user)"
          },
          "name": {
            "type": "string",
            "maxLength": 200,
            "description": "Name of the [State](#schema_state) which is declared inside the bot definition"
          },
          "type": {
            "type": "string",
            "enum": ["conversation", "user", "bot", "task", "integration", "workflow"],
            "description": "Type of the [State](#schema_state) represents the resource type (`conversation`, `user`, `bot`, `task`, `integration` or `workflow`) that the state is related to"
          },
          "payload": {
            "type": "object",
            "additionalProperties": true,
            "description": "Payload is the content of the state defined by your bot."
          }
        },
        "required": ["id", "createdAt", "updatedAt", "botId", "name", "type", "payload"],
        "description": "The state object represents the current payload. A state is always linked to either a bot, a conversation or a user.",
        "additionalProperties": false
      },
      "Task": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "minLength": 28, "maxLength": 36, "description": "Id of the [Task](#schema_task)" },
          "title": { "type": "string", "maxLength": 64, "description": "Title describing the task" },
          "description": {
            "type": "string",
            "maxLength": 256,
            "description": "All the notes related to the execution of the current task"
          },
          "type": { "type": "string", "description": "Type of the task" },
          "data": { "type": "object", "additionalProperties": true, "description": "Content related to the task" },
          "status": {
            "type": "string",
            "enum": ["pending", "in_progress", "failed", "completed", "blocked", "paused", "timeout", "cancelled"],
            "description": "Status of the task"
          },
          "parentTaskId": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "Parent task id is the parent task that created this task"
          },
          "conversationId": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "Conversation id related to this task"
          },
          "userId": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "Specific user related to this task"
          },
          "timeoutAt": {
            "type": "string",
            "format": "date-time",
            "description": "The timeout date where the task should be failed in the ISO 8601 format"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date of the task in ISO 8601 format"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Updating date of the task in ISO 8601 format"
          },
          "failureReason": {
            "type": "string",
            "maxLength": 2000,
            "description": "If the task fails this is the reason behind it"
          },
          "tags": {
            "type": "object",
            "additionalProperties": { "type": "string" },
            "description": "Set of [Tags](/docs/developers/concepts/tags) that you can attach to a [Task](#schema_task). Individual keys can be unset by posting an empty value to them."
          }
        },
        "required": [
          "id",
          "title",
          "description",
          "type",
          "data",
          "status",
          "timeoutAt",
          "createdAt",
          "updatedAt",
          "tags"
        ],
        "description": "Task definition",
        "additionalProperties": false
      },
      "Workflow": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "Id of the [Workflow](#schema_workflow)"
          },
          "name": { "type": "string", "maxLength": 200, "description": "Name of the workflow" },
          "status": {
            "type": "string",
            "enum": ["pending", "in_progress", "failed", "completed", "listening", "paused", "timedout", "cancelled"],
            "description": "Status of the [Workflow](#schema_workflow)"
          },
          "input": {
            "type": "object",
            "additionalProperties": true,
            "description": "Input provided to the [Workflow](#schema_workflow)"
          },
          "output": {
            "type": "object",
            "additionalProperties": true,
            "description": "Data returned by the [Workflow](#schema_workflow) output"
          },
          "parentWorkflowId": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "Parent [Workflow](#schema_workflow) id is the parent [Workflow](#schema_workflow) that created this [Workflow](#schema_workflow)"
          },
          "conversationId": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "Conversation id related to this [Workflow](#schema_workflow)"
          },
          "userId": {
            "type": "string",
            "minLength": 28,
            "maxLength": 36,
            "description": "User id related to this [Workflow](#schema_workflow)"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date of the [Workflow](#schema_workflow) in ISO 8601 format"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Updating date of the [Workflow](#schema_workflow) in ISO 8601 format"
          },
          "completedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date when the [Workflow](#schema_workflow) completed in ISO 8601 format"
          },
          "failureReason": {
            "type": "string",
            "maxLength": 2000,
            "description": "If the [Workflow](#schema_workflow) fails this is the reason behind it"
          },
          "timeoutAt": {
            "type": "string",
            "format": "date-time",
            "description": "The timeout date when the [Workflow](#schema_workflow) will fail in the ISO 8601 format"
          },
          "tags": {
            "type": "object",
            "additionalProperties": { "type": "string" },
            "description": "Set of [Tags](/docs/developers/concepts/tags) that you can attach to a [Workflow](#schema_workflow). Individual keys can be unset by posting an empty value to them."
          }
        },
        "required": ["id", "name", "status", "input", "output", "createdAt", "updatedAt", "timeoutAt", "tags"],
        "description": "Workflow definition",
        "additionalProperties": false
      },
      "Table": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Unique identifier for the table" },
          "name": {
            "description": "Required. This name is used to identify your table.",
            "type": "string",
            "minLength": 1
          },
          "factor": {
            "default": 1,
            "type": "number",
            "minimum": 1,
            "maximum": 30,
            "description": "The 'factor' multiplies the row's data storage limit by 4KB and its quota count, but can only be set at table creation and not modified later. For instance, a factor of 2 increases storage to 8KB but counts as 2 rows in your quota. The default factor is 1."
          },
          "frozen": {
            "type": "boolean",
            "description": "A table designated as \"frozen\" is immutable in terms of its name and schema structure; modifications to its schema or a renaming operation are not permitted. The only action that can be taken on such a table is deletion. The schema established at the time of creation is locked in as the final structure. To implement any changes, the table must be duplicated with the desired alterations."
          },
          "schema": {
            "type": "object",
            "properties": {
              "$schema": { "type": "string" },
              "properties": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "type": { "type": "string", "enum": ["string", "number", "boolean", "object", "array", "null"] },
                    "format": { "type": "string", "enum": ["date-time"] },
                    "description": { "type": "string" },
                    "pattern": { "type": "string", "description": "String properties must match this pattern" },
                    "enum": {
                      "type": "array",
                      "items": { "type": "string" },
                      "description": "String properties must be one of these values"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": { "type": "string", "enum": ["string", "number", "boolean", "object", "array", "null"] }
                      },
                      "required": ["type"],
                      "additionalProperties": true,
                      "description": "Defines the shape of items in an array"
                    },
                    "nullable": { "default": true, "type": "boolean" },
                    "properties": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": ["string", "number", "boolean", "object", "array", "null"]
                          }
                        },
                        "required": ["type"],
                        "additionalProperties": true
                      }
                    },
                    "x-zui": {
                      "type": "object",
                      "properties": {
                        "index": { "type": "integer" },
                        "id": { "type": "string", "description": "[deprecated] ID of the column." },
                        "searchable": {
                          "type": "boolean",
                          "description": "Indicates if the column is vectorized and searchable."
                        },
                        "hidden": { "type": "boolean", "description": "Indicates if the field is hidden in the UI" },
                        "order": { "type": "number", "description": "Order of the column in the UI" },
                        "width": { "type": "number", "description": "Width of the column in the UI" },
                        "schemaId": { "type": "string", "description": "ID of the schema" },
                        "computed": {
                          "type": "object",
                          "properties": {
                            "action": { "type": "string", "enum": ["ai", "code", "workflow"] },
                            "dependencies": { "default": [], "type": "array", "items": { "type": "string" } },
                            "prompt": { "type": "string", "description": "Prompt when action is \"ai\"" },
                            "code": { "type": "string", "description": "Code to execute when action is \"code\"" },
                            "model": {
                              "default": "gpt-4o",
                              "type": "string",
                              "maxLength": 80,
                              "description": "Model to use when action is \"ai\""
                            },
                            "workflowId": {
                              "type": "string",
                              "maxLength": 20,
                              "description": "ID of Workflow to execute when action is \"workflow\""
                            },
                            "enabled": { "type": "boolean" }
                          },
                          "required": ["action"],
                          "additionalProperties": false
                        },
                        "typings": {
                          "type": "string",
                          "description": "TypeScript typings for the column. Recommended if the type is \"object\", ex: \"\\{ foo: string; bar: number \\}\""
                        }
                      },
                      "required": ["index"],
                      "additionalProperties": false
                    }
                  },
                  "required": ["type", "x-zui"],
                  "additionalProperties": false
                },
                "description": "List of keys/columns in the table."
              },
              "additionalProperties": {
                "type": "boolean",
                "enum": [true],
                "description": "Additional properties can be provided, but they will be ignored if no column matches."
              },
              "required": {
                "type": "array",
                "items": { "type": "string" },
                "description": "Array of required properties."
              },
              "type": { "type": "string", "enum": ["object"] }
            },
            "required": ["properties", "additionalProperties", "type"],
            "additionalProperties": false
          },
          "tags": {
            "type": "object",
            "additionalProperties": { "type": "string" },
            "description": "Optional tags to help organize your tables. These should be passed here as an object representing key/value pairs."
          },
          "isComputeEnabled": {
            "type": "boolean",
            "description": "Indicates if the table is enabled for computation."
          },
          "createdAt": { "type": "string", "format": "date-time", "description": "Timestamp of table creation." },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Timestamp of the last table update." }
        },
        "required": ["id", "name", "schema"],
        "additionalProperties": false
      },
      "Column": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Unique identifier for the column." },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 30,
            "description": "Name of the column, must be within length limits."
          },
          "description": { "type": "string", "description": "Optional descriptive text about the column." },
          "searchable": { "type": "boolean", "description": "Indicates if the column is vectorized and searchable." },
          "type": {
            "type": "string",
            "enum": ["string", "number", "boolean", "date", "object"],
            "description": "Specifies the data type of the column. Use \"object\" for complex data structures."
          },
          "typings": {
            "type": "string",
            "description": "TypeScript typings for the column. Recommended if the type is \"object\", ex: \"\\{ foo: string; bar: number \\}\""
          },
          "computed": {
            "type": "object",
            "properties": {
              "action": { "type": "string", "enum": ["ai", "code", "workflow"] },
              "dependencies": { "default": [], "type": "array", "items": { "type": "string" } },
              "prompt": { "type": "string", "description": "Prompt when action is \"ai\"" },
              "code": { "type": "string", "description": "Code to execute when action is \"code\"" },
              "model": {
                "default": "gpt-4o",
                "type": "string",
                "maxLength": 80,
                "description": "Model to use when action is \"ai\""
              },
              "workflowId": {
                "type": "string",
                "maxLength": 20,
                "description": "ID of Workflow to execute when action is \"workflow\""
              },
              "enabled": { "type": "boolean" }
            },
            "required": ["action"],
            "additionalProperties": false
          },
          "schema": { "type": "object", "additionalProperties": true }
        },
        "required": ["name", "type"],
        "additionalProperties": false
      },
      "Row": {
        "type": "object",
        "properties": {
          "id": { "type": "number", "description": "Unique identifier for the row." },
          "createdAt": { "type": "string", "format": "date-time", "description": "Timestamp of row creation." },
          "updatedAt": { "type": "string", "format": "date-time", "description": "Timestamp of the last row update." },
          "computed": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "status": { "type": "string" },
                "error": { "type": "string" },
                "updatedBy": { "type": "string" },
                "updatedAt": { "type": "string" }
              },
              "required": ["status"],
              "additionalProperties": false
            }
          },
          "stale": {
            "type": "array",
            "items": { "type": "string" },
            "description": "[Read-only] List of stale values that are waiting to be recomputed."
          },
          "similarity": {
            "type": "number",
            "description": "Optional numeric value indicating similarity, when using findTableRows."
          }
        },
        "required": ["id", "computed"],
        "additionalProperties": true
      },
      "File": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "File ID" },
          "botId": { "type": "string", "description": "The ID of the bot the file belongs to" },
          "key": {
            "type": "string",
            "description": "Unique key for the file. Must be unique across the bot (and the integration, when applicable)."
          },
          "url": {
            "type": "string",
            "description": "URL to retrieve the file content. This URL will be ready to use once the file is uploaded.\n\nIf the file has a `public_content` policy, this will contain the permanent public URL to retrieve the file, otherwise this will contain a temporary pre-signed URL to download the file which should be used shortly after retrieving and should not be stored long-term as the URL will expire after a short timeframe."
          },
          "size": {
            "type": "number",
            "description": "File size in bytes. Non-null if file upload status is \"COMPLETE\".",
            "nullable": true
          },
          "contentType": { "type": "string", "description": "MIME type of the file's content" },
          "tags": {
            "type": "object",
            "additionalProperties": { "type": "string", "maxLength": 1000 },
            "description": "The tags of the file as an object of key/value pairs"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": { "nullable": true },
            "description": "Metadata of the file as an object of key/value pairs. The values can be of any type."
          },
          "createdAt": { "type": "string", "description": "File creation timestamp in ISO 8601 format" },
          "updatedAt": { "type": "string", "description": "File last update timestamp in ISO 8601 format" },
          "accessPolicies": {
            "type": "array",
            "items": { "type": "string", "enum": ["integrations", "public_content"] },
            "description": "Access policies configured for the file."
          },
          "index": {
            "type": "boolean",
            "description": "Whether the file was requested to be indexed for search or not."
          },
          "status": {
            "type": "string",
            "enum": [
              "upload_pending",
              "upload_failed",
              "upload_completed",
              "indexing_pending",
              "indexing_failed",
              "indexing_completed"
            ],
            "description": "Status of the file. If the status is `upload_pending`, the file content has not been uploaded yet. The status will be set to `upload_completed` once the file content has been uploaded successfully.\n\nIf the upload failed for any reason (e.g. exceeding the storage quota or the maximum file size limit) the status will be set to `upload_failed` and the reason for the failure will be available in the `failedStatusReason` field of the file.\n\nHowever, if the file has been uploaded and the `index` attribute was set to `true` on the file, the status will immediately transition to the `indexing_pending` status (the `upload_completed` status step will be skipped).\n\nOnce the indexing is completed and the file is ready to be used for searching its status will be set to `indexing_completed`. If the indexing failed the status will be set to `indexing_failed` and the reason for the failure will be available in the `failedStatusReason` field."
          },
          "failedStatusReason": {
            "type": "string",
            "description": "If the file status is `upload_failed` or `indexing_failed` this will contain the reason of the failure."
          },
          "expiresAt": { "type": "string", "description": "File expiry timestamp in ISO 8601 format" }
        },
        "required": [
          "id",
          "botId",
          "key",
          "url",
          "size",
          "contentType",
          "tags",
          "metadata",
          "createdAt",
          "updatedAt",
          "accessPolicies",
          "index",
          "status"
        ],
        "additionalProperties": false
      }
    },
    "responses": {
      "runVrlResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": { "type": "object", "additionalProperties": true },
                "result": { "nullable": true }
              },
              "required": ["data"],
              "title": "runVrlResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "getAccountResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "account": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "string" },
                    "email": { "type": "string" },
                    "displayName": { "type": "string", "maxLength": 100 },
                    "emailVerified": { "type": "boolean" },
                    "profilePicture": { "type": "string" },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Creation date of the [Account](#schema_account) in ISO 8601 format"
                    }
                  },
                  "required": ["id", "email", "emailVerified", "createdAt"],
                  "additionalProperties": false
                }
              },
              "required": ["account"],
              "title": "getAccountResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "updateAccountResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "account": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "string" },
                    "email": { "type": "string" },
                    "displayName": { "type": "string", "maxLength": 100 },
                    "emailVerified": { "type": "boolean" },
                    "profilePicture": { "type": "string" },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Creation date of the [Account](#schema_account) in ISO 8601 format"
                    }
                  },
                  "required": ["id", "email", "emailVerified", "createdAt"],
                  "additionalProperties": false
                }
              },
              "required": ["account"],
              "title": "updateAccountResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "listPersonalAccessTokensResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "pats": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string" },
                      "createdAt": { "type": "string", "format": "date-time" },
                      "note": { "type": "string" }
                    },
                    "required": ["id", "createdAt", "note"]
                  }
                }
              },
              "required": ["pats"],
              "title": "listPersonalAccessTokensResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "createPersonalAccessTokenResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "pat": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "string" },
                    "createdAt": { "type": "string", "format": "date-time" },
                    "note": { "type": "string" },
                    "value": {
                      "type": "string",
                      "description": "The PAT value. This will only be returned here when created and cannot be retrieved later."
                    }
                  },
                  "required": ["id", "createdAt", "note", "value"],
                  "additionalProperties": false
                }
              },
              "required": ["pat"],
              "title": "createPersonalAccessTokenResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "deletePersonalAccessTokenResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": { "type": "object", "title": "deletePersonalAccessTokenResponse", "additionalProperties": false }
          }
        }
      },
      "setAccountPreferenceResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": { "type": "object", "title": "setAccountPreferenceResponse", "additionalProperties": false }
          }
        }
      },
      "getAccountPreferenceResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "value": { "nullable": true } },
              "title": "getAccountPreferenceResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "listPublicIntegrationsResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "integrations": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "minLength": 28,
                        "maxLength": 36,
                        "description": "ID of the [Integration](#schema_integration)"
                      },
                      "name": {
                        "type": "string",
                        "maxLength": 200,
                        "description": "Name of the [Integration](#schema_integration)"
                      },
                      "version": {
                        "type": "string",
                        "maxLength": 200,
                        "description": "Version of the [Integration](#schema_integration)"
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Creation date of the [Integration](#schema_integration) in ISO 8601 format"
                      },
                      "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Updating date of the [Integration](#schema_integration) in ISO 8601 format"
                      },
                      "title": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 64,
                        "description": "Title of the integration. This is the name that will be displayed in the UI"
                      },
                      "description": {
                        "type": "string",
                        "maxLength": 256,
                        "description": "Description of the integration. This is the description that will be displayed in the UI"
                      },
                      "iconUrl": {
                        "type": "string",
                        "description": "URL of the icon of the integration. This is the icon that will be displayed in the UI"
                      },
                      "public": {
                        "type": "boolean",
                        "description": "Idicates if the integration is public. Public integrations are available to all and cannot be updated without creating a new version."
                      },
                      "verificationStatus": {
                        "type": "string",
                        "enum": ["unapproved", "pending", "approved", "rejected"],
                        "description": "Status of the integration version verification"
                      },
                      "ownerWorkspace": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "string" },
                          "handle": { "type": "string", "nullable": true },
                          "name": { "type": "string" }
                        },
                        "required": ["id", "handle", "name"]
                      },
                      "meta": {
                        "type": "object",
                        "properties": { "installs": { "type": "number" }, "views": { "type": "number" } },
                        "required": ["installs", "views"]
                      },
                      "matchedOn": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "boolean",
                            "description": "Whether the integration name matched the search term"
                          },
                          "title": {
                            "type": "boolean",
                            "description": "Whether the integration title matched the search term"
                          },
                          "description": {
                            "type": "boolean",
                            "description": "Whether the integration description matched the search term"
                          },
                          "actions": {
                            "type": "array",
                            "items": { "type": "string" },
                            "description": "Action names that matched the search term"
                          },
                          "interfaces": {
                            "type": "array",
                            "items": { "type": "string" },
                            "description": "Interface names that matched the search term"
                          }
                        },
                        "description": "Metadata about which fields matched the search criteria"
                      }
                    },
                    "required": [
                      "id",
                      "name",
                      "version",
                      "createdAt",
                      "updatedAt",
                      "title",
                      "description",
                      "iconUrl",
                      "public",
                      "verificationStatus",
                      "ownerWorkspace",
                      "meta"
                    ]
                  }
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "nextToken": {
                      "type": "string",
                      "description": "The token to use to retrieve the next page of results, passed as a query string parameter (value should be URL-encoded) to this API endpoint."
                    }
                  },
                  "additionalProperties": false
                }
              },
              "required": ["integrations", "meta"],
              "title": "listPublicIntegrationsResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "getPublicIntegrationByIdResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "integration": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "minLength": 28,
                      "maxLength": 36,
                      "description": "ID of the [Integration](#schema_integration)"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Creation date of the [Integration](#schema_integration) in ISO 8601 format"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Updating date of the [Integration](#schema_integration) in ISO 8601 format"
                    },
                    "identifier": {
                      "type": "object",
                      "properties": {
                        "fallbackHandlerScript": {
                          "type": "string",
                          "maxLength": 2000,
                          "description": "VRL Script of the [Integration](#schema_integration) to handle incoming requests for a request that doesn't have an identifier"
                        },
                        "extractScript": {
                          "type": "string",
                          "maxLength": 2000,
                          "description": "VRL Script of the [Integration](#schema_integration) to extract the identifier from an incoming webhook often use for OAuth"
                        }
                      },
                      "description": "Global identifier configuration of the [Integration](#schema_integration)",
                      "additionalProperties": false
                    },
                    "sandbox": {
                      "type": "object",
                      "properties": {
                        "identifierExtractScript": {
                          "type": "string",
                          "maxLength": 2000,
                          "description": "VRL Script of the [Integration](#schema_integration) to extract the identifier from an incoming webhook used specifically for the sandbox"
                        },
                        "messageExtractScript": {
                          "type": "string",
                          "maxLength": 2000,
                          "description": "VRL Script of the [Integration](#schema_integration) to extract the message from an incoming webhook used specifically for the sandbox"
                        }
                      },
                      "additionalProperties": false
                    },
                    "url": {
                      "type": "string",
                      "maxLength": 2000,
                      "description": "URL of the [Integration](#schema_integration)"
                    },
                    "name": {
                      "type": "string",
                      "maxLength": 200,
                      "description": "Name of the [Integration](#schema_integration)"
                    },
                    "version": {
                      "type": "string",
                      "maxLength": 200,
                      "description": "Version of the [Integration](#schema_integration)"
                    },
                    "interfaces": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "minLength": 28,
                            "maxLength": 36,
                            "description": "ID of the interface"
                          },
                          "name": { "type": "string", "maxLength": 200, "description": "Name of the interface" },
                          "version": { "type": "string", "maxLength": 200, "description": "Version of the interface" },
                          "entities": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "object",
                              "properties": { "name": { "type": "string", "maxLength": 200 } },
                              "required": ["name"],
                              "additionalProperties": false
                            }
                          },
                          "actions": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "object",
                              "properties": { "name": { "type": "string", "maxLength": 200 } },
                              "required": ["name"],
                              "additionalProperties": false
                            }
                          },
                          "events": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "object",
                              "properties": { "name": { "type": "string", "maxLength": 200 } },
                              "required": ["name"],
                              "additionalProperties": false
                            }
                          },
                          "channels": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "object",
                              "properties": { "name": { "type": "string", "maxLength": 200 } },
                              "required": ["name"],
                              "additionalProperties": false
                            }
                          }
                        },
                        "required": ["id", "name", "version", "entities", "actions", "events", "channels"],
                        "additionalProperties": false
                      }
                    },
                    "configuration": {
                      "type": "object",
                      "properties": {
                        "title": { "type": "string", "maxLength": 64, "description": "Title of the configuration" },
                        "description": {
                          "type": "string",
                          "maxLength": 256,
                          "description": "Description of the configuration"
                        },
                        "identifier": {
                          "type": "object",
                          "properties": {
                            "linkTemplateScript": { "type": "string", "maxLength": 2000 },
                            "required": { "type": "boolean" }
                          },
                          "required": ["required"],
                          "description": "Identifier configuration of the [Integration](#schema_integration)",
                          "additionalProperties": false
                        },
                        "schema": {
                          "type": "object",
                          "additionalProperties": true,
                          "description": "Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`."
                        }
                      },
                      "required": ["identifier", "schema"],
                      "description": "Configuration definition",
                      "additionalProperties": false
                    },
                    "configurations": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "title": { "type": "string", "maxLength": 64, "description": "Title of the configuration" },
                          "description": {
                            "type": "string",
                            "maxLength": 256,
                            "description": "Description of the configuration"
                          },
                          "identifier": {
                            "type": "object",
                            "properties": {
                              "linkTemplateScript": { "type": "string", "maxLength": 2000 },
                              "required": { "type": "boolean" }
                            },
                            "required": ["required"],
                            "description": "Identifier configuration of the [Integration](#schema_integration)",
                            "additionalProperties": false
                          },
                          "schema": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`."
                          }
                        },
                        "required": ["identifier", "schema"],
                        "description": "Configuration definition",
                        "additionalProperties": false
                      }
                    },
                    "channels": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "title": { "type": "string", "maxLength": 64, "description": "Title of the channel" },
                          "description": {
                            "type": "string",
                            "maxLength": 256,
                            "description": "Description of the channel"
                          },
                          "messages": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "object",
                              "properties": { "schema": { "type": "object", "additionalProperties": true } },
                              "required": ["schema"],
                              "description": "Message definition",
                              "additionalProperties": false
                            }
                          },
                          "conversation": {
                            "type": "object",
                            "properties": {
                              "tags": {
                                "type": "object",
                                "additionalProperties": {
                                  "type": "object",
                                  "properties": {
                                    "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                                    "description": {
                                      "type": "string",
                                      "maxLength": 256,
                                      "description": "Description of the tag"
                                    }
                                  },
                                  "description": "Definition of a tag that can be provided on the object",
                                  "additionalProperties": false
                                }
                              },
                              "creation": {
                                "type": "object",
                                "properties": {
                                  "enabled": { "type": "boolean", "description": "Enable conversation creation" },
                                  "requiredTags": {
                                    "type": "array",
                                    "items": { "type": "string" },
                                    "description": "The list of tags that are required to be specified when calling the API directly to create a conversation."
                                  }
                                },
                                "required": ["enabled", "requiredTags"],
                                "description": "The conversation creation setting determines how to create a conversation through the API directly. The integration will have to implement the `createConversation` functionality to support this setting.",
                                "additionalProperties": false
                              }
                            },
                            "required": ["tags", "creation"],
                            "description": "Conversation object configuration",
                            "additionalProperties": false
                          },
                          "message": {
                            "type": "object",
                            "properties": {
                              "tags": {
                                "type": "object",
                                "additionalProperties": {
                                  "type": "object",
                                  "properties": {
                                    "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                                    "description": {
                                      "type": "string",
                                      "maxLength": 256,
                                      "description": "Description of the tag"
                                    }
                                  },
                                  "description": "Definition of a tag that can be provided on the object",
                                  "additionalProperties": false
                                }
                              }
                            },
                            "required": ["tags"],
                            "description": "Message object configuration",
                            "additionalProperties": false
                          }
                        },
                        "required": ["messages", "conversation", "message"],
                        "description": "Channel definition",
                        "additionalProperties": false
                      }
                    },
                    "states": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": ["conversation", "user", "integration"],
                            "description": "Type of the [State](#schema_state) (`conversation`, `user` or `integration`)"
                          },
                          "schema": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Schema of the [State](#schema_state) in the `JSON schema` format. This `JSON schema` is going to be used for validating the state data."
                          }
                        },
                        "required": ["type", "schema"],
                        "description": "State definition",
                        "additionalProperties": false
                      }
                    },
                    "events": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "title": { "type": "string", "maxLength": 64, "description": "Title of the event" },
                          "description": {
                            "type": "string",
                            "maxLength": 256,
                            "description": "Description of the event"
                          },
                          "schema": { "type": "object", "additionalProperties": true }
                        },
                        "required": ["schema"],
                        "description": "Event Definition",
                        "additionalProperties": false
                      }
                    },
                    "actions": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "title": { "type": "string", "maxLength": 64, "description": "Title of the action" },
                          "description": {
                            "type": "string",
                            "maxLength": 256,
                            "description": "Description of the action"
                          },
                          "billable": { "type": "boolean" },
                          "cacheable": { "type": "boolean" },
                          "input": {
                            "type": "object",
                            "properties": { "schema": { "type": "object", "additionalProperties": true } },
                            "required": ["schema"],
                            "additionalProperties": false
                          },
                          "output": {
                            "type": "object",
                            "properties": { "schema": { "type": "object", "additionalProperties": true } },
                            "required": ["schema"],
                            "additionalProperties": false
                          }
                        },
                        "required": ["input", "output"],
                        "description": "Action definition",
                        "additionalProperties": false
                      }
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "tags": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "object",
                            "properties": {
                              "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                              "description": {
                                "type": "string",
                                "maxLength": 256,
                                "description": "Description of the tag"
                              }
                            },
                            "description": "Definition of a tag that can be provided on the object",
                            "additionalProperties": false
                          }
                        },
                        "creation": {
                          "type": "object",
                          "properties": {
                            "enabled": { "type": "boolean", "description": "Enable user creation" },
                            "requiredTags": {
                              "type": "array",
                              "items": { "type": "string" },
                              "description": "The list of tags that are required to be specified when calling the API directly to create a user."
                            }
                          },
                          "required": ["enabled", "requiredTags"],
                          "description": "The user creation setting determines how to create a user through the API directly. The integration will have to implement the `createUser` functionality to support this setting.",
                          "additionalProperties": false
                        }
                      },
                      "required": ["tags", "creation"],
                      "description": "User object configuration",
                      "additionalProperties": false
                    },
                    "entities": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "title": { "type": "string", "maxLength": 64, "description": "Title of the entity" },
                          "description": {
                            "type": "string",
                            "maxLength": 256,
                            "description": "Description of the entity"
                          },
                          "schema": { "type": "object", "additionalProperties": true }
                        },
                        "required": ["schema"],
                        "description": "Entity definition",
                        "additionalProperties": false
                      }
                    },
                    "dev": {
                      "type": "boolean",
                      "description": "Indicates if the integration is a development integration; Dev integrations run locally"
                    },
                    "title": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "description": "Title of the integration. This is the name that will be displayed in the UI"
                    },
                    "description": {
                      "type": "string",
                      "maxLength": 256,
                      "description": "Description of the integration. This is the description that will be displayed in the UI"
                    },
                    "iconUrl": {
                      "type": "string",
                      "description": "URL of the icon of the integration. This is the icon that will be displayed in the UI"
                    },
                    "readmeUrl": {
                      "type": "string",
                      "description": "URL of the readme of the integration. This is the readme that will be displayed in the UI"
                    },
                    "public": {
                      "type": "boolean",
                      "description": "Idicates if the integration is public. Public integrations are available to all and cannot be updated without creating a new version."
                    },
                    "verificationStatus": {
                      "type": "string",
                      "enum": ["unapproved", "pending", "approved", "rejected"],
                      "description": "Status of the integration version verification"
                    },
                    "secrets": {
                      "type": "array",
                      "items": { "type": "string" },
                      "description": "Secrets are integration-wide values available in the code via environment variables formatted with a SECRET_ prefix followed by your secret name. A secret name must respect SCREAMING_SNAKE casing."
                    },
                    "ownerWorkspace": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "string" },
                        "handle": { "type": "string", "nullable": true },
                        "name": { "type": "string" }
                      },
                      "required": ["id", "handle", "name"],
                      "additionalProperties": false
                    },
                    "meta": {
                      "type": "object",
                      "properties": { "installs": { "type": "number" }, "views": { "type": "number" } },
                      "required": ["installs", "views"],
                      "additionalProperties": false
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "updatedAt",
                    "identifier",
                    "url",
                    "name",
                    "version",
                    "interfaces",
                    "configuration",
                    "configurations",
                    "channels",
                    "states",
                    "events",
                    "actions",
                    "user",
                    "entities",
                    "dev",
                    "title",
                    "description",
                    "iconUrl",
                    "readmeUrl",
                    "public",
                    "verificationStatus",
                    "secrets",
                    "ownerWorkspace",
                    "meta"
                  ],
                  "additionalProperties": false
                }
              },
              "required": ["integration"],
              "title": "getPublicIntegrationByIdResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "getPublicIntegrationResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "integration": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "minLength": 28,
                      "maxLength": 36,
                      "description": "ID of the [Integration](#schema_integration)"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Creation date of the [Integration](#schema_integration) in ISO 8601 format"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Updating date of the [Integration](#schema_integration) in ISO 8601 format"
                    },
                    "identifier": {
                      "type": "object",
                      "properties": {
                        "fallbackHandlerScript": {
                          "type": "string",
                          "maxLength": 2000,
                          "description": "VRL Script of the [Integration](#schema_integration) to handle incoming requests for a request that doesn't have an identifier"
                        },
                        "extractScript": {
                          "type": "string",
                          "maxLength": 2000,
                          "description": "VRL Script of the [Integration](#schema_integration) to extract the identifier from an incoming webhook often use for OAuth"
                        }
                      },
                      "description": "Global identifier configuration of the [Integration](#schema_integration)",
                      "additionalProperties": false
                    },
                    "sandbox": {
                      "type": "object",
                      "properties": {
                        "identifierExtractScript": {
                          "type": "string",
                          "maxLength": 2000,
                          "description": "VRL Script of the [Integration](#schema_integration) to extract the identifier from an incoming webhook used specifically for the sandbox"
                        },
                        "messageExtractScript": {
                          "type": "string",
                          "maxLength": 2000,
                          "description": "VRL Script of the [Integration](#schema_integration) to extract the message from an incoming webhook used specifically for the sandbox"
                        }
                      },
                      "additionalProperties": false
                    },
                    "url": {
                      "type": "string",
                      "maxLength": 2000,
                      "description": "URL of the [Integration](#schema_integration)"
                    },
                    "name": {
                      "type": "string",
                      "maxLength": 200,
                      "description": "Name of the [Integration](#schema_integration)"
                    },
                    "version": {
                      "type": "string",
                      "maxLength": 200,
                      "description": "Version of the [Integration](#schema_integration)"
                    },
                    "interfaces": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "minLength": 28,
                            "maxLength": 36,
                            "description": "ID of the interface"
                          },
                          "name": { "type": "string", "maxLength": 200, "description": "Name of the interface" },
                          "version": { "type": "string", "maxLength": 200, "description": "Version of the interface" },
                          "entities": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "object",
                              "properties": { "name": { "type": "string", "maxLength": 200 } },
                              "required": ["name"],
                              "additionalProperties": false
                            }
                          },
                          "actions": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "object",
                              "properties": { "name": { "type": "string", "maxLength": 200 } },
                              "required": ["name"],
                              "additionalProperties": false
                            }
                          },
                          "events": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "object",
                              "properties": { "name": { "type": "string", "maxLength": 200 } },
                              "required": ["name"],
                              "additionalProperties": false
                            }
                          },
                          "channels": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "object",
                              "properties": { "name": { "type": "string", "maxLength": 200 } },
                              "required": ["name"],
                              "additionalProperties": false
                            }
                          }
                        },
                        "required": ["id", "name", "version", "entities", "actions", "events", "channels"],
                        "additionalProperties": false
                      }
                    },
                    "configuration": {
                      "type": "object",
                      "properties": {
                        "title": { "type": "string", "maxLength": 64, "description": "Title of the configuration" },
                        "description": {
                          "type": "string",
                          "maxLength": 256,
                          "description": "Description of the configuration"
                        },
                        "identifier": {
                          "type": "object",
                          "properties": {
                            "linkTemplateScript": { "type": "string", "maxLength": 2000 },
                            "required": { "type": "boolean" }
                          },
                          "required": ["required"],
                          "description": "Identifier configuration of the [Integration](#schema_integration)",
                          "additionalProperties": false
                        },
                        "schema": {
                          "type": "object",
                          "additionalProperties": true,
                          "description": "Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`."
                        }
                      },
                      "required": ["identifier", "schema"],
                      "description": "Configuration definition",
                      "additionalProperties": false
                    },
                    "configurations": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "title": { "type": "string", "maxLength": 64, "description": "Title of the configuration" },
                          "description": {
                            "type": "string",
                            "maxLength": 256,
                            "description": "Description of the configuration"
                          },
                          "identifier": {
                            "type": "object",
                            "properties": {
                              "linkTemplateScript": { "type": "string", "maxLength": 2000 },
                              "required": { "type": "boolean" }
                            },
                            "required": ["required"],
                            "description": "Identifier configuration of the [Integration](#schema_integration)",
                            "additionalProperties": false
                          },
                          "schema": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`."
                          }
                        },
                        "required": ["identifier", "schema"],
                        "description": "Configuration definition",
                        "additionalProperties": false
                      }
                    },
                    "channels": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "title": { "type": "string", "maxLength": 64, "description": "Title of the channel" },
                          "description": {
                            "type": "string",
                            "maxLength": 256,
                            "description": "Description of the channel"
                          },
                          "messages": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "object",
                              "properties": { "schema": { "type": "object", "additionalProperties": true } },
                              "required": ["schema"],
                              "description": "Message definition",
                              "additionalProperties": false
                            }
                          },
                          "conversation": {
                            "type": "object",
                            "properties": {
                              "tags": {
                                "type": "object",
                                "additionalProperties": {
                                  "type": "object",
                                  "properties": {
                                    "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                                    "description": {
                                      "type": "string",
                                      "maxLength": 256,
                                      "description": "Description of the tag"
                                    }
                                  },
                                  "description": "Definition of a tag that can be provided on the object",
                                  "additionalProperties": false
                                }
                              },
                              "creation": {
                                "type": "object",
                                "properties": {
                                  "enabled": { "type": "boolean", "description": "Enable conversation creation" },
                                  "requiredTags": {
                                    "type": "array",
                                    "items": { "type": "string" },
                                    "description": "The list of tags that are required to be specified when calling the API directly to create a conversation."
                                  }
                                },
                                "required": ["enabled", "requiredTags"],
                                "description": "The conversation creation setting determines how to create a conversation through the API directly. The integration will have to implement the `createConversation` functionality to support this setting.",
                                "additionalProperties": false
                              }
                            },
                            "required": ["tags", "creation"],
                            "description": "Conversation object configuration",
                            "additionalProperties": false
                          },
                          "message": {
                            "type": "object",
                            "properties": {
                              "tags": {
                                "type": "object",
                                "additionalProperties": {
                                  "type": "object",
                                  "properties": {
                                    "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                                    "description": {
                                      "type": "string",
                                      "maxLength": 256,
                                      "description": "Description of the tag"
                                    }
                                  },
                                  "description": "Definition of a tag that can be provided on the object",
                                  "additionalProperties": false
                                }
                              }
                            },
                            "required": ["tags"],
                            "description": "Message object configuration",
                            "additionalProperties": false
                          }
                        },
                        "required": ["messages", "conversation", "message"],
                        "description": "Channel definition",
                        "additionalProperties": false
                      }
                    },
                    "states": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": ["conversation", "user", "integration"],
                            "description": "Type of the [State](#schema_state) (`conversation`, `user` or `integration`)"
                          },
                          "schema": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Schema of the [State](#schema_state) in the `JSON schema` format. This `JSON schema` is going to be used for validating the state data."
                          }
                        },
                        "required": ["type", "schema"],
                        "description": "State definition",
                        "additionalProperties": false
                      }
                    },
                    "events": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "title": { "type": "string", "maxLength": 64, "description": "Title of the event" },
                          "description": {
                            "type": "string",
                            "maxLength": 256,
                            "description": "Description of the event"
                          },
                          "schema": { "type": "object", "additionalProperties": true }
                        },
                        "required": ["schema"],
                        "description": "Event Definition",
                        "additionalProperties": false
                      }
                    },
                    "actions": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "title": { "type": "string", "maxLength": 64, "description": "Title of the action" },
                          "description": {
                            "type": "string",
                            "maxLength": 256,
                            "description": "Description of the action"
                          },
                          "billable": { "type": "boolean" },
                          "cacheable": { "type": "boolean" },
                          "input": {
                            "type": "object",
                            "properties": { "schema": { "type": "object", "additionalProperties": true } },
                            "required": ["schema"],
                            "additionalProperties": false
                          },
                          "output": {
                            "type": "object",
                            "properties": { "schema": { "type": "object", "additionalProperties": true } },
                            "required": ["schema"],
                            "additionalProperties": false
                          }
                        },
                        "required": ["input", "output"],
                        "description": "Action definition",
                        "additionalProperties": false
                      }
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "tags": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "object",
                            "properties": {
                              "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                              "description": {
                                "type": "string",
                                "maxLength": 256,
                                "description": "Description of the tag"
                              }
                            },
                            "description": "Definition of a tag that can be provided on the object",
                            "additionalProperties": false
                          }
                        },
                        "creation": {
                          "type": "object",
                          "properties": {
                            "enabled": { "type": "boolean", "description": "Enable user creation" },
                            "requiredTags": {
                              "type": "array",
                              "items": { "type": "string" },
                              "description": "The list of tags that are required to be specified when calling the API directly to create a user."
                            }
                          },
                          "required": ["enabled", "requiredTags"],
                          "description": "The user creation setting determines how to create a user through the API directly. The integration will have to implement the `createUser` functionality to support this setting.",
                          "additionalProperties": false
                        }
                      },
                      "required": ["tags", "creation"],
                      "description": "User object configuration",
                      "additionalProperties": false
                    },
                    "entities": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "title": { "type": "string", "maxLength": 64, "description": "Title of the entity" },
                          "description": {
                            "type": "string",
                            "maxLength": 256,
                            "description": "Description of the entity"
                          },
                          "schema": { "type": "object", "additionalProperties": true }
                        },
                        "required": ["schema"],
                        "description": "Entity definition",
                        "additionalProperties": false
                      }
                    },
                    "dev": {
                      "type": "boolean",
                      "description": "Indicates if the integration is a development integration; Dev integrations run locally"
                    },
                    "title": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 64,
                      "description": "Title of the integration. This is the name that will be displayed in the UI"
                    },
                    "description": {
                      "type": "string",
                      "maxLength": 256,
                      "description": "Description of the integration. This is the description that will be displayed in the UI"
                    },
                    "iconUrl": {
                      "type": "string",
                      "description": "URL of the icon of the integration. This is the icon that will be displayed in the UI"
                    },
                    "readmeUrl": {
                      "type": "string",
                      "description": "URL of the readme of the integration. This is the readme that will be displayed in the UI"
                    },
                    "public": {
                      "type": "boolean",
                      "description": "Idicates if the integration is public. Public integrations are available to all and cannot be updated without creating a new version."
                    },
                    "verificationStatus": {
                      "type": "string",
                      "enum": ["unapproved", "pending", "approved", "rejected"],
                      "description": "Status of the integration version verification"
                    },
                    "secrets": {
                      "type": "array",
                      "items": { "type": "string" },
                      "description": "Secrets are integration-wide values available in the code via environment variables formatted with a SECRET_ prefix followed by your secret name. A secret name must respect SCREAMING_SNAKE casing."
                    },
                    "ownerWorkspace": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "string" },
                        "handle": { "type": "string", "nullable": true },
                        "name": { "type": "string" }
                      },
                      "required": ["id", "handle", "name"],
                      "additionalProperties": false
                    },
                    "meta": {
                      "type": "object",
                      "properties": { "installs": { "type": "number" }, "views": { "type": "number" } },
                      "required": ["installs", "views"],
                      "additionalProperties": false
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "updatedAt",
                    "identifier",
                    "url",
                    "name",
                    "version",
                    "interfaces",
                    "configuration",
                    "configurations",
                    "channels",
                    "states",
                    "events",
                    "actions",
                    "user",
                    "entities",
                    "dev",
                    "title",
                    "description",
                    "iconUrl",
                    "readmeUrl",
                    "public",
                    "verificationStatus",
                    "secrets",
                    "ownerWorkspace",
                    "meta"
                  ],
                  "additionalProperties": false
                }
              },
              "required": ["integration"],
              "title": "getPublicIntegrationResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "createBotResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "bot": { "$ref": "#/components/schemas/Bot" } },
              "required": ["bot"],
              "title": "createBotResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "updateBotResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "bot": { "$ref": "#/components/schemas/Bot" } },
              "required": ["bot"],
              "title": "updateBotResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "transferBotResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": { "type": "object", "title": "transferBotResponse", "additionalProperties": false }
          }
        }
      },
      "listBotsResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "bots": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "minLength": 28,
                        "maxLength": 36,
                        "description": "Id of the [Bot](#schema_bot)"
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Creation date of the [Bot](#schema_bot) in ISO 8601 format"
                      },
                      "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Updating date of the [Bot](#schema_bot) in ISO 8601 format"
                      },
                      "name": { "type": "string" },
                      "deployedAt": { "type": "string", "format": "date-time" },
                      "tags": {
                        "type": "object",
                        "additionalProperties": { "type": "string" },
                        "description": "Tags of [Bot](#schema_bot)"
                      }
                    },
                    "required": ["id", "createdAt", "updatedAt", "name", "tags"]
                  }
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "nextToken": {
                      "type": "string",
                      "description": "The token to use to retrieve the next page of results, passed as a query string parameter (value should be URL-encoded) to this API endpoint."
                    }
                  },
                  "additionalProperties": false
                }
              },
              "required": ["bots", "meta"],
              "title": "listBotsResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "getBotResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "bot": { "$ref": "#/components/schemas/Bot" } },
              "required": ["bot"],
              "title": "getBotResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "deleteBotResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": { "type": "object", "title": "deleteBotResponse", "additionalProperties": false }
          }
        }
      },
      "getBotLogsResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "logs": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "timestamp": { "type": "string" },
                      "level": { "type": "string" },
                      "message": { "type": "string" },
                      "workflowId": { "type": "string" },
                      "userId": { "type": "string" },
                      "conversationId": { "type": "string" }
                    },
                    "required": ["timestamp", "level", "message"]
                  }
                },
                "nextToken": { "type": "string" }
              },
              "required": ["logs"],
              "title": "getBotLogsResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "getBotWebchatResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "code": { "type": "string" } },
              "required": ["code"],
              "title": "getBotWebchatResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "getBotAnalyticsResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "records": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "startDateTimeUtc": {
                        "type": "string",
                        "description": "ISO 8601 date string of the beginning (inclusive) of the period"
                      },
                      "endDateTimeUtc": {
                        "type": "string",
                        "description": "ISO 8601 date string of the end (exclusive) of the period"
                      },
                      "returningUsers": { "type": "integer" },
                      "newUsers": { "type": "integer" },
                      "sessions": { "type": "integer" },
                      "messages": { "type": "integer", "description": "Deprecated. Use `userMessages` instead." },
                      "userMessages": { "type": "integer" },
                      "botMessages": { "type": "integer" },
                      "events": { "type": "integer" },
                      "eventTypes": { "type": "object", "additionalProperties": { "type": "number" } },
                      "customEvents": { "type": "object", "additionalProperties": { "type": "number" } },
                      "llm": {
                        "type": "object",
                        "properties": {
                          "calls": { "type": "integer" },
                          "errors": { "type": "integer" },
                          "inputTokens": { "type": "integer" },
                          "outputTokens": { "type": "integer" },
                          "latency": {
                            "type": "object",
                            "properties": {
                              "mean": { "type": "number" },
                              "sd": { "type": "number" },
                              "min": { "type": "number" },
                              "max": { "type": "number" }
                            },
                            "required": ["mean", "sd", "min", "max"],
                            "description": "The time it took for the LLM to complete its response. Values are expressed in milliseconds"
                          },
                          "tokensPerSecond": {
                            "type": "object",
                            "properties": {
                              "mean": { "type": "number" },
                              "sd": { "type": "number" },
                              "min": { "type": "number" },
                              "max": { "type": "number" }
                            },
                            "required": ["mean", "sd", "min", "max"],
                            "description": "LLM response generation speed expressed in output tokens per second."
                          },
                          "cost": {
                            "type": "object",
                            "properties": {
                              "sum": { "type": "number" },
                              "mean": { "type": "number" },
                              "sd": { "type": "number" },
                              "min": { "type": "number" },
                              "max": { "type": "number" }
                            },
                            "required": ["sum", "mean", "sd", "min", "max"],
                            "description": "Values are expressed in U.S. dollars"
                          }
                        },
                        "required": [
                          "calls",
                          "errors",
                          "inputTokens",
                          "outputTokens",
                          "latency",
                          "tokensPerSecond",
                          "cost"
                        ]
                      }
                    },
                    "required": [
                      "startDateTimeUtc",
                      "endDateTimeUtc",
                      "returningUsers",
                      "newUsers",
                      "sessions",
                      "messages",
                      "userMessages",
                      "botMessages",
                      "events",
                      "eventTypes",
                      "customEvents",
                      "llm"
                    ]
                  }
                }
              },
              "required": ["records"],
              "title": "getBotAnalyticsResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "getBotIssueResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "issue": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "string" },
                    "code": { "type": "string" },
                    "createdAt": { "type": "string", "format": "date-time" },
                    "lastSeenAt": { "type": "string", "format": "date-time" },
                    "title": { "type": "string" },
                    "description": { "type": "string" },
                    "groupedData": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": { "raw": { "type": "string" }, "pretty": { "type": "string" } },
                        "required": ["raw"],
                        "additionalProperties": false
                      }
                    },
                    "eventsCount": { "type": "number" },
                    "category": { "type": "string", "enum": ["user_code", "limits", "configuration", "other"] },
                    "resolutionLink": { "type": "string", "nullable": true }
                  },
                  "required": [
                    "id",
                    "code",
                    "createdAt",
                    "lastSeenAt",
                    "title",
                    "description",
                    "groupedData",
                    "eventsCount",
                    "category",
                    "resolutionLink"
                  ],
                  "additionalProperties": false
                }
              },
              "required": ["issue"],
              "title": "getBotIssueResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "listBotIssuesResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "issues": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string" },
                      "code": { "type": "string" },
                      "createdAt": { "type": "string", "format": "date-time" },
                      "lastSeenAt": { "type": "string", "format": "date-time" },
                      "title": { "type": "string" },
                      "description": { "type": "string" },
                      "groupedData": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": { "raw": { "type": "string" }, "pretty": { "type": "string" } },
                          "required": ["raw"]
                        }
                      },
                      "eventsCount": { "type": "number" },
                      "category": { "type": "string", "enum": ["user_code", "limits", "configuration", "other"] },
                      "resolutionLink": { "type": "string", "nullable": true }
                    },
                    "required": [
                      "id",
                      "code",
                      "createdAt",
                      "lastSeenAt",
                      "title",
                      "description",
                      "groupedData",
                      "eventsCount",
                      "category",
                      "resolutionLink"
                    ]
                  }
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "nextToken": {
                      "type": "string",
                      "description": "The token to use to retrieve the next page of results, passed as a query string parameter (value should be URL-encoded) to this API endpoint."
                    }
                  },
                  "additionalProperties": false
                }
              },
              "required": ["issues", "meta"],
              "title": "listBotIssuesResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "deleteBotIssueResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": { "type": "object", "title": "deleteBotIssueResponse", "additionalProperties": false }
          }
        }
      },
      "listBotIssueEventsResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "issueEvents": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string" },
                      "createdAt": { "type": "string", "format": "date-time" },
                      "data": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": { "raw": { "type": "string" }, "pretty": { "type": "string" } },
                          "required": ["raw"]
                        }
                      }
                    },
                    "required": ["id", "createdAt", "data"]
                  }
                }
              },
              "required": ["issueEvents"],
              "title": "listBotIssueEventsResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "listBotVersionsResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "versions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string" },
                      "name": { "type": "string" },
                      "description": { "type": "string" }
                    },
                    "required": ["id", "name"]
                  }
                }
              },
              "required": ["versions"],
              "title": "listBotVersionsResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "getBotVersionResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "url": { "type": "string", "format": "uri" } },
              "required": ["url"],
              "title": "getBotVersionResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "createBotVersionResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "string" },
                    "name": { "type": "string" },
                    "description": { "type": "string" }
                  },
                  "required": ["id", "name"],
                  "additionalProperties": false
                }
              },
              "required": ["version"],
              "title": "createBotVersionResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "deployBotVersionResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": { "type": "object", "title": "deployBotVersionResponse", "additionalProperties": false }
          }
        }
      },
      "createIntegrationShareableIdResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "shareableId": { "type": "string" } },
              "required": ["shareableId"],
              "title": "createIntegrationShareableIdResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "deleteIntegrationShareableIdResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "deleteIntegrationShareableIdResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "getIntegrationShareableIdResponse": {
        "description": "Shareable ID and expiration indicator",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "shareableId": { "type": "string" }, "isExpired": { "type": "boolean" } },
              "required": ["shareableId", "isExpired"],
              "title": "getIntegrationShareableIdResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "listWorkspaceInvoicesResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "invoices": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string" },
                      "period": {
                        "type": "object",
                        "properties": { "month": { "type": "number" }, "year": { "type": "number" } },
                        "required": ["month", "year"]
                      },
                      "date": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date on which the invoice was generated."
                      },
                      "amount": { "type": "number", "description": "Total amount to pay of the invoice." },
                      "currency": {
                        "type": "string",
                        "maxLength": 3,
                        "description": "Currency of the invoice amount."
                      },
                      "paymentStatus": {
                        "type": "string",
                        "enum": ["deleted", "draft", "open", "paid", "uncollectible", "void"],
                        "nullable": true
                      },
                      "dueDate": { "type": "string", "description": "Date on which the invoice is due." },
                      "paymentAttemptCount": {
                        "type": "number",
                        "description": "Number of times payment has been unsuccessfully attempted on the invoice.",
                        "nullable": true
                      },
                      "nextPaymentAttemptDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date on which the next payment attempt will be made.",
                        "nullable": true
                      },
                      "pdfUrl": {
                        "type": "string",
                        "format": "uri",
                        "description": "URL to download the PDF file of the invoice."
                      }
                    },
                    "required": [
                      "id",
                      "period",
                      "date",
                      "amount",
                      "currency",
                      "paymentStatus",
                      "paymentAttemptCount",
                      "nextPaymentAttemptDate",
                      "pdfUrl"
                    ]
                  }
                }
              },
              "required": ["invoices"],
              "title": "listWorkspaceInvoicesResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "getUpcomingInvoiceResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "total": { "type": "number", "description": "Total amount to pay of the invoice." },
                "lineItems": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string" },
                      "description": { "type": "string", "description": "Description of the line item." },
                      "totalInCents": {
                        "type": "number",
                        "description": "Total amount to pay (in cents) of the line item."
                      },
                      "currency": {
                        "type": "string",
                        "maxLength": 3,
                        "description": "Three-letter ISO currency code, in lowercase."
                      },
                      "pricePerUnitInCents": {
                        "type": "number",
                        "description": "Price per unit (in cents) of the line item.",
                        "nullable": true
                      },
                      "quantity": {
                        "type": "number",
                        "description": "The quantity of the subscription, if the line item is a subscription or a proration.",
                        "nullable": true
                      },
                      "type": {
                        "type": "string",
                        "enum": ["invoiceitem", "subscription"],
                        "description": "Type of the line item."
                      },
                      "periodStart": {
                        "type": "string",
                        "format": "date",
                        "description": "Start date of the line item period.",
                        "nullable": true
                      },
                      "periodEnd": {
                        "type": "string",
                        "format": "date",
                        "description": "End date of the line item period.",
                        "nullable": true
                      }
                    },
                    "required": [
                      "id",
                      "description",
                      "totalInCents",
                      "currency",
                      "pricePerUnitInCents",
                      "quantity",
                      "type",
                      "periodStart",
                      "periodEnd"
                    ]
                  },
                  "description": "List of items included in the invoice."
                }
              },
              "required": ["total", "lineItems"],
              "title": "getUpcomingInvoiceResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "chargeWorkspaceUnpaidInvoicesResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "chargedInvoices": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": { "id": { "type": "string" }, "amount": { "type": "number" } },
                    "required": ["id", "amount"]
                  },
                  "description": "Invoices that were successfully charged by this request."
                },
                "failedInvoices": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string" },
                      "amount": { "type": "number" },
                      "failedReason": { "type": "string" }
                    },
                    "required": ["id", "amount", "failedReason"]
                  },
                  "description": "Invoices that failed to be charged by this request."
                }
              },
              "required": ["chargedInvoices", "failedInvoices"],
              "title": "chargeWorkspaceUnpaidInvoicesResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "createWorkspaceResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "id": { "type": "string" },
                "name": { "type": "string" },
                "ownerId": { "type": "string" },
                "createdAt": { "type": "string" },
                "updatedAt": { "type": "string" },
                "botCount": { "type": "number" },
                "billingVersion": { "type": "string", "enum": ["v1", "v2", "v3"] },
                "plan": { "type": "string", "enum": ["community", "team", "enterprise", "plus"] },
                "blocked": { "type": "boolean" },
                "spendingLimit": { "type": "number" },
                "about": { "default": "", "type": "string" },
                "profilePicture": { "default": "", "type": "string" },
                "contactEmail": { "default": "", "type": "string" },
                "website": { "default": "", "type": "string" },
                "socialAccounts": { "default": [], "type": "array", "items": { "type": "string" } },
                "isPublic": { "type": "boolean" },
                "handle": { "default": "", "type": "string" }
              },
              "required": [
                "id",
                "name",
                "ownerId",
                "createdAt",
                "updatedAt",
                "botCount",
                "billingVersion",
                "plan",
                "blocked",
                "spendingLimit"
              ],
              "title": "createWorkspaceResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "getPublicWorkspaceResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "id": { "type": "string" },
                "name": { "type": "string" },
                "createdAt": { "type": "string" },
                "updatedAt": { "type": "string" },
                "about": { "default": "", "type": "string" },
                "profilePicture": { "default": "", "type": "string" },
                "contactEmail": { "default": "", "type": "string" },
                "website": { "default": "", "type": "string" },
                "socialAccounts": { "default": [], "type": "array", "items": { "type": "string" } },
                "handle": { "default": "", "type": "string" }
              },
              "required": ["id", "name", "createdAt", "updatedAt"],
              "title": "getPublicWorkspaceResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "getWorkspaceResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "id": { "type": "string" },
                "name": { "type": "string" },
                "ownerId": { "type": "string" },
                "createdAt": { "type": "string" },
                "updatedAt": { "type": "string" },
                "botCount": { "type": "number" },
                "billingVersion": { "type": "string", "enum": ["v1", "v2", "v3"] },
                "plan": { "type": "string", "enum": ["community", "team", "enterprise", "plus"] },
                "blocked": { "type": "boolean" },
                "spendingLimit": { "type": "number" },
                "about": { "default": "", "type": "string" },
                "profilePicture": { "default": "", "type": "string" },
                "contactEmail": { "default": "", "type": "string" },
                "website": { "default": "", "type": "string" },
                "socialAccounts": { "default": [], "type": "array", "items": { "type": "string" } },
                "isPublic": { "type": "boolean" },
                "handle": { "default": "", "type": "string" }
              },
              "required": [
                "id",
                "name",
                "ownerId",
                "createdAt",
                "updatedAt",
                "botCount",
                "billingVersion",
                "plan",
                "blocked",
                "spendingLimit"
              ],
              "title": "getWorkspaceResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "listWorkspaceUsagesResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "usages": { "type": "array", "items": { "$ref": "#/components/schemas/Usage" } } },
              "required": ["usages"],
              "title": "listWorkspaceUsagesResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "breakDownWorkspaceUsageByBotResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": { "botId": { "type": "string" }, "value": { "type": "number" } },
                    "required": ["botId", "value"]
                  }
                }
              },
              "required": ["data"],
              "title": "breakDownWorkspaceUsageByBotResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "getAllWorkspaceQuotaCompletionResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "invocation_timeout",
                      "invocation_calls",
                      "storage_count",
                      "bot_count",
                      "knowledgebase_vector_storage",
                      "workspace_ratelimit",
                      "table_row_count",
                      "workspace_member_count",
                      "integrations_owned_count",
                      "ai_spend",
                      "openai_spend",
                      "bing_search_spend",
                      "always_alive"
                    ]
                  },
                  "completion": { "type": "number" }
                },
                "required": ["type", "completion"],
                "additionalProperties": false
              },
              "title": "getAllWorkspaceQuotaCompletionResponse"
            }
          }
        }
      },
      "getWorkspaceQuotaResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "quota": {
                  "type": "object",
                  "properties": {
                    "period": { "type": "string", "description": "Period of the quota that it is applied to" },
                    "value": { "type": "number", "description": "Value of the quota that is used" },
                    "type": {
                      "type": "string",
                      "enum": [
                        "invocation_timeout",
                        "invocation_calls",
                        "storage_count",
                        "bot_count",
                        "knowledgebase_vector_storage",
                        "workspace_ratelimit",
                        "table_row_count",
                        "workspace_member_count",
                        "integrations_owned_count",
                        "ai_spend",
                        "openai_spend",
                        "bing_search_spend",
                        "always_alive"
                      ],
                      "description": "Usage type that can be used"
                    }
                  },
                  "required": ["period", "value", "type"],
                  "additionalProperties": false
                }
              },
              "required": ["quota"],
              "title": "getWorkspaceQuotaResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "listWorkspaceQuotasResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "quotas": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "period": { "type": "string", "description": "Period of the quota that it is applied to" },
                      "value": { "type": "number", "description": "Value of the quota that is used" },
                      "type": {
                        "type": "string",
                        "enum": [
                          "invocation_timeout",
                          "invocation_calls",
                          "storage_count",
                          "bot_count",
                          "knowledgebase_vector_storage",
                          "workspace_ratelimit",
                          "table_row_count",
                          "workspace_member_count",
                          "integrations_owned_count",
                          "ai_spend",
                          "openai_spend",
                          "bing_search_spend",
                          "always_alive"
                        ],
                        "description": "Usage type that can be used"
                      }
                    },
                    "required": ["period", "value", "type"]
                  }
                }
              },
              "required": ["quotas"],
              "title": "listWorkspaceQuotasResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "updateWorkspaceResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "id": { "type": "string" },
                "name": { "type": "string" },
                "ownerId": { "type": "string" },
                "createdAt": { "type": "string" },
                "updatedAt": { "type": "string" },
                "botCount": { "type": "number" },
                "billingVersion": { "type": "string", "enum": ["v1", "v2", "v3"] },
                "plan": { "type": "string", "enum": ["community", "team", "enterprise", "plus"] },
                "blocked": { "type": "boolean" },
                "spendingLimit": { "type": "number" },
                "about": { "default": "", "type": "string" },
                "profilePicture": { "default": "", "type": "string" },
                "contactEmail": { "default": "", "type": "string" },
                "website": { "default": "", "type": "string" },
                "socialAccounts": { "default": [], "type": "array", "items": { "type": "string" } },
                "isPublic": { "type": "boolean" },
                "handle": { "default": "", "type": "string" }
              },
              "required": [
                "id",
                "name",
                "ownerId",
                "createdAt",
                "updatedAt",
                "botCount",
                "billingVersion",
                "plan",
                "blocked",
                "spendingLimit"
              ],
              "title": "updateWorkspaceResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "checkHandleAvailabilityResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "available": { "type": "boolean" },
                "suggestions": { "type": "array", "items": { "type": "string" } },
                "usedBy": { "type": "string" }
              },
              "required": ["available", "suggestions"],
              "title": "checkHandleAvailabilityResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "listWorkspacesResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "workspaces": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string" },
                      "name": { "type": "string" },
                      "ownerId": { "type": "string" },
                      "createdAt": { "type": "string" },
                      "updatedAt": { "type": "string" },
                      "botCount": { "type": "number" },
                      "billingVersion": { "type": "string", "enum": ["v1", "v2", "v3"] },
                      "plan": { "type": "string", "enum": ["community", "team", "enterprise", "plus"] },
                      "blocked": { "type": "boolean" },
                      "spendingLimit": { "type": "number" },
                      "about": { "default": "", "type": "string" },
                      "profilePicture": { "default": "", "type": "string" },
                      "contactEmail": { "default": "", "type": "string" },
                      "website": { "default": "", "type": "string" },
                      "socialAccounts": { "default": [], "type": "array", "items": { "type": "string" } },
                      "isPublic": { "type": "boolean" },
                      "handle": { "default": "", "type": "string" }
                    },
                    "required": [
                      "id",
                      "name",
                      "ownerId",
                      "createdAt",
                      "updatedAt",
                      "botCount",
                      "billingVersion",
                      "plan",
                      "blocked",
                      "spendingLimit"
                    ],
                    "title": "updateWorkspaceResponse"
                  }
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "nextToken": {
                      "type": "string",
                      "description": "The token to use to retrieve the next page of results, passed as a query string parameter (value should be URL-encoded) to this API endpoint."
                    }
                  },
                  "additionalProperties": false
                }
              },
              "required": ["workspaces", "meta"],
              "title": "listWorkspacesResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "listPublicWorkspacesResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "workspaces": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string" },
                      "name": { "type": "string" },
                      "createdAt": { "type": "string" },
                      "updatedAt": { "type": "string" },
                      "about": { "default": "", "type": "string" },
                      "profilePicture": { "default": "", "type": "string" },
                      "contactEmail": { "default": "", "type": "string" },
                      "website": { "default": "", "type": "string" },
                      "socialAccounts": { "default": [], "type": "array", "items": { "type": "string" } },
                      "handle": { "default": "", "type": "string" }
                    },
                    "required": ["id", "name", "createdAt", "updatedAt"],
                    "title": "getPublicWorkspaceResponse"
                  }
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "nextToken": {
                      "type": "string",
                      "description": "The token to use to retrieve the next page of results, passed as a query string parameter (value should be URL-encoded) to this API endpoint."
                    }
                  },
                  "additionalProperties": false
                }
              },
              "required": ["workspaces", "meta"],
              "title": "listPublicWorkspacesResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "deleteWorkspaceResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": { "type": "object", "title": "deleteWorkspaceResponse", "additionalProperties": false }
          }
        }
      },
      "getAuditRecordsResponse": {
        "description": "List of audit records",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "records": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string" },
                      "recordedAt": { "type": "string", "format": "date-time" },
                      "userId": { "type": "string", "format": "uuid", "nullable": true },
                      "userEmail": { "type": "string", "nullable": true },
                      "resourceId": { "type": "string", "nullable": true },
                      "resourceName": { "type": "string", "nullable": true },
                      "value": { "type": "string", "nullable": true },
                      "action": {
                        "type": "string",
                        "enum": [
                          "UNKNOWN",
                          "ADD_WORKSPACE_MEMBER",
                          "REMOVE_WORKSPACE_MEMBER",
                          "UPDATE_WORKSPACE_MEMBER",
                          "CLOSE_WORKSPACE",
                          "CREATE_BOT",
                          "CREATE_WORKSPACE",
                          "DELETE_BOT",
                          "DEPLOY_BOT",
                          "TRANSFER_BOT",
                          "DOWNLOAD_BOT_ARCHIVE",
                          "UPDATE_BOT",
                          "UPDATE_BOT_CHANNEL",
                          "UPDATE_BOT_CONFIG",
                          "UPDATE_PAYMENT_METHOD",
                          "UPDATE_WORKSPACE",
                          "SET_SPENDING_LIMIT",
                          "SET_AI_SPENDING_LIMIT",
                          "UPDATE_WORKSPACE_BILLING_READONLY"
                        ]
                      }
                    },
                    "required": ["id", "recordedAt", "userId", "resourceId", "action"]
                  }
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "nextToken": {
                      "type": "string",
                      "description": "The token to use to retrieve the next page of results, passed as a query string parameter (value should be URL-encoded) to this API endpoint."
                    }
                  },
                  "additionalProperties": false
                }
              },
              "required": ["records", "meta"],
              "title": "getAuditRecordsResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "listWorkspaceMembersResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "members": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string" },
                      "userId": { "type": "string", "format": "uuid" },
                      "email": { "type": "string" },
                      "createdAt": { "type": "string" },
                      "role": {
                        "type": "string",
                        "enum": ["viewer", "billing", "developer", "manager", "administrator", "owner"]
                      },
                      "profilePicture": { "type": "string" },
                      "displayName": { "type": "string", "maxLength": 100 }
                    },
                    "required": ["id", "email", "createdAt", "role"]
                  }
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "nextToken": {
                      "type": "string",
                      "description": "The token to use to retrieve the next page of results, passed as a query string parameter (value should be URL-encoded) to this API endpoint."
                    }
                  },
                  "additionalProperties": false
                }
              },
              "required": ["members", "meta"],
              "title": "listWorkspaceMembersResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "getWorkspaceMemberResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "id": { "type": "string" },
                "userId": { "type": "string", "format": "uuid" },
                "email": { "type": "string" },
                "createdAt": { "type": "string" },
                "role": {
                  "type": "string",
                  "enum": ["viewer", "billing", "developer", "manager", "administrator", "owner"]
                },
                "profilePicture": { "type": "string" },
                "displayName": { "type": "string", "maxLength": 100 }
              },
              "required": ["id", "email", "createdAt", "role"],
              "title": "getWorkspaceMemberResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "deleteWorkspaceMemberResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": { "type": "object", "title": "deleteWorkspaceMemberResponse", "additionalProperties": false }
          }
        }
      },
      "createWorkspaceMemberResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "id": { "type": "string" },
                "userId": { "type": "string", "format": "uuid" },
                "email": { "type": "string" },
                "createdAt": { "type": "string" },
                "role": {
                  "type": "string",
                  "enum": ["viewer", "billing", "developer", "manager", "administrator", "owner"]
                },
                "profilePicture": { "type": "string" },
                "displayName": { "type": "string", "maxLength": 100 }
              },
              "required": ["id", "email", "createdAt", "role"],
              "title": "createWorkspaceMemberResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "updateWorkspaceMemberResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "id": { "type": "string" },
                "userId": { "type": "string", "format": "uuid" },
                "email": { "type": "string" },
                "createdAt": { "type": "string" },
                "role": {
                  "type": "string",
                  "enum": ["viewer", "billing", "developer", "manager", "administrator", "owner"]
                },
                "profilePicture": { "type": "string" },
                "displayName": { "type": "string", "maxLength": 100 }
              },
              "required": ["id", "email", "createdAt", "role"],
              "title": "updateWorkspaceMemberResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "listIntegrationApiKeysResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "iaks": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "string" },
                      "createdAt": { "type": "string", "format": "date-time" },
                      "note": { "type": "string" }
                    },
                    "required": ["id", "createdAt", "note"]
                  }
                }
              },
              "required": ["iaks"],
              "title": "listIntegrationApiKeysResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "createIntegrationApiKeyResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "id": { "type": "string" },
                "createdAt": { "type": "string", "format": "date-time" },
                "note": { "type": "string" },
                "value": {
                  "type": "string",
                  "description": "The IAK value. This will only be returned here when created and cannot be retrieved later."
                }
              },
              "required": ["id", "createdAt", "note", "value"],
              "title": "createIntegrationApiKeyResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "deleteIntegrationApiKeyResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": { "type": "object", "title": "deleteIntegrationApiKeyResponse", "additionalProperties": false }
          }
        }
      },
      "createIntegrationResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "integration": { "$ref": "#/components/schemas/Integration" } },
              "required": ["integration"],
              "title": "createIntegrationResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "validateIntegrationCreationResponse": {
        "description": "Validation succeeded: the integration can be created using the same parameters",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "validateIntegrationCreationResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "updateIntegrationResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "integration": { "$ref": "#/components/schemas/Integration" } },
              "required": ["integration"],
              "title": "updateIntegrationResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "validateIntegrationUpdateResponse": {
        "description": "Validation succeeded: the integration can be updated using the same parameters",
        "content": {
          "application/json": {
            "schema": { "type": "object", "title": "validateIntegrationUpdateResponse", "additionalProperties": false }
          }
        }
      },
      "listIntegrationsResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "integrations": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "minLength": 28,
                        "maxLength": 36,
                        "description": "ID of the [Integration](#schema_integration)"
                      },
                      "name": {
                        "type": "string",
                        "maxLength": 200,
                        "description": "Name of the [Integration](#schema_integration)"
                      },
                      "version": {
                        "type": "string",
                        "maxLength": 200,
                        "description": "Version of the [Integration](#schema_integration)"
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Creation date of the [Integration](#schema_integration) in ISO 8601 format"
                      },
                      "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Updating date of the [Integration](#schema_integration) in ISO 8601 format"
                      },
                      "title": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 64,
                        "description": "Title of the integration. This is the name that will be displayed in the UI"
                      },
                      "description": {
                        "type": "string",
                        "maxLength": 256,
                        "description": "Description of the integration. This is the description that will be displayed in the UI"
                      },
                      "iconUrl": {
                        "type": "string",
                        "description": "URL of the icon of the integration. This is the icon that will be displayed in the UI"
                      },
                      "public": {
                        "type": "boolean",
                        "description": "Idicates if the integration is public. Public integrations are available to all and cannot be updated without creating a new version."
                      },
                      "verificationStatus": {
                        "type": "string",
                        "enum": ["unapproved", "pending", "approved", "rejected"],
                        "description": "Status of the integration version verification"
                      },
                      "matchedOn": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "boolean",
                            "description": "Whether the integration name matched the search term"
                          },
                          "title": {
                            "type": "boolean",
                            "description": "Whether the integration title matched the search term"
                          },
                          "description": {
                            "type": "boolean",
                            "description": "Whether the integration description matched the search term"
                          },
                          "actions": {
                            "type": "array",
                            "items": { "type": "string" },
                            "description": "Action names that matched the search term"
                          },
                          "interfaces": {
                            "type": "array",
                            "items": { "type": "string" },
                            "description": "Interface names that matched the search term"
                          }
                        },
                        "description": "Metadata about which fields matched the search criteria"
                      },
                      "ownerWorkspace": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "string" },
                          "handle": { "type": "string", "nullable": true },
                          "name": { "type": "string" }
                        },
                        "required": ["id", "handle", "name"]
                      }
                    },
                    "required": [
                      "id",
                      "name",
                      "version",
                      "createdAt",
                      "updatedAt",
                      "title",
                      "description",
                      "iconUrl",
                      "public",
                      "verificationStatus"
                    ]
                  }
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "nextToken": {
                      "type": "string",
                      "description": "The token to use to retrieve the next page of results, passed as a query string parameter (value should be URL-encoded) to this API endpoint."
                    }
                  },
                  "additionalProperties": false
                }
              },
              "required": ["integrations", "meta"],
              "title": "listIntegrationsResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "getIntegrationResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "integration": { "$ref": "#/components/schemas/Integration" } },
              "required": ["integration"],
              "title": "getIntegrationResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "getIntegrationLogsResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "logs": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "timestamp": { "type": "string" },
                      "level": { "type": "string" },
                      "message": { "type": "string" },
                      "workflowId": { "type": "string" },
                      "userId": { "type": "string" },
                      "conversationId": { "type": "string" }
                    },
                    "required": ["timestamp", "level", "message"]
                  }
                },
                "nextToken": { "type": "string" }
              },
              "required": ["logs"],
              "title": "getIntegrationLogsResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "getIntegrationByNameResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "integration": { "$ref": "#/components/schemas/Integration" } },
              "required": ["integration"],
              "title": "getIntegrationByNameResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "deleteIntegrationResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": { "type": "object", "title": "deleteIntegrationResponse", "additionalProperties": false }
          }
        }
      },
      "requestIntegrationVerificationResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "requestIntegrationVerificationResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "createInterfaceResponse": {
        "description": "Get an interface",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "interface": { "$ref": "#/components/schemas/Interface" } },
              "required": ["interface"],
              "title": "createInterfaceResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "getInterfaceResponse": {
        "description": "Get an interface",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "interface": { "$ref": "#/components/schemas/Interface" } },
              "required": ["interface"],
              "title": "getInterfaceResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "getInterfaceByNameResponse": {
        "description": "Get an interface",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "interface": { "$ref": "#/components/schemas/Interface" } },
              "required": ["interface"],
              "title": "getInterfaceByNameResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "updateInterfaceResponse": {
        "description": "Update an interface",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "interface": { "$ref": "#/components/schemas/Interface" } },
              "required": ["interface"],
              "title": "updateInterfaceResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "deleteInterfaceResponse": {
        "description": "Delete an interface",
        "content": {
          "application/json": {
            "schema": { "type": "object", "title": "deleteInterfaceResponse", "additionalProperties": false }
          }
        }
      },
      "listInterfacesResponse": {
        "description": "List interfaces",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "interfaces": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "minLength": 28,
                        "maxLength": 36,
                        "description": "ID of the [Interface](#schema_interface)"
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Creation date of the [Interface](#schema_interface) in ISO 8601 format"
                      },
                      "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Updating date of the [Interface](#schema_interface) in ISO 8601 format"
                      },
                      "name": {
                        "type": "string",
                        "maxLength": 200,
                        "description": "Name of the [Interface](#schema_interface)"
                      },
                      "version": {
                        "type": "string",
                        "maxLength": 200,
                        "description": "Version of the [Interface](#schema_interface)"
                      }
                    },
                    "required": ["id", "createdAt", "updatedAt", "name", "version"]
                  }
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "nextToken": {
                      "type": "string",
                      "description": "The token to use to retrieve the next page of results, passed as a query string parameter (value should be URL-encoded) to this API endpoint."
                    }
                  },
                  "additionalProperties": false
                }
              },
              "required": ["interfaces", "meta"],
              "title": "listInterfacesResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "createPluginResponse": {
        "description": "Get an plugin",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "plugin": { "$ref": "#/components/schemas/Plugin" } },
              "required": ["plugin"],
              "title": "createPluginResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "getPluginResponse": {
        "description": "Get an plugin",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "plugin": { "$ref": "#/components/schemas/Plugin" } },
              "required": ["plugin"],
              "title": "getPluginResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "getPluginByNameResponse": {
        "description": "Get an plugin",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "plugin": { "$ref": "#/components/schemas/Plugin" } },
              "required": ["plugin"],
              "title": "getPluginByNameResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "updatePluginResponse": {
        "description": "Update an plugin",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "plugin": { "$ref": "#/components/schemas/Plugin" } },
              "required": ["plugin"],
              "title": "updatePluginResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "deletePluginResponse": {
        "description": "Delete an plugin",
        "content": {
          "application/json": {
            "schema": { "type": "object", "title": "deletePluginResponse", "additionalProperties": false }
          }
        }
      },
      "listPluginsResponse": {
        "description": "List plugins",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "plugins": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "minLength": 28,
                        "maxLength": 36,
                        "description": "ID of the [Plugin](#schema_plugin)"
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Creation date of the [Plugin](#schema_plugin) in ISO 8601 format"
                      },
                      "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Updating date of the [Plugin](#schema_plugin) in ISO 8601 format"
                      },
                      "name": {
                        "type": "string",
                        "maxLength": 200,
                        "description": "Name of the [Plugin](#schema_plugin)"
                      },
                      "version": {
                        "type": "string",
                        "maxLength": 200,
                        "description": "Version of the [Plugin](#schema_plugin)"
                      },
                      "title": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 64,
                        "description": "Title of the plugin. This is the name that will be displayed in the UI"
                      },
                      "description": {
                        "type": "string",
                        "maxLength": 256,
                        "description": "Description of the plugin. This is the description that will be displayed in the UI"
                      },
                      "iconUrl": {
                        "type": "string",
                        "description": "URL of the icon of the plugin. This is the icon that will be displayed in the UI"
                      },
                      "readmeUrl": {
                        "type": "string",
                        "description": "URL of the readme of the plugin. This is the readme that will be displayed in the UI"
                      }
                    },
                    "required": [
                      "id",
                      "createdAt",
                      "updatedAt",
                      "name",
                      "version",
                      "title",
                      "description",
                      "iconUrl",
                      "readmeUrl"
                    ]
                  }
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "nextToken": {
                      "type": "string",
                      "description": "The token to use to retrieve the next page of results, passed as a query string parameter (value should be URL-encoded) to this API endpoint."
                    }
                  },
                  "additionalProperties": false
                }
              },
              "required": ["plugins", "meta"],
              "title": "listPluginsResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "getPluginCodeResponse": {
        "description": "Plugin code",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "code": { "type": "string" } },
              "required": ["code"],
              "title": "getPluginCodeResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "getUsageResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "usage": { "$ref": "#/components/schemas/Usage" } },
              "required": ["usage"],
              "title": "getUsageResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "getMultipleUsagesResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "usages": { "type": "array", "items": { "$ref": "#/components/schemas/Usage" } } },
              "required": ["usages"],
              "title": "getMultipleUsagesResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "listUsageHistoryResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "usages": { "type": "array", "items": { "$ref": "#/components/schemas/Usage" } } },
              "required": ["usages"],
              "title": "listUsageHistoryResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "listUsageActivityResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "timestamp": { "type": "string" },
                      "value": { "type": "number" },
                      "period": { "type": "string" },
                      "metadata": { "type": "object", "additionalProperties": { "nullable": true } }
                    },
                    "required": ["timestamp", "value", "period", "metadata"]
                  }
                },
                "meta": {
                  "type": "object",
                  "properties": { "nextToken": { "type": "string" } },
                  "additionalProperties": false
                }
              },
              "required": ["data", "meta"],
              "title": "listUsageActivityResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "listUsageActivityDailyResponse": {
        "description": "Returns the daily usage activity.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": { "date": { "type": "string" }, "value": { "type": "number" } },
                    "required": ["date", "value"]
                  }
                },
                "meta": {
                  "type": "object",
                  "properties": { "nextToken": { "type": "string" } },
                  "additionalProperties": false
                }
              },
              "required": ["data", "meta"],
              "title": "listUsageActivityDailyResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "changeAISpendQuotaResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": { "type": "object", "title": "changeAISpendQuotaResponse", "additionalProperties": false }
          }
        }
      },
      "listActivitiesResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "activities": { "type": "array", "items": { "$ref": "#/components/schemas/Activity" } },
                "meta": {
                  "type": "object",
                  "properties": {
                    "nextToken": {
                      "type": "string",
                      "description": "The token to use to retrieve the next page of results, passed as a query string parameter (value should be URL-encoded) to this API endpoint."
                    }
                  },
                  "additionalProperties": false
                }
              },
              "required": ["activities", "meta"],
              "title": "listActivitiesResponse",
              "additionalProperties": false
            }
          }
        }
      },
      "introspectResponse": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "workspaceId": { "type": "string" },
                "botId": { "type": "string" },
                "userId": { "type": "string" }
              },
              "required": ["workspaceId", "botId", "userId"],
              "title": "introspectResponse",
              "additionalProperties": false
            }
          }
        }
      }
    },
    "requestBodies": {
      "runVrlBody": {
        "description": "VRL script",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": { "type": "object", "additionalProperties": true },
                "script": { "type": "string" }
              },
              "required": ["data", "script"],
              "title": "runVrlBody",
              "additionalProperties": false
            }
          }
        }
      },
      "updateAccountBody": {
        "description": "Account Data",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "displayName": { "type": "string", "maxLength": 100 },
                "profilePicture": { "type": "string" },
                "refresh": { "type": "boolean" }
              },
              "title": "updateAccountBody",
              "additionalProperties": false
            }
          }
        }
      },
      "createPersonalAccessTokenBody": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "note": { "type": "string", "description": "Note to identify the PAT" } },
              "required": ["note"],
              "title": "createPersonalAccessTokenBody",
              "additionalProperties": false
            }
          }
        }
      },
      "setAccountPreferenceBody": {
        "description": "Preference value",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "value": {} },
              "title": "setAccountPreferenceBody",
              "additionalProperties": false
            }
          }
        }
      },
      "createBotBody": {
        "description": "Bot metadata",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "states": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": ["conversation", "user", "bot", "task"],
                        "description": "Type of the [State](#schema_state) (`conversation`, `user`, `bot` or `task`)"
                      },
                      "schema": {
                        "type": "object",
                        "additionalProperties": true,
                        "description": "Schema of the [State](#schema_state) in the `JSON schema` format. This `JSON schema` is going to be used for validating the state data."
                      },
                      "expiry": {
                        "type": "number",
                        "minimum": 1,
                        "description": "Expiry of the [State](#schema_state) in milliseconds. The state will expire if it is idle for the configured value. By default, a state doesn't expire."
                      }
                    },
                    "required": ["type", "schema"],
                    "additionalProperties": false
                  },
                  "description": "A mapping of states to their definition"
                },
                "events": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "maxLength": 64, "description": "Title of the event" },
                      "description": { "type": "string", "maxLength": 256, "description": "Description of the event" },
                      "schema": { "type": "object", "additionalProperties": true }
                    },
                    "required": ["schema"],
                    "description": "Event Definition",
                    "additionalProperties": false
                  },
                  "description": "Events definition"
                },
                "recurringEvents": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "schedule": {
                        "type": "object",
                        "properties": { "cron": { "type": "string", "maxLength": 200 } },
                        "required": ["cron"],
                        "additionalProperties": false
                      },
                      "type": { "type": "string", "maxLength": 200 },
                      "payload": { "type": "object", "additionalProperties": true }
                    },
                    "required": ["schedule", "type", "payload"],
                    "additionalProperties": false
                  }
                },
                "subscriptions": {
                  "type": "object",
                  "properties": {
                    "events": {
                      "type": "object",
                      "additionalProperties": { "type": "object", "additionalProperties": false },
                      "nullable": true,
                      "description": "Events that the bot is currently subscribed on (ex: \"slack:reactionAdded\"). If null, the bot is subscribed to all events."
                    }
                  },
                  "required": ["events"],
                  "description": "Subscriptions of the bot",
                  "additionalProperties": false
                },
                "actions": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "maxLength": 64, "description": "Title of the action" },
                      "description": { "type": "string", "maxLength": 256, "description": "Description of the action" },
                      "billable": { "type": "boolean" },
                      "cacheable": { "type": "boolean" },
                      "input": {
                        "type": "object",
                        "properties": { "schema": { "type": "object", "additionalProperties": true } },
                        "required": ["schema"],
                        "additionalProperties": false
                      },
                      "output": {
                        "type": "object",
                        "properties": { "schema": { "type": "object", "additionalProperties": true } },
                        "required": ["schema"],
                        "additionalProperties": false
                      }
                    },
                    "required": ["input", "output"],
                    "description": "Action definition",
                    "additionalProperties": false
                  },
                  "description": "Actions definition"
                },
                "configuration": {
                  "type": "object",
                  "properties": {
                    "data": { "type": "object", "additionalProperties": true, "description": "Configuration data" },
                    "schema": {
                      "type": "object",
                      "additionalProperties": true,
                      "description": "Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`."
                    }
                  },
                  "additionalProperties": false
                },
                "user": {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                          "description": { "type": "string", "maxLength": 256, "description": "Description of the tag" }
                        },
                        "description": "Definition of a tag that can be provided on the object",
                        "additionalProperties": false
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "conversation": {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                          "description": { "type": "string", "maxLength": 256, "description": "Description of the tag" }
                        },
                        "description": "Definition of a tag that can be provided on the object",
                        "additionalProperties": false
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "message": {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                          "description": { "type": "string", "maxLength": 256, "description": "Description of the tag" }
                        },
                        "description": "Definition of a tag that can be provided on the object",
                        "additionalProperties": false
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "tags": {
                  "type": "object",
                  "additionalProperties": { "type": "string", "maxLength": 500 },
                  "description": "Tags of the [Bot](#schema_bot)"
                },
                "code": { "type": "string", "description": "JavaScript code of the bot" },
                "name": {
                  "type": "string",
                  "minLength": 1,
                  "description": "Optional name for the bot, if not provided will be auto-generated"
                },
                "medias": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": { "url": { "type": "string" }, "name": { "type": "string" } },
                    "required": ["url", "name"]
                  },
                  "description": "Media files associated with the [Bot](#schema_bot)"
                },
                "url": {
                  "type": "string",
                  "description": "URL of the [Bot](#schema_bot); Only available for dev bots"
                },
                "dev": {
                  "type": "boolean",
                  "description": "Indicates if the [Bot](#schema_bot) is a development bot; Development bots run locally and can install dev integrations"
                }
              },
              "title": "createBotBody",
              "additionalProperties": false
            }
          }
        }
      },
      "updateBotBody": {
        "description": "Bot metadata",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "description": "URL of the [Bot](#schema_bot); Only available for dev bots"
                },
                "authentication": {
                  "type": "string",
                  "enum": ["iam"],
                  "description": "Type of the [Bot](#schema_bot) authentication (`iam`)"
                },
                "configuration": {
                  "type": "object",
                  "properties": {
                    "data": { "type": "object", "additionalProperties": true, "description": "Configuration data" },
                    "schema": {
                      "type": "object",
                      "additionalProperties": true,
                      "description": "Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`."
                    }
                  },
                  "additionalProperties": false
                },
                "tags": {
                  "type": "object",
                  "additionalProperties": { "type": "string", "maxLength": 500 },
                  "description": "Tags of the [Bot](#schema_bot)"
                },
                "blocked": { "type": "boolean" },
                "alwaysAlive": {
                  "type": "boolean",
                  "description": "Indicates if the [Bot](#schema_bot) should be in always alive mode"
                },
                "user": {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                          "description": { "type": "string", "maxLength": 256, "description": "Description of the tag" }
                        },
                        "description": "Definition of a tag that can be provided on the object",
                        "nullable": true,
                        "additionalProperties": false
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "message": {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                          "description": { "type": "string", "maxLength": 256, "description": "Description of the tag" }
                        },
                        "description": "Definition of a tag that can be provided on the object",
                        "nullable": true,
                        "additionalProperties": false
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "conversation": {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                          "description": { "type": "string", "maxLength": 256, "description": "Description of the tag" }
                        },
                        "description": "Definition of a tag that can be provided on the object",
                        "nullable": true,
                        "additionalProperties": false
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "events": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "maxLength": 64, "description": "Title of the event" },
                      "description": { "type": "string", "maxLength": 256, "description": "Description of the event" },
                      "schema": { "type": "object", "additionalProperties": true }
                    },
                    "required": ["schema"],
                    "description": "Event Definition",
                    "nullable": true,
                    "additionalProperties": false
                  }
                },
                "actions": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "maxLength": 64, "description": "Title of the action" },
                      "description": { "type": "string", "maxLength": 256, "description": "Description of the action" },
                      "billable": { "type": "boolean" },
                      "cacheable": { "type": "boolean" },
                      "input": {
                        "type": "object",
                        "properties": { "schema": { "type": "object", "additionalProperties": true } },
                        "required": ["schema"],
                        "additionalProperties": false
                      },
                      "output": {
                        "type": "object",
                        "properties": { "schema": { "type": "object", "additionalProperties": true } },
                        "required": ["schema"],
                        "additionalProperties": false
                      }
                    },
                    "required": ["input", "output"],
                    "description": "Action definition",
                    "nullable": true,
                    "additionalProperties": false
                  }
                },
                "states": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": ["conversation", "user", "bot", "task"],
                        "description": "Type of the [State](#schema_state) (`conversation`, `user`, `bot` or `task`)"
                      },
                      "schema": {
                        "type": "object",
                        "additionalProperties": true,
                        "description": "Schema of the [State](#schema_state) in the `JSON schema` format. This `JSON schema` is going to be used for validating the state data."
                      },
                      "expiry": {
                        "type": "number",
                        "minimum": 1,
                        "description": "Expiry of the [State](#schema_state) in milliseconds. The state will expire if it is idle for the configured value. By default, a state doesn't expire."
                      }
                    },
                    "required": ["type", "schema"],
                    "nullable": true,
                    "additionalProperties": false
                  }
                },
                "recurringEvents": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "schedule": {
                        "type": "object",
                        "properties": { "cron": { "type": "string", "maxLength": 200 } },
                        "required": ["cron"],
                        "additionalProperties": false
                      },
                      "type": { "type": "string", "maxLength": 200 },
                      "payload": { "type": "object", "additionalProperties": true }
                    },
                    "required": ["schedule", "type", "payload"],
                    "nullable": true,
                    "additionalProperties": false
                  }
                },
                "integrations": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "enabled": { "type": "boolean" },
                      "configurationType": {
                        "type": "string",
                        "nullable": true,
                        "description": "Integration's configuration type. Set to default if null."
                      },
                      "configuration": { "type": "object", "additionalProperties": true }
                    },
                    "nullable": true,
                    "additionalProperties": false
                  }
                },
                "subscriptions": {
                  "type": "object",
                  "properties": {
                    "events": {
                      "type": "object",
                      "additionalProperties": { "type": "object", "nullable": true, "additionalProperties": false },
                      "nullable": true
                    }
                  },
                  "required": ["events"],
                  "additionalProperties": false
                },
                "code": { "type": "string", "description": "JavaScript code of the bot" },
                "name": {
                  "type": "string",
                  "minLength": 1,
                  "description": "Optional name for the bot, if not provided will be auto-generated"
                },
                "medias": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": { "url": { "type": "string" }, "name": { "type": "string" } },
                    "required": ["url", "name"]
                  },
                  "description": "Media files associated with the [Bot](#schema_bot)"
                }
              },
              "title": "updateBotBody",
              "additionalProperties": false
            }
          }
        }
      },
      "transferBotBody": {
        "description": "Bot transfer request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "targetWorkspaceId": {
                  "type": "string",
                  "minLength": 28,
                  "description": "The ID of the workspace you want to transfer the bot to."
                }
              },
              "required": ["targetWorkspaceId"],
              "title": "transferBotBody",
              "additionalProperties": false
            }
          }
        }
      },
      "createBotVersionBody": {
        "description": "Version metadata",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "name": { "type": "string" }, "description": { "type": "string" } },
              "required": ["name"],
              "title": "createBotVersionBody",
              "additionalProperties": false
            }
          }
        }
      },
      "deployBotVersionBody": {
        "description": "Version metadata",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "versionId": { "type": "string" } },
              "required": ["versionId"],
              "title": "deployBotVersionBody",
              "additionalProperties": false
            }
          }
        }
      },
      "createIntegrationShareableIdBody": {
        "description": "Empty body",
        "content": {
          "application/json": {
            "schema": { "type": "object", "title": "createIntegrationShareableIdBody", "additionalProperties": false }
          }
        }
      },
      "chargeWorkspaceUnpaidInvoicesBody": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "invoiceIds": { "type": "array", "items": { "type": "string" }, "minItems": 1 } },
              "title": "chargeWorkspaceUnpaidInvoicesBody",
              "additionalProperties": false
            }
          }
        }
      },
      "createWorkspaceBody": {
        "description": "Workspace metadata",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "name": { "type": "string" } },
              "required": ["name"],
              "title": "createWorkspaceBody",
              "additionalProperties": false
            }
          }
        }
      },
      "updateWorkspaceBody": {
        "description": "Workspace metadata",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "name": { "type": "string", "minLength": 1, "maxLength": 64 },
                "spendingLimit": { "type": "number", "minimum": 5, "maximum": 1000 },
                "about": { "type": "string" },
                "profilePicture": { "type": "string" },
                "contactEmail": { "type": "string" },
                "website": { "type": "string" },
                "socialAccounts": { "type": "array", "items": { "type": "string" }, "maxItems": 5 },
                "isPublic": { "type": "boolean" },
                "handle": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 64,
                  "pattern": "^[0-9a-z][a-z0-9-_]+[0-9a-z]$"
                }
              },
              "additionalProperties": false,
              "title": "updateWorkspaceBody"
            }
          }
        }
      },
      "checkHandleAvailabilityBody": {
        "description": "Workspace handle availability",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "handle": { "type": "string", "minLength": 1, "maxLength": 50, "pattern": "^[a-z0-9-_]+$" }
              },
              "required": ["handle"],
              "title": "checkHandleAvailabilityBody",
              "additionalProperties": false
            }
          }
        }
      },
      "createWorkspaceMemberBody": {
        "description": "Workspace member metadata",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "email": { "type": "string", "format": "email" },
                "role": {
                  "type": "string",
                  "enum": ["viewer", "billing", "developer", "manager", "administrator", "owner"]
                }
              },
              "required": ["email", "role"],
              "title": "createWorkspaceMemberBody",
              "additionalProperties": false
            }
          }
        }
      },
      "updateWorkspaceMemberBody": {
        "description": "Workspace member metadata",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "role": {
                  "type": "string",
                  "enum": ["viewer", "billing", "developer", "manager", "administrator", "owner"]
                }
              },
              "title": "updateWorkspaceMemberBody",
              "additionalProperties": false
            }
          }
        }
      },
      "createIntegrationApiKeyBody": {
        "description": "IAK metadata",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "integrationId": { "type": "string" }, "note": { "type": "string" } },
              "required": ["integrationId"],
              "title": "createIntegrationApiKeyBody",
              "additionalProperties": false
            }
          }
        }
      },
      "createIntegrationBody": {
        "description": "Integration",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "maxLength": 200,
                  "description": "Name of the [Integration](#schema_integration)"
                },
                "version": {
                  "type": "string",
                  "maxLength": 200,
                  "description": "Version of the [Integration](#schema_integration)"
                },
                "configuration": {
                  "type": "object",
                  "properties": {
                    "title": { "type": "string", "maxLength": 64, "description": "Title of the configuration" },
                    "description": {
                      "type": "string",
                      "maxLength": 256,
                      "description": "Description of the configuration"
                    },
                    "schema": {
                      "type": "object",
                      "additionalProperties": true,
                      "description": "Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`."
                    },
                    "identifier": {
                      "type": "object",
                      "properties": {
                        "required": { "type": "boolean" },
                        "linkTemplateScript": { "type": "string", "maxLength": 2000 }
                      },
                      "additionalProperties": false
                    }
                  },
                  "description": "Default configuration definition of the integration",
                  "additionalProperties": false
                },
                "configurations": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "maxLength": 64, "description": "Title of the configuration" },
                      "description": {
                        "type": "string",
                        "maxLength": 256,
                        "description": "Description of the configuration"
                      },
                      "schema": {
                        "type": "object",
                        "additionalProperties": true,
                        "description": "Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`."
                      },
                      "identifier": {
                        "type": "object",
                        "properties": {
                          "required": { "type": "boolean" },
                          "linkTemplateScript": { "type": "string", "maxLength": 2000 }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "description": "Additional configuration definitions of the integration"
                },
                "states": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": ["conversation", "user", "integration"],
                        "description": "Type of the [State](#schema_state) (`conversation`, `user` or `integration`)"
                      },
                      "schema": {
                        "type": "object",
                        "additionalProperties": true,
                        "description": "Schema of the [State](#schema_state) in the `JSON schema` format. This `JSON schema` is going to be used for validating the state data."
                      }
                    },
                    "required": ["type", "schema"],
                    "description": "State definition",
                    "additionalProperties": false
                  }
                },
                "events": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "maxLength": 64, "description": "Title of the event" },
                      "description": { "type": "string", "maxLength": 256, "description": "Description of the event" },
                      "schema": { "type": "object", "additionalProperties": true }
                    },
                    "required": ["schema"],
                    "description": "Event Definition",
                    "additionalProperties": false
                  }
                },
                "actions": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "maxLength": 64, "description": "Title of the action" },
                      "description": { "type": "string", "maxLength": 256, "description": "Description of the action" },
                      "billable": { "type": "boolean" },
                      "cacheable": { "type": "boolean" },
                      "input": {
                        "type": "object",
                        "properties": { "schema": { "type": "object", "additionalProperties": true } },
                        "required": ["schema"],
                        "additionalProperties": false
                      },
                      "output": {
                        "type": "object",
                        "properties": { "schema": { "type": "object", "additionalProperties": true } },
                        "required": ["schema"],
                        "additionalProperties": false
                      }
                    },
                    "required": ["input", "output"],
                    "description": "Action definition",
                    "additionalProperties": false
                  }
                },
                "entities": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "maxLength": 64, "description": "Title of the entity" },
                      "description": { "type": "string", "maxLength": 256, "description": "Description of the entity" },
                      "schema": { "type": "object", "additionalProperties": true }
                    },
                    "required": ["schema"],
                    "description": "Entity definition",
                    "additionalProperties": false
                  }
                },
                "identifier": {
                  "type": "object",
                  "properties": {
                    "fallbackHandlerScript": { "type": "string", "maxLength": 2000 },
                    "extractScript": { "type": "string", "maxLength": 2000 }
                  },
                  "additionalProperties": false
                },
                "channels": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "maxLength": 64, "description": "Title of the channel" },
                      "description": {
                        "type": "string",
                        "maxLength": 256,
                        "description": "Description of the channel"
                      },
                      "messages": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": { "schema": { "type": "object", "additionalProperties": true } },
                          "required": ["schema"],
                          "description": "Message definition",
                          "additionalProperties": false
                        }
                      },
                      "conversation": {
                        "type": "object",
                        "properties": {
                          "creation": {
                            "type": "object",
                            "properties": {
                              "enabled": { "type": "boolean", "description": "Enable conversation creation" },
                              "requiredTags": {
                                "type": "array",
                                "items": { "type": "string" },
                                "description": "The list of tags that are required to be specified when calling the API directly to create a conversation."
                              }
                            },
                            "required": ["enabled", "requiredTags"],
                            "description": "The conversation creation setting determines how to create a conversation through the API directly. The integration will have to implement the `createConversation` functionality to support this setting.",
                            "additionalProperties": false
                          },
                          "tags": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "object",
                              "properties": {
                                "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                                "description": {
                                  "type": "string",
                                  "maxLength": 256,
                                  "description": "Description of the tag"
                                }
                              },
                              "description": "Definition of a tag that can be provided on the object",
                              "additionalProperties": false
                            }
                          }
                        },
                        "additionalProperties": false
                      },
                      "message": {
                        "type": "object",
                        "properties": {
                          "tags": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "object",
                              "properties": {
                                "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                                "description": {
                                  "type": "string",
                                  "maxLength": 256,
                                  "description": "Description of the tag"
                                }
                              },
                              "description": "Definition of a tag that can be provided on the object",
                              "additionalProperties": false
                            }
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "required": ["messages"],
                    "additionalProperties": false
                  }
                },
                "user": {
                  "type": "object",
                  "properties": {
                    "creation": {
                      "type": "object",
                      "properties": {
                        "enabled": { "type": "boolean", "description": "Enable user creation" },
                        "requiredTags": {
                          "type": "array",
                          "items": { "type": "string" },
                          "description": "The list of tags that are required to be specified when calling the API directly to create a user."
                        }
                      },
                      "required": ["enabled", "requiredTags"],
                      "description": "The user creation setting determines how to create a user through the API directly. The integration will have to implement the `createUser` functionality to support this setting.",
                      "additionalProperties": false
                    },
                    "tags": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                          "description": { "type": "string", "maxLength": 256, "description": "Description of the tag" }
                        },
                        "description": "Definition of a tag that can be provided on the object",
                        "additionalProperties": false
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "interfaces": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "minLength": 28,
                        "maxLength": 36,
                        "description": "ID of the interface"
                      },
                      "entities": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": { "name": { "type": "string", "maxLength": 200 } },
                          "required": ["name"],
                          "additionalProperties": false
                        }
                      },
                      "actions": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": { "name": { "type": "string", "maxLength": 200 } },
                          "required": ["name"],
                          "additionalProperties": false
                        }
                      },
                      "events": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": { "name": { "type": "string", "maxLength": 200 } },
                          "required": ["name"],
                          "additionalProperties": false
                        }
                      },
                      "channels": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": { "name": { "type": "string", "maxLength": 200 } },
                          "required": ["name"],
                          "additionalProperties": false
                        }
                      }
                    },
                    "required": ["id"],
                    "additionalProperties": false
                  }
                },
                "secrets": {
                  "type": "object",
                  "additionalProperties": { "type": "string", "maxLength": 20000, "nullable": true },
                  "description": "Secrets are integration-wide values available in the code via environment variables formatted with a SECRET_ prefix followed by your secret name. A secret name must respect SCREAMING_SNAKE casing."
                },
                "code": { "type": "string", "description": "JavaScript code of the integration" },
                "url": { "type": "string", "description": "URL of the integration" },
                "dev": {
                  "type": "boolean",
                  "description": "Indicates if the integration is a development integration; Dev integrations run locally"
                },
                "icon": {
                  "type": "string",
                  "description": "Base64 encoded svg of the integration icon. This icon is global to the integration each versions will be updated when this changes."
                },
                "readme": {
                  "type": "string",
                  "description": "Base64 encoded markdown of the integration readme. The readme is specific to each integration versions."
                },
                "title": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 64,
                  "description": "Title of the integration. This is the name that will be displayed in the UI"
                },
                "description": {
                  "type": "string",
                  "maxLength": 256,
                  "description": "Description of the integration. This is the description that will be displayed in the UI"
                },
                "public": {
                  "type": "boolean",
                  "description": "Idicates if the integration is public. Public integrations are available to all and cannot be updated without creating a new version."
                },
                "layers": { "type": "array", "items": { "type": "string" } }
              },
              "required": ["name", "version"],
              "title": "createIntegrationBody",
              "additionalProperties": false
            }
          }
        }
      },
      "validateIntegrationCreationBody": {
        "description": "Integration",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "maxLength": 200,
                  "description": "Name of the [Integration](#schema_integration)"
                },
                "version": {
                  "type": "string",
                  "maxLength": 200,
                  "description": "Version of the [Integration](#schema_integration)"
                },
                "configuration": {
                  "type": "object",
                  "properties": {
                    "title": { "type": "string", "maxLength": 64, "description": "Title of the configuration" },
                    "description": {
                      "type": "string",
                      "maxLength": 256,
                      "description": "Description of the configuration"
                    },
                    "schema": {
                      "type": "object",
                      "additionalProperties": true,
                      "description": "Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`."
                    },
                    "identifier": {
                      "type": "object",
                      "properties": {
                        "required": { "type": "boolean" },
                        "linkTemplateScript": { "type": "string", "maxLength": 2000 }
                      },
                      "additionalProperties": false
                    }
                  },
                  "description": "Default configuration definition of the integration",
                  "additionalProperties": false
                },
                "configurations": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "maxLength": 64, "description": "Title of the configuration" },
                      "description": {
                        "type": "string",
                        "maxLength": 256,
                        "description": "Description of the configuration"
                      },
                      "schema": {
                        "type": "object",
                        "additionalProperties": true,
                        "description": "Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`."
                      },
                      "identifier": {
                        "type": "object",
                        "properties": {
                          "required": { "type": "boolean" },
                          "linkTemplateScript": { "type": "string", "maxLength": 2000 }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "description": "Additional configuration definitions of the integration"
                },
                "states": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": ["conversation", "user", "integration"],
                        "description": "Type of the [State](#schema_state) (`conversation`, `user` or `integration`)"
                      },
                      "schema": {
                        "type": "object",
                        "additionalProperties": true,
                        "description": "Schema of the [State](#schema_state) in the `JSON schema` format. This `JSON schema` is going to be used for validating the state data."
                      }
                    },
                    "required": ["type", "schema"],
                    "description": "State definition",
                    "additionalProperties": false
                  }
                },
                "events": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "maxLength": 64, "description": "Title of the event" },
                      "description": { "type": "string", "maxLength": 256, "description": "Description of the event" },
                      "schema": { "type": "object", "additionalProperties": true }
                    },
                    "required": ["schema"],
                    "description": "Event Definition",
                    "additionalProperties": false
                  }
                },
                "actions": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "maxLength": 64, "description": "Title of the action" },
                      "description": { "type": "string", "maxLength": 256, "description": "Description of the action" },
                      "billable": { "type": "boolean" },
                      "cacheable": { "type": "boolean" },
                      "input": {
                        "type": "object",
                        "properties": { "schema": { "type": "object", "additionalProperties": true } },
                        "required": ["schema"],
                        "additionalProperties": false
                      },
                      "output": {
                        "type": "object",
                        "properties": { "schema": { "type": "object", "additionalProperties": true } },
                        "required": ["schema"],
                        "additionalProperties": false
                      }
                    },
                    "required": ["input", "output"],
                    "description": "Action definition",
                    "additionalProperties": false
                  }
                },
                "entities": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "maxLength": 64, "description": "Title of the entity" },
                      "description": { "type": "string", "maxLength": 256, "description": "Description of the entity" },
                      "schema": { "type": "object", "additionalProperties": true }
                    },
                    "required": ["schema"],
                    "description": "Entity definition",
                    "additionalProperties": false
                  }
                },
                "identifier": {
                  "type": "object",
                  "properties": {
                    "fallbackHandlerScript": { "type": "string", "maxLength": 2000 },
                    "extractScript": { "type": "string", "maxLength": 2000 }
                  },
                  "additionalProperties": false
                },
                "channels": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "maxLength": 64, "description": "Title of the channel" },
                      "description": {
                        "type": "string",
                        "maxLength": 256,
                        "description": "Description of the channel"
                      },
                      "messages": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": { "schema": { "type": "object", "additionalProperties": true } },
                          "required": ["schema"],
                          "description": "Message definition",
                          "additionalProperties": false
                        }
                      },
                      "conversation": {
                        "type": "object",
                        "properties": {
                          "creation": {
                            "type": "object",
                            "properties": {
                              "enabled": { "type": "boolean", "description": "Enable conversation creation" },
                              "requiredTags": {
                                "type": "array",
                                "items": { "type": "string" },
                                "description": "The list of tags that are required to be specified when calling the API directly to create a conversation."
                              }
                            },
                            "required": ["enabled", "requiredTags"],
                            "description": "The conversation creation setting determines how to create a conversation through the API directly. The integration will have to implement the `createConversation` functionality to support this setting.",
                            "additionalProperties": false
                          },
                          "tags": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "object",
                              "properties": {
                                "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                                "description": {
                                  "type": "string",
                                  "maxLength": 256,
                                  "description": "Description of the tag"
                                }
                              },
                              "description": "Definition of a tag that can be provided on the object",
                              "additionalProperties": false
                            }
                          }
                        },
                        "additionalProperties": false
                      },
                      "message": {
                        "type": "object",
                        "properties": {
                          "tags": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "object",
                              "properties": {
                                "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                                "description": {
                                  "type": "string",
                                  "maxLength": 256,
                                  "description": "Description of the tag"
                                }
                              },
                              "description": "Definition of a tag that can be provided on the object",
                              "additionalProperties": false
                            }
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "required": ["messages"],
                    "additionalProperties": false
                  }
                },
                "user": {
                  "type": "object",
                  "properties": {
                    "creation": {
                      "type": "object",
                      "properties": {
                        "enabled": { "type": "boolean", "description": "Enable user creation" },
                        "requiredTags": {
                          "type": "array",
                          "items": { "type": "string" },
                          "description": "The list of tags that are required to be specified when calling the API directly to create a user."
                        }
                      },
                      "required": ["enabled", "requiredTags"],
                      "description": "The user creation setting determines how to create a user through the API directly. The integration will have to implement the `createUser` functionality to support this setting.",
                      "additionalProperties": false
                    },
                    "tags": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                          "description": { "type": "string", "maxLength": 256, "description": "Description of the tag" }
                        },
                        "description": "Definition of a tag that can be provided on the object",
                        "additionalProperties": false
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "interfaces": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "minLength": 28,
                        "maxLength": 36,
                        "description": "ID of the interface"
                      },
                      "entities": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": { "name": { "type": "string", "maxLength": 200 } },
                          "required": ["name"],
                          "additionalProperties": false
                        }
                      },
                      "actions": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": { "name": { "type": "string", "maxLength": 200 } },
                          "required": ["name"],
                          "additionalProperties": false
                        }
                      },
                      "events": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": { "name": { "type": "string", "maxLength": 200 } },
                          "required": ["name"],
                          "additionalProperties": false
                        }
                      },
                      "channels": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": { "name": { "type": "string", "maxLength": 200 } },
                          "required": ["name"],
                          "additionalProperties": false
                        }
                      }
                    },
                    "required": ["id"],
                    "additionalProperties": false
                  }
                },
                "secrets": {
                  "type": "object",
                  "additionalProperties": { "type": "string", "maxLength": 20000, "nullable": true },
                  "description": "Secrets are integration-wide values available in the code via environment variables formatted with a SECRET_ prefix followed by your secret name. A secret name must respect SCREAMING_SNAKE casing."
                },
                "code": { "type": "string", "description": "JavaScript code of the integration" },
                "url": { "type": "string", "description": "URL of the integration" },
                "dev": {
                  "type": "boolean",
                  "description": "Indicates if the integration is a development integration; Dev integrations run locally"
                },
                "icon": {
                  "type": "string",
                  "description": "Base64 encoded svg of the integration icon. This icon is global to the integration each versions will be updated when this changes."
                },
                "readme": {
                  "type": "string",
                  "description": "Base64 encoded markdown of the integration readme. The readme is specific to each integration versions."
                },
                "title": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 64,
                  "description": "Title of the integration. This is the name that will be displayed in the UI"
                },
                "description": {
                  "type": "string",
                  "maxLength": 256,
                  "description": "Description of the integration. This is the description that will be displayed in the UI"
                },
                "public": {
                  "type": "boolean",
                  "description": "Idicates if the integration is public. Public integrations are available to all and cannot be updated without creating a new version."
                },
                "layers": { "type": "array", "items": { "type": "string" } }
              },
              "required": ["name", "version"],
              "title": "validateIntegrationCreationBody",
              "additionalProperties": false
            }
          }
        }
      },
      "updateIntegrationBody": {
        "description": "Integration",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "configuration": {
                  "type": "object",
                  "properties": {
                    "title": { "type": "string", "maxLength": 64, "description": "Title of the configuration" },
                    "description": {
                      "type": "string",
                      "maxLength": 256,
                      "description": "Description of the configuration"
                    },
                    "schema": {
                      "type": "object",
                      "additionalProperties": true,
                      "description": "Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`."
                    },
                    "identifier": {
                      "type": "object",
                      "properties": {
                        "linkTemplateScript": { "type": "string", "maxLength": 2000, "nullable": true },
                        "required": { "type": "boolean" }
                      },
                      "additionalProperties": false
                    }
                  },
                  "description": "Default configuration definition of the integration",
                  "additionalProperties": false
                },
                "configurations": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "maxLength": 64, "description": "Title of the configuration" },
                      "description": {
                        "type": "string",
                        "maxLength": 256,
                        "description": "Description of the configuration"
                      },
                      "schema": {
                        "type": "object",
                        "additionalProperties": true,
                        "description": "Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`."
                      },
                      "identifier": {
                        "type": "object",
                        "properties": {
                          "linkTemplateScript": { "type": "string", "maxLength": 2000, "nullable": true },
                          "required": { "type": "boolean" }
                        },
                        "additionalProperties": false
                      }
                    },
                    "nullable": true,
                    "additionalProperties": false
                  },
                  "description": "Additional configuration definitions of the integration"
                },
                "channels": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "maxLength": 64, "description": "Title of the channel" },
                      "description": {
                        "type": "string",
                        "maxLength": 256,
                        "description": "Description of the channel"
                      },
                      "messages": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": { "schema": { "type": "object", "additionalProperties": true } },
                          "required": ["schema"],
                          "description": "Message definition",
                          "nullable": true,
                          "additionalProperties": false
                        }
                      },
                      "conversation": {
                        "type": "object",
                        "properties": {
                          "creation": {
                            "type": "object",
                            "properties": {
                              "enabled": { "type": "boolean", "description": "Enable conversation creation" },
                              "requiredTags": {
                                "type": "array",
                                "items": { "type": "string" },
                                "description": "The list of tags that are required to be specified when calling the API directly to create a conversation."
                              }
                            },
                            "required": ["enabled", "requiredTags"],
                            "description": "The conversation creation setting determines how to create a conversation through the API directly. The integration will have to implement the `createConversation` functionality to support this setting.",
                            "additionalProperties": false
                          },
                          "tags": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "object",
                              "properties": {
                                "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                                "description": {
                                  "type": "string",
                                  "maxLength": 256,
                                  "description": "Description of the tag"
                                }
                              },
                              "description": "Definition of a tag that can be provided on the object",
                              "nullable": true,
                              "additionalProperties": false
                            }
                          }
                        },
                        "additionalProperties": false
                      },
                      "message": {
                        "type": "object",
                        "properties": {
                          "tags": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "object",
                              "properties": {
                                "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                                "description": {
                                  "type": "string",
                                  "maxLength": 256,
                                  "description": "Description of the tag"
                                }
                              },
                              "description": "Definition of a tag that can be provided on the object",
                              "nullable": true,
                              "additionalProperties": false
                            }
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "nullable": true,
                    "additionalProperties": false
                  }
                },
                "identifier": {
                  "type": "object",
                  "properties": {
                    "extractScript": { "type": "string", "maxLength": 2000, "nullable": true },
                    "fallbackHandlerScript": { "type": "string", "maxLength": 2000, "nullable": true }
                  },
                  "additionalProperties": false
                },
                "actions": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "maxLength": 64, "description": "Title of the action" },
                      "description": { "type": "string", "maxLength": 256, "description": "Description of the action" },
                      "billable": { "type": "boolean" },
                      "cacheable": { "type": "boolean" },
                      "input": {
                        "type": "object",
                        "properties": { "schema": { "type": "object", "additionalProperties": true } },
                        "required": ["schema"],
                        "additionalProperties": false
                      },
                      "output": {
                        "type": "object",
                        "properties": { "schema": { "type": "object", "additionalProperties": true } },
                        "required": ["schema"],
                        "additionalProperties": false
                      }
                    },
                    "required": ["input", "output"],
                    "description": "Action definition",
                    "nullable": true,
                    "additionalProperties": false
                  }
                },
                "events": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "maxLength": 64, "description": "Title of the event" },
                      "description": { "type": "string", "maxLength": 256, "description": "Description of the event" },
                      "schema": { "type": "object", "additionalProperties": true }
                    },
                    "required": ["schema"],
                    "description": "Event Definition",
                    "nullable": true,
                    "additionalProperties": false
                  }
                },
                "states": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": ["conversation", "user", "integration"],
                        "description": "Type of the [State](#schema_state) (`conversation`, `user` or `integration`)"
                      },
                      "schema": {
                        "type": "object",
                        "additionalProperties": true,
                        "description": "Schema of the [State](#schema_state) in the `JSON schema` format. This `JSON schema` is going to be used for validating the state data."
                      }
                    },
                    "required": ["type", "schema"],
                    "description": "State definition",
                    "nullable": true,
                    "additionalProperties": false
                  }
                },
                "user": {
                  "type": "object",
                  "properties": {
                    "creation": {
                      "type": "object",
                      "properties": {
                        "enabled": { "type": "boolean", "description": "Enable user creation" },
                        "requiredTags": {
                          "type": "array",
                          "items": { "type": "string" },
                          "description": "The list of tags that are required to be specified when calling the API directly to create a user."
                        }
                      },
                      "required": ["enabled", "requiredTags"],
                      "description": "The user creation setting determines how to create a user through the API directly. The integration will have to implement the `createUser` functionality to support this setting.",
                      "additionalProperties": false
                    },
                    "tags": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                          "description": { "type": "string", "maxLength": 256, "description": "Description of the tag" }
                        },
                        "description": "Definition of a tag that can be provided on the object",
                        "nullable": true,
                        "additionalProperties": false
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "entities": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "maxLength": 64, "description": "Title of the entity" },
                      "description": { "type": "string", "maxLength": 256, "description": "Description of the entity" },
                      "schema": { "type": "object", "additionalProperties": true }
                    },
                    "required": ["schema"],
                    "description": "Entity definition",
                    "nullable": true,
                    "additionalProperties": false
                  }
                },
                "interfaces": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "minLength": 28,
                        "maxLength": 36,
                        "description": "ID of the interface"
                      },
                      "entities": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": { "name": { "type": "string", "maxLength": 200 } },
                          "required": ["name"],
                          "additionalProperties": false
                        }
                      },
                      "actions": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": { "name": { "type": "string", "maxLength": 200 } },
                          "required": ["name"],
                          "additionalProperties": false
                        }
                      },
                      "events": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": { "name": { "type": "string", "maxLength": 200 } },
                          "required": ["name"],
                          "additionalProperties": false
                        }
                      },
                      "channels": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": { "name": { "type": "string", "maxLength": 200 } },
                          "required": ["name"],
                          "additionalProperties": false
                        }
                      }
                    },
                    "required": ["id"],
                    "nullable": true,
                    "additionalProperties": false
                  }
                },
                "sandbox": {
                  "type": "object",
                  "properties": {
                    "identifierExtractScript": { "type": "string", "maxLength": 2000, "nullable": true },
                    "messageExtractScript": { "type": "string", "maxLength": 2000, "nullable": true }
                  },
                  "additionalProperties": false
                },
                "secrets": {
                  "type": "object",
                  "additionalProperties": { "type": "string", "maxLength": 20000, "nullable": true },
                  "description": "Secrets are integration-wide values available in the code via environment variables formatted with a SECRET_ prefix followed by your secret name. A secret name must respect SCREAMING_SNAKE casing."
                },
                "code": { "type": "string", "description": "JavaScript code of the integration" },
                "icon": {
                  "type": "string",
                  "description": "Base64 encoded svg of the integration icon. This icon is global to the integration each versions will be updated when this changes."
                },
                "readme": {
                  "type": "string",
                  "description": "Base64 encoded markdown of the integration readme. The readme is specific to each integration versions."
                },
                "title": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 64,
                  "description": "Title of the integration. This is the name that will be displayed in the UI"
                },
                "description": {
                  "type": "string",
                  "maxLength": 256,
                  "description": "Description of the integration. This is the description that will be displayed in the UI"
                },
                "url": { "type": "string", "description": "URL of the integration", "nullable": true },
                "public": {
                  "type": "boolean",
                  "description": "Idicates if the integration is public. Public integrations are available to all and cannot be updated without creating a new version."
                },
                "layers": { "type": "array", "items": { "type": "string" } }
              },
              "title": "updateIntegrationBody",
              "additionalProperties": false
            }
          }
        }
      },
      "validateIntegrationUpdateBody": {
        "description": "Integration",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "configuration": {
                  "type": "object",
                  "properties": {
                    "title": { "type": "string", "maxLength": 64, "description": "Title of the configuration" },
                    "description": {
                      "type": "string",
                      "maxLength": 256,
                      "description": "Description of the configuration"
                    },
                    "schema": {
                      "type": "object",
                      "additionalProperties": true,
                      "description": "Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`."
                    },
                    "identifier": {
                      "type": "object",
                      "properties": {
                        "linkTemplateScript": { "type": "string", "maxLength": 2000, "nullable": true },
                        "required": { "type": "boolean" }
                      },
                      "additionalProperties": false
                    }
                  },
                  "description": "Default configuration definition of the integration",
                  "additionalProperties": false
                },
                "configurations": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "maxLength": 64, "description": "Title of the configuration" },
                      "description": {
                        "type": "string",
                        "maxLength": 256,
                        "description": "Description of the configuration"
                      },
                      "schema": {
                        "type": "object",
                        "additionalProperties": true,
                        "description": "Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`."
                      },
                      "identifier": {
                        "type": "object",
                        "properties": {
                          "linkTemplateScript": { "type": "string", "maxLength": 2000, "nullable": true },
                          "required": { "type": "boolean" }
                        },
                        "additionalProperties": false
                      }
                    },
                    "nullable": true,
                    "additionalProperties": false
                  },
                  "description": "Additional configuration definitions of the integration"
                },
                "channels": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "maxLength": 64, "description": "Title of the channel" },
                      "description": {
                        "type": "string",
                        "maxLength": 256,
                        "description": "Description of the channel"
                      },
                      "messages": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": { "schema": { "type": "object", "additionalProperties": true } },
                          "required": ["schema"],
                          "description": "Message definition",
                          "nullable": true,
                          "additionalProperties": false
                        }
                      },
                      "conversation": {
                        "type": "object",
                        "properties": {
                          "creation": {
                            "type": "object",
                            "properties": {
                              "enabled": { "type": "boolean", "description": "Enable conversation creation" },
                              "requiredTags": {
                                "type": "array",
                                "items": { "type": "string" },
                                "description": "The list of tags that are required to be specified when calling the API directly to create a conversation."
                              }
                            },
                            "required": ["enabled", "requiredTags"],
                            "description": "The conversation creation setting determines how to create a conversation through the API directly. The integration will have to implement the `createConversation` functionality to support this setting.",
                            "additionalProperties": false
                          },
                          "tags": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "object",
                              "properties": {
                                "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                                "description": {
                                  "type": "string",
                                  "maxLength": 256,
                                  "description": "Description of the tag"
                                }
                              },
                              "description": "Definition of a tag that can be provided on the object",
                              "nullable": true,
                              "additionalProperties": false
                            }
                          }
                        },
                        "additionalProperties": false
                      },
                      "message": {
                        "type": "object",
                        "properties": {
                          "tags": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "object",
                              "properties": {
                                "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                                "description": {
                                  "type": "string",
                                  "maxLength": 256,
                                  "description": "Description of the tag"
                                }
                              },
                              "description": "Definition of a tag that can be provided on the object",
                              "nullable": true,
                              "additionalProperties": false
                            }
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "nullable": true,
                    "additionalProperties": false
                  }
                },
                "identifier": {
                  "type": "object",
                  "properties": {
                    "extractScript": { "type": "string", "maxLength": 2000, "nullable": true },
                    "fallbackHandlerScript": { "type": "string", "maxLength": 2000, "nullable": true }
                  },
                  "additionalProperties": false
                },
                "actions": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "maxLength": 64, "description": "Title of the action" },
                      "description": { "type": "string", "maxLength": 256, "description": "Description of the action" },
                      "billable": { "type": "boolean" },
                      "cacheable": { "type": "boolean" },
                      "input": {
                        "type": "object",
                        "properties": { "schema": { "type": "object", "additionalProperties": true } },
                        "required": ["schema"],
                        "additionalProperties": false
                      },
                      "output": {
                        "type": "object",
                        "properties": { "schema": { "type": "object", "additionalProperties": true } },
                        "required": ["schema"],
                        "additionalProperties": false
                      }
                    },
                    "required": ["input", "output"],
                    "description": "Action definition",
                    "nullable": true,
                    "additionalProperties": false
                  }
                },
                "events": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "maxLength": 64, "description": "Title of the event" },
                      "description": { "type": "string", "maxLength": 256, "description": "Description of the event" },
                      "schema": { "type": "object", "additionalProperties": true }
                    },
                    "required": ["schema"],
                    "description": "Event Definition",
                    "nullable": true,
                    "additionalProperties": false
                  }
                },
                "states": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": ["conversation", "user", "integration"],
                        "description": "Type of the [State](#schema_state) (`conversation`, `user` or `integration`)"
                      },
                      "schema": {
                        "type": "object",
                        "additionalProperties": true,
                        "description": "Schema of the [State](#schema_state) in the `JSON schema` format. This `JSON schema` is going to be used for validating the state data."
                      }
                    },
                    "required": ["type", "schema"],
                    "description": "State definition",
                    "nullable": true,
                    "additionalProperties": false
                  }
                },
                "user": {
                  "type": "object",
                  "properties": {
                    "creation": {
                      "type": "object",
                      "properties": {
                        "enabled": { "type": "boolean", "description": "Enable user creation" },
                        "requiredTags": {
                          "type": "array",
                          "items": { "type": "string" },
                          "description": "The list of tags that are required to be specified when calling the API directly to create a user."
                        }
                      },
                      "required": ["enabled", "requiredTags"],
                      "description": "The user creation setting determines how to create a user through the API directly. The integration will have to implement the `createUser` functionality to support this setting.",
                      "additionalProperties": false
                    },
                    "tags": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                          "description": { "type": "string", "maxLength": 256, "description": "Description of the tag" }
                        },
                        "description": "Definition of a tag that can be provided on the object",
                        "nullable": true,
                        "additionalProperties": false
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "entities": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "maxLength": 64, "description": "Title of the entity" },
                      "description": { "type": "string", "maxLength": 256, "description": "Description of the entity" },
                      "schema": { "type": "object", "additionalProperties": true }
                    },
                    "required": ["schema"],
                    "description": "Entity definition",
                    "nullable": true,
                    "additionalProperties": false
                  }
                },
                "interfaces": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "minLength": 28,
                        "maxLength": 36,
                        "description": "ID of the interface"
                      },
                      "entities": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": { "name": { "type": "string", "maxLength": 200 } },
                          "required": ["name"],
                          "additionalProperties": false
                        }
                      },
                      "actions": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": { "name": { "type": "string", "maxLength": 200 } },
                          "required": ["name"],
                          "additionalProperties": false
                        }
                      },
                      "events": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": { "name": { "type": "string", "maxLength": 200 } },
                          "required": ["name"],
                          "additionalProperties": false
                        }
                      },
                      "channels": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": { "name": { "type": "string", "maxLength": 200 } },
                          "required": ["name"],
                          "additionalProperties": false
                        }
                      }
                    },
                    "required": ["id"],
                    "nullable": true,
                    "additionalProperties": false
                  }
                },
                "sandbox": {
                  "type": "object",
                  "properties": {
                    "identifierExtractScript": { "type": "string", "maxLength": 2000, "nullable": true },
                    "messageExtractScript": { "type": "string", "maxLength": 2000, "nullable": true }
                  },
                  "additionalProperties": false
                },
                "secrets": {
                  "type": "object",
                  "additionalProperties": { "type": "string", "maxLength": 20000, "nullable": true },
                  "description": "Secrets are integration-wide values available in the code via environment variables formatted with a SECRET_ prefix followed by your secret name. A secret name must respect SCREAMING_SNAKE casing."
                },
                "code": { "type": "string", "description": "JavaScript code of the integration" },
                "icon": {
                  "type": "string",
                  "description": "Base64 encoded svg of the integration icon. This icon is global to the integration each versions will be updated when this changes."
                },
                "readme": {
                  "type": "string",
                  "description": "Base64 encoded markdown of the integration readme. The readme is specific to each integration versions."
                },
                "title": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 64,
                  "description": "Title of the integration. This is the name that will be displayed in the UI"
                },
                "description": {
                  "type": "string",
                  "maxLength": 256,
                  "description": "Description of the integration. This is the description that will be displayed in the UI"
                },
                "url": { "type": "string", "description": "URL of the integration", "nullable": true },
                "public": {
                  "type": "boolean",
                  "description": "Idicates if the integration is public. Public integrations are available to all and cannot be updated without creating a new version."
                },
                "layers": { "type": "array", "items": { "type": "string" } }
              },
              "title": "validateIntegrationUpdateBody",
              "additionalProperties": false
            }
          }
        }
      },
      "requestIntegrationVerificationBody": {
        "description": "Integration",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "integrationId": { "type": "string" } },
              "required": ["integrationId"],
              "title": "requestIntegrationVerificationBody",
              "additionalProperties": false
            }
          }
        }
      },
      "createInterfaceBody": {
        "description": "Interface to create",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "maxLength": 200,
                  "description": "Name of the [Interface](#schema_interface)"
                },
                "version": {
                  "type": "string",
                  "maxLength": 200,
                  "description": "Version of the [Interface](#schema_interface)"
                },
                "entities": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "maxLength": 64, "description": "Title of the entity" },
                      "description": { "type": "string", "maxLength": 256, "description": "Description of the entity" },
                      "schema": { "type": "object", "additionalProperties": true }
                    },
                    "required": ["schema"],
                    "description": "Entity definition",
                    "additionalProperties": false
                  }
                },
                "events": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "maxLength": 64, "description": "Title of the event" },
                      "description": { "type": "string", "maxLength": 256, "description": "Description of the event" },
                      "schema": { "type": "object", "additionalProperties": true }
                    },
                    "required": ["schema"],
                    "description": "Event Definition",
                    "additionalProperties": false
                  }
                },
                "actions": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "maxLength": 64, "description": "Title of the action" },
                      "description": { "type": "string", "maxLength": 256, "description": "Description of the action" },
                      "billable": { "type": "boolean" },
                      "cacheable": { "type": "boolean" },
                      "input": {
                        "type": "object",
                        "properties": { "schema": { "type": "object", "additionalProperties": true } },
                        "required": ["schema"],
                        "additionalProperties": false
                      },
                      "output": {
                        "type": "object",
                        "properties": { "schema": { "type": "object", "additionalProperties": true } },
                        "required": ["schema"],
                        "additionalProperties": false
                      }
                    },
                    "required": ["input", "output"],
                    "description": "Action definition",
                    "additionalProperties": false
                  }
                },
                "channels": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "maxLength": 64, "description": "Title of the channel" },
                      "description": {
                        "type": "string",
                        "maxLength": 256,
                        "description": "Description of the channel"
                      },
                      "messages": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": { "schema": { "type": "object", "additionalProperties": true } },
                          "required": ["schema"],
                          "description": "Message definition",
                          "additionalProperties": false
                        }
                      }
                    },
                    "required": ["messages"],
                    "additionalProperties": false
                  }
                },
                "nameTemplate": {
                  "type": "object",
                  "properties": {
                    "script": { "type": "string", "maxLength": 2000 },
                    "language": { "type": "string", "maxLength": 200 }
                  },
                  "required": ["script", "language"],
                  "description": "Template string optionaly used at build time by integrations implementing this interface to pick a name for actions and events.",
                  "additionalProperties": false
                }
              },
              "required": ["name", "version"],
              "title": "createInterfaceBody",
              "additionalProperties": false
            }
          }
        }
      },
      "updateInterfaceBody": {
        "description": "Interface to update",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "entities": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "maxLength": 64, "description": "Title of the entity" },
                      "description": { "type": "string", "maxLength": 256, "description": "Description of the entity" },
                      "schema": { "type": "object", "additionalProperties": true }
                    },
                    "required": ["schema"],
                    "description": "Entity definition",
                    "nullable": true,
                    "additionalProperties": false
                  }
                },
                "events": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "maxLength": 64, "description": "Title of the event" },
                      "description": { "type": "string", "maxLength": 256, "description": "Description of the event" },
                      "schema": { "type": "object", "additionalProperties": true }
                    },
                    "required": ["schema"],
                    "description": "Event Definition",
                    "nullable": true,
                    "additionalProperties": false
                  }
                },
                "actions": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "maxLength": 64, "description": "Title of the action" },
                      "description": { "type": "string", "maxLength": 256, "description": "Description of the action" },
                      "billable": { "type": "boolean" },
                      "cacheable": { "type": "boolean" },
                      "input": {
                        "type": "object",
                        "properties": { "schema": { "type": "object", "additionalProperties": true } },
                        "required": ["schema"],
                        "additionalProperties": false
                      },
                      "output": {
                        "type": "object",
                        "properties": { "schema": { "type": "object", "additionalProperties": true } },
                        "required": ["schema"],
                        "additionalProperties": false
                      }
                    },
                    "required": ["input", "output"],
                    "description": "Action definition",
                    "nullable": true,
                    "additionalProperties": false
                  }
                },
                "channels": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "maxLength": 64, "description": "Title of the channel" },
                      "description": {
                        "type": "string",
                        "maxLength": 256,
                        "description": "Description of the channel"
                      },
                      "messages": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": { "schema": { "type": "object", "additionalProperties": true } },
                          "required": ["schema"],
                          "description": "Message definition",
                          "nullable": true,
                          "additionalProperties": false
                        }
                      }
                    },
                    "nullable": true,
                    "additionalProperties": false
                  }
                },
                "nameTemplate": {
                  "type": "object",
                  "properties": {
                    "script": { "type": "string", "maxLength": 2000 },
                    "language": { "type": "string", "maxLength": 200 }
                  },
                  "required": ["script", "language"],
                  "description": "Template string optionaly used at build time by integrations implementing this interface to pick a name for actions and events.",
                  "nullable": true,
                  "additionalProperties": false
                }
              },
              "title": "updateInterfaceBody",
              "additionalProperties": false
            }
          }
        }
      },
      "createPluginBody": {
        "description": "Plugin to create",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "name": { "type": "string", "maxLength": 200, "description": "Name of the [Plugin](#schema_plugin)" },
                "version": {
                  "type": "string",
                  "maxLength": 200,
                  "description": "Version of the [Plugin](#schema_plugin)"
                },
                "configuration": {
                  "type": "object",
                  "properties": {
                    "title": { "type": "string", "maxLength": 64, "description": "Title of the configuration" },
                    "description": {
                      "type": "string",
                      "maxLength": 256,
                      "description": "Description of the configuration"
                    },
                    "schema": {
                      "type": "object",
                      "additionalProperties": true,
                      "description": "Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`."
                    }
                  },
                  "required": ["schema"],
                  "description": "Configuration definition",
                  "additionalProperties": false
                },
                "states": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": ["conversation", "user", "bot", "task"],
                        "description": "Type of the [State](#schema_state) (`conversation`, `user`, `bot` or `task`)"
                      },
                      "schema": {
                        "type": "object",
                        "additionalProperties": true,
                        "description": "Schema of the [State](#schema_state) in the `JSON schema` format. This `JSON schema` is going to be used for validating the state data."
                      },
                      "expiry": {
                        "type": "number",
                        "minimum": 1,
                        "description": "Expiry of the [State](#schema_state) in milliseconds. The state will expire if it is idle for the configured value. By default, a state doesn't expire."
                      }
                    },
                    "required": ["type", "schema"],
                    "additionalProperties": false
                  }
                },
                "events": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "maxLength": 64, "description": "Title of the event" },
                      "description": { "type": "string", "maxLength": 256, "description": "Description of the event" },
                      "schema": { "type": "object", "additionalProperties": true }
                    },
                    "required": ["schema"],
                    "description": "Event Definition",
                    "additionalProperties": false
                  }
                },
                "actions": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "maxLength": 64, "description": "Title of the action" },
                      "description": { "type": "string", "maxLength": 256, "description": "Description of the action" },
                      "billable": { "type": "boolean" },
                      "cacheable": { "type": "boolean" },
                      "input": {
                        "type": "object",
                        "properties": { "schema": { "type": "object", "additionalProperties": true } },
                        "required": ["schema"],
                        "additionalProperties": false
                      },
                      "output": {
                        "type": "object",
                        "properties": { "schema": { "type": "object", "additionalProperties": true } },
                        "required": ["schema"],
                        "additionalProperties": false
                      }
                    },
                    "required": ["input", "output"],
                    "description": "Action definition",
                    "additionalProperties": false
                  }
                },
                "user": {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                          "description": { "type": "string", "maxLength": 256, "description": "Description of the tag" }
                        },
                        "description": "Definition of a tag that can be provided on the object",
                        "additionalProperties": false
                      }
                    }
                  },
                  "required": ["tags"],
                  "description": "User object configuration",
                  "additionalProperties": false
                },
                "conversation": {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                          "description": { "type": "string", "maxLength": 256, "description": "Description of the tag" }
                        },
                        "description": "Definition of a tag that can be provided on the object",
                        "additionalProperties": false
                      }
                    }
                  },
                  "required": ["tags"],
                  "description": "Conversation object configuration",
                  "additionalProperties": false
                },
                "dependencies": {
                  "type": "object",
                  "properties": {
                    "interfaces": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": { "id": { "type": "string" } },
                        "required": ["id"],
                        "additionalProperties": false
                      }
                    },
                    "integrations": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": { "id": { "type": "string" } },
                        "required": ["id"],
                        "additionalProperties": false
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "code": {
                  "type": "object",
                  "properties": {
                    "node": { "type": "string", "description": "Code of plugin bundled for Node.JS" },
                    "browser": { "type": "string", "description": "Code of plugin bundled for the browser" }
                  },
                  "required": ["node", "browser"],
                  "additionalProperties": false
                },
                "icon": {
                  "type": "string",
                  "description": "Base64 encoded svg of the plugin icon. This icon is global to the plugin each versions will be updated when this changes."
                },
                "readme": {
                  "type": "string",
                  "description": "Base64 encoded markdown of the plugin readme. The readme is specific to each plugin versions."
                },
                "title": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 64,
                  "description": "Title of the plugin. This is the name that will be displayed in the UI"
                },
                "description": {
                  "type": "string",
                  "maxLength": 256,
                  "description": "Description of the plugin. This is the description that will be displayed in the UI"
                }
              },
              "required": ["name", "version", "code"],
              "title": "createPluginBody",
              "additionalProperties": false
            }
          }
        }
      },
      "updatePluginBody": {
        "description": "Plugin to update",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "configuration": {
                  "type": "object",
                  "properties": {
                    "title": { "type": "string", "maxLength": 64, "description": "Title of the configuration" },
                    "description": {
                      "type": "string",
                      "maxLength": 256,
                      "description": "Description of the configuration"
                    },
                    "schema": {
                      "type": "object",
                      "additionalProperties": true,
                      "description": "Schema of the configuration in the `JSON schema` format. The configuration data is validated against this `JSON schema`."
                    }
                  },
                  "required": ["schema"],
                  "description": "Configuration definition",
                  "nullable": true,
                  "additionalProperties": false
                },
                "states": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": ["conversation", "user", "bot", "task"],
                        "description": "Type of the [State](#schema_state) (`conversation`, `user`, `bot` or `task`)"
                      },
                      "schema": {
                        "type": "object",
                        "additionalProperties": true,
                        "description": "Schema of the [State](#schema_state) in the `JSON schema` format. This `JSON schema` is going to be used for validating the state data."
                      },
                      "expiry": {
                        "type": "number",
                        "minimum": 1,
                        "description": "Expiry of the [State](#schema_state) in milliseconds. The state will expire if it is idle for the configured value. By default, a state doesn't expire."
                      }
                    },
                    "required": ["type", "schema"],
                    "nullable": true,
                    "additionalProperties": false
                  }
                },
                "events": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "maxLength": 64, "description": "Title of the event" },
                      "description": { "type": "string", "maxLength": 256, "description": "Description of the event" },
                      "schema": { "type": "object", "additionalProperties": true }
                    },
                    "required": ["schema"],
                    "description": "Event Definition",
                    "nullable": true,
                    "additionalProperties": false
                  }
                },
                "actions": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "maxLength": 64, "description": "Title of the action" },
                      "description": { "type": "string", "maxLength": 256, "description": "Description of the action" },
                      "billable": { "type": "boolean" },
                      "cacheable": { "type": "boolean" },
                      "input": {
                        "type": "object",
                        "properties": { "schema": { "type": "object", "additionalProperties": true } },
                        "required": ["schema"],
                        "additionalProperties": false
                      },
                      "output": {
                        "type": "object",
                        "properties": { "schema": { "type": "object", "additionalProperties": true } },
                        "required": ["schema"],
                        "additionalProperties": false
                      }
                    },
                    "required": ["input", "output"],
                    "description": "Action definition",
                    "nullable": true,
                    "additionalProperties": false
                  }
                },
                "user": {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                          "description": { "type": "string", "maxLength": 256, "description": "Description of the tag" }
                        },
                        "description": "Definition of a tag that can be provided on the object",
                        "nullable": true,
                        "additionalProperties": false
                      }
                    }
                  },
                  "required": ["tags"],
                  "additionalProperties": false
                },
                "conversation": {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "title": { "type": "string", "maxLength": 64, "description": "Title of the tag" },
                          "description": { "type": "string", "maxLength": 256, "description": "Description of the tag" }
                        },
                        "description": "Definition of a tag that can be provided on the object",
                        "nullable": true,
                        "additionalProperties": false
                      }
                    }
                  },
                  "required": ["tags"],
                  "additionalProperties": false
                },
                "dependencies": {
                  "type": "object",
                  "properties": {
                    "interfaces": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": { "id": { "type": "string" } },
                        "required": ["id"],
                        "nullable": true,
                        "additionalProperties": false
                      }
                    },
                    "integrations": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": { "id": { "type": "string" } },
                        "required": ["id"],
                        "nullable": true,
                        "additionalProperties": false
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "code": {
                  "type": "object",
                  "properties": {
                    "node": { "type": "string", "description": "Code of plugin bundled for Node.JS" },
                    "browser": { "type": "string", "description": "Code of plugin bundled for the browser" }
                  },
                  "additionalProperties": false
                },
                "icon": {
                  "type": "string",
                  "description": "Base64 encoded svg of the plugin icon. This icon is global to the plugin each versions will be updated when this changes."
                },
                "readme": {
                  "type": "string",
                  "description": "Base64 encoded markdown of the plugin readme. The readme is specific to each plugin versions."
                },
                "title": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 64,
                  "description": "Title of the plugin. This is the name that will be displayed in the UI"
                },
                "description": {
                  "type": "string",
                  "maxLength": 256,
                  "description": "Description of the plugin. This is the description that will be displayed in the UI"
                }
              },
              "title": "updatePluginBody",
              "additionalProperties": false
            }
          }
        }
      },
      "changeAISpendQuotaBody": {
        "description": "New AI Spend quota",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "monthlySpendingLimit": { "type": "number" } },
              "required": ["monthlySpendingLimit"],
              "title": "changeAISpendQuotaBody",
              "additionalProperties": false
            }
          }
        }
      },
      "introspectBody": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "botId": { "type": "string" } },
              "required": ["botId"],
              "title": "introspectBody",
              "additionalProperties": false
            }
          }
        }
      }
    },
    "parameters": {}
  }
}
